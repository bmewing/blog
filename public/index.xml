<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thug R Life</title>
    <link>http://thug-r.life/</link>
    <description>Recent content on Thug R Life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Sep 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://thug-r.life/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Analysis of R User Salaries from the 2019 StackOverflow Survey</title>
      <link>http://thug-r.life/post/2019-09-04-r-user-salaries-stackoverflow/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://thug-r.life/post/2019-09-04-r-user-salaries-stackoverflow/</guid>
      <description>IntroSaw an interesting analysis pop up in my Twitter feed, written by (Tomaž Weiss)[https://tomazweiss.github.io/] and (posted on KDNuggets)[https://www.kdnuggets.com/2019/08/r-users-salaries-2019-stackoverflow-survey.html] analyzing the 2019 StackOverflow survey data to look at salaries of R Users. As is often the case, my brain went down a rabbit trail of new questions to ask.
DataThe data is available in a zip file (from here)[https://insights.stackoverflow.com/survey], I uploaded just the results to an S3 bucket to make my analysis reproducible (though I would prefer if you downloaded from the original source instead of my bucket so I don’t have to pay for it).</description>
      <content:encoded><div id="intro" class="section level2">
<h2>Intro</h2>
<p>Saw an interesting analysis pop up in my Twitter feed, written by (Tomaž Weiss)[<a href="https://tomazweiss.github.io/" class="uri">https://tomazweiss.github.io/</a>] and (posted on KDNuggets)[<a href="https://www.kdnuggets.com/2019/08/r-users-salaries-2019-stackoverflow-survey.html" class="uri">https://www.kdnuggets.com/2019/08/r-users-salaries-2019-stackoverflow-survey.html</a>] analyzing the 2019 StackOverflow survey data to look at salaries of R Users. As is often the case, my brain went down a rabbit trail of new questions to ask.</p>
</div>
<div id="data" class="section level2">
<h2>Data</h2>
<p>The data is available in a zip file (from here)[<a href="https://insights.stackoverflow.com/survey" class="uri">https://insights.stackoverflow.com/survey</a>], I uploaded just the results to an S3 bucket to make my analysis reproducible (though I would prefer if you downloaded from the original source instead of my bucket so I don’t have to pay for it).</p>
<pre class="r"><code>library(data.table)
library(ggplot2)
## Warning: package &#39;ggplot2&#39; was built under R version 3.5.1
library(countrycode)
## Warning: package &#39;countrycode&#39; was built under R version 3.5.3

survey = fread(&quot;https://thug-r-data-share.s3.amazonaws.com/survey_results_public.csv&quot;)</code></pre>
<p>There are a lot of columns and a lot of responses (88k responses!). This is the same filtering that Tomaž applied, just done with <code>data.table</code> instead of <code>dplyr</code>. I also chunked some of it out differently. This reduces the data to just over 3k responses, each representing an employed developer/coder who uses R.</p>
<pre class="r"><code>LANGUAGE = &quot;^R$|;R$|^R;|;R;&quot;
BRANCH = c(&quot;I am a developer by profession&quot;,
           &quot;I am not primarily a developer, but I write code sometimes as part of my work&quot;)
EMPLOY = c(&quot;Employed full-time&quot;,
           &quot;Employed part-time&quot;,
           &quot;Independent contractor, freelancer, or self-employed&quot;)
survey_r = survey[grepl(LANGUAGE, LanguageWorkedWith) &amp; 
                    MainBranch %in% BRANCH &amp;
                    Employment %in% EMPLOY &amp;
                    Country != &quot;Other Country (Not Listed Above)&quot; &amp;
                    !is.na(Country) &amp; 
                    !is.na(ConvertedComp) &amp;
                    ConvertedComp &gt; 0]</code></pre>
<p>Tomaž had a great idea of bringing in the large geographical regions that countries are typically grouped into to help consolidate the visual aspects of the analysis.</p>
<pre class="r"><code>survey_r[, continent := countrycode::countrycode(sourcevar = Country, 
                                                 origin =&quot;country.name&quot;,
                                                 destination = &quot;continent&quot;)]
survey_r[, c(&quot;n_users&quot;,&quot;median_salary&quot;) := list(.N, median(ConvertedComp)), by = c(&quot;Country&quot;)]
survey_r[, Country := reorder(Country, ConvertedComp, median)]</code></pre>
<div id="first-visual" class="section level3">
<h3>First Visual</h3>
<p>The main deliverable from Tomaž’s article that I want to focus on is the plot of salary by country. As seen below, there are 50+ different countries that had at least 6 respondents who fit our criteria. Ranked from highest median salary to lowest, We see the USA at the top of the list with other developed countries following ending with developing / smaller developed countries at the bottom.</p>
<pre class="r"><code>first_plot = ggplot(data = survey_r[n_users &gt; 5], aes(x = Country, y = ConvertedComp, fill = continent)) + 
  geom_boxplot(outlier.size = 0.5) +
  ylab(&quot;Annual USD Salary&quot;) +
  coord_flip(ylim = c(0, 200000)) +
  scale_y_continuous(breaks = seq(0, 200000, by = 40000),
                     labels = scales::dollar_format()) +
  ggtitle(&quot;Distributions of R Users&#39; Salaries by Country&quot;) +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_discrete(name = &quot;Continent&quot;)</code></pre>
<p><img src="/post/2019-09-04-r-user-salaries-stackoverflow_files/figure-html/unnamed-chunk-5-1.png" width="672" /></p>
<p>While this is a pretty chart to look at, my first question in response is, have we just recreated the global wealth rank? I’m not surprised by any of the top countries or any of the low countries. The ‘steepening’ of the changes in median salary is pretty consistent with my expectations for wealth distribution in general. As such, I don’t believe I can gain an understanding of the ‘effect’ (used very loosely here) of being an R programmer in general. Is it a general indicator of increased prosperity? To answer this, we need more data.</p>
</div>
<div id="average-salaries" class="section level3">
<h3>Average Salaries</h3>
<p>The OECD (Organization for Economic Co-Operation and Development) provides data on average annual wages for 30+ countries, converted into USD PPP (Purchasing Power Parity). This is better than just convering annual wages to USD because the cost of living in different countries varies, and this is intended to normalize that. You can access (the data)[<a href="https://stats.oecd.org/Index.aspx?DataSetCode=AV_AN_WAGE#" class="uri">https://stats.oecd.org/Index.aspx?DataSetCode=AV_AN_WAGE#</a>] yourself, they have a fairly nice data explorer.</p>
<pre class="r"><code>country_data = structure(list(Country = c(&quot;Australia&quot;, &quot;Austria&quot;, 
&quot;Belgium&quot;, &quot;Canada&quot;, &quot;Czech Republic&quot;, &quot;Denmark&quot;, &quot;Finland&quot;, 
&quot;France&quot;, &quot;Germany&quot;, &quot;Greece&quot;, &quot;Hungary&quot;, &quot;Ireland&quot;, &quot;Italy&quot;, 
&quot;Japan&quot;, &quot;South Korea&quot;, &quot;Luxembourg&quot;, &quot;Netherlands&quot;, &quot;Norway&quot;, &quot;Poland&quot;, 
&quot;Portugal&quot;, &quot;Slovakia&quot;, &quot;Spain&quot;, &quot;Sweden&quot;, &quot;Switzerland&quot;, 
&quot;United Kingdom&quot;, &quot;United States&quot;, &quot;Mexico&quot;, &quot;Israel&quot;, &quot;Slovenia&quot;, 
&quot;Estonia&quot;, &quot;Iceland&quot;, &quot;New Zealand&quot;, &quot;Chile&quot;, &quot;Latvia&quot;, &quot;Lithuania&quot;), 
AverageSalaryPPP = c(53349.4136154893, 50868.2460070356, 
52079.6153106353, 48848.5225020856, 26961.5755906614, 55253.3420271725, 
44111.4000300468, 44510.1331755264, 49813.2001197041, 26670.9542671142, 
24454.7107939254, 47951.8524334211, 37751.9346359886, 40573.3776475475, 
39471.7119182279, 65448.6119521135, 54261.6824451956, 50955.8298398594, 
29109.0437588983, 25487.063695971, 25356.6822930888, 38761.1845695886, 
44196.2394518027, 64108.5507608971, 44770.0497407862, 63093.0146425662, 
16297.708306066, 37655.3011101961, 37321.9086709927, 26898.1034588229, 
66504.2811678198, 42324.8742039956, 27124.711145738, 25586.1979656909, 
26429.2281878031)), 
class = c(&quot;data.table&quot;, &quot;data.frame&quot;), row.names = c(NA, -36L))</code></pre>
<p>With this data captured, we can join it to our survey data and see the correlation between reported salaries in the survey and the national average salaries. The chart isn’t dynamic and some countries aren’t visible, but the pattern makes a few things very clear. First, there is a clear, positive correlation between the two values. Second, there are a few obvious outliers, specifically, Israel and Mexico. What this tells me is that the benefit of being an R programmer could be very high in these countries relative to the whole.</p>
<pre class="r"><code>correl_data = merge(survey_r[n_users &gt; 5, 
                             list(r_salary = median(ConvertedComp)), 
                             by = c(&quot;Country&quot;, &quot;continent&quot;)],
                    country_data, by = &quot;Country&quot;)
correl_plot = ggplot(data = correl_data, aes(x = AverageSalaryPPP, y = r_salary, label = Country, fill = continent)) +
  geom_label() +
  scale_y_continuous(labels = scales::dollar_format()) +
  scale_x_continuous(labels = scales::dollar_format()) +
  ggtitle(&quot;Distributions of R Users&#39; Salaries by Country&quot;) +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_discrete(name = &quot;Continent&quot;) +
  ylab(&quot;Median R User Salary&quot;) +
  xlab(&quot;National Average Salary&quot;)</code></pre>
<p><img src="/post/2019-09-04-r-user-salaries-stackoverflow_files/figure-html/unnamed-chunk-8-1.png" width="672" /></p>
</div>
<div id="correcting-salaries-for-standard-of-living" class="section level3">
<h3>Correcting Salaries for Standard of Living</h3>
<p>The next step then is to correct the reported salaries by finding the difference between reported salary and average national salary. I’m assuming that all other factors don’t matter, only the fact that you’re an R programmer (obviously wrong), to see if I can glean the value add of the skill.</p>
<p>This time, I’m going to merge the country data the full survey results of R users. I’ll correct salary by subtracting off the national average salary and resort countries. Finally, I’ll make the first plot again, with new data.</p>
<pre class="r"><code>corrected = merge(survey_r[n_users &gt; 5], country_data, by = &quot;Country&quot;)
corrected[, corrected_salary := ConvertedComp - AverageSalaryPPP]
corrected[, Country := reorder(Country, corrected_salary, median)]

corrected_plot = ggplot(data = corrected, aes(x = Country, y = corrected_salary, fill = continent)) + 
  geom_boxplot(outlier.size = 0.5) +
  ylab(&quot;Difference Between Reported USD Salary and National Average&quot;) +
  coord_flip(ylim = c(-50000, 125000)) +
  scale_y_continuous(labels = scales::dollar_format()) +
  ggtitle(&quot;Distributions of R Users&#39; Salaries by Country&quot;) +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_discrete(name = &quot;Continent&quot;)</code></pre>
<p><img src="/post/2019-09-04-r-user-salaries-stackoverflow_files/figure-html/unnamed-chunk-10-1.png" width="672" /></p>
<p>Most obvious bit is that the US is no longer on top - that belongs to Israel which was #2 before. What’s a little sad is that in Spain, Austria, Hungary, Slovenia, Slovakia, and France the median R programmer salary is below the average national salary - apparently it’s not a skill in high demand there. Only 9 countries have at least 75% of R programmers report a salary above the national average (Israel, USA, Norway, Denmark, Australia, UK, Japan, New Zealand, and Sweden).</p>
<p>I think it would be safe to conclude that from a global perspective, just being an R programmer isn’t the ticket to the good life.</p>
</div>
<div id="rank-shifts" class="section level3">
<h3>Rank Shifts</h3>
<p>How much does this shift in perspective shift the ranking of countries? The table below is sorted by absolute magnitude of shift in rank. Of the two outliers I picked out of the correlation plot, Mexico and Israel, only Mexico shows up high on the list having moved up 14 steps in the ranking by comparing salary to average national wages, rocketing the second lowest value to middle of the pack.</p>
<p>Why doesn’t Israel show up higher? Because it was in the second highest position and moved to the highest - not a lot of opportunity for growth there.</p>
<p>Austria is the big loser, falling 14 spots to second from last (I have no speculation as to why).</p>
<pre class="r"><code>country_ranks = corrected[, list(median_reported = median(median_salary),
                                 median_corrected = median(corrected_salary)),
                          by = &quot;Country&quot;]
country_ranks[, c(&quot;reported_rank&quot;, &quot;corrected_rank&quot;) := 
                list(frank(median_reported), frank(median_corrected))]
country_ranks[, rank_change := corrected_rank - reported_rank]</code></pre>
<table>
<thead>
<tr class="header">
<th align="left">Country</th>
<th align="right">Original Rank</th>
<th align="right">National Salary Corrected Rank</th>
<th align="right">Change in Ranks</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Mexico</td>
<td align="right">2</td>
<td align="right">16</td>
<td align="right">14</td>
</tr>
<tr class="even">
<td align="left">Austria</td>
<td align="right">14</td>
<td align="right">2</td>
<td align="right">-12</td>
</tr>
<tr class="odd">
<td align="left">Netherlands</td>
<td align="right">16</td>
<td align="right">7</td>
<td align="right">-9</td>
</tr>
<tr class="even">
<td align="left">Spain</td>
<td align="right">10</td>
<td align="right">1</td>
<td align="right">-9</td>
</tr>
<tr class="odd">
<td align="left">Czech Republic</td>
<td align="right">8</td>
<td align="right">15</td>
<td align="right">7</td>
</tr>
<tr class="even">
<td align="left">France</td>
<td align="right">13</td>
<td align="right">6</td>
<td align="right">-7</td>
</tr>
<tr class="odd">
<td align="left">Slovenia</td>
<td align="right">11</td>
<td align="right">4</td>
<td align="right">-7</td>
</tr>
<tr class="even">
<td align="left">Lithuania</td>
<td align="right">7</td>
<td align="right">13</td>
<td align="right">6</td>
</tr>
<tr class="odd">
<td align="left">Portugal</td>
<td align="right">4</td>
<td align="right">10</td>
<td align="right">6</td>
</tr>
<tr class="even">
<td align="left">Belgium</td>
<td align="right">18</td>
<td align="right">14</td>
<td align="right">-4</td>
</tr>
<tr class="odd">
<td align="left">Japan</td>
<td align="right">19</td>
<td align="right">23</td>
<td align="right">4</td>
</tr>
<tr class="even">
<td align="left">Chile</td>
<td align="right">6</td>
<td align="right">9</td>
<td align="right">3</td>
</tr>
<tr class="odd">
<td align="left">Germany</td>
<td align="right">22</td>
<td align="right">19</td>
<td align="right">-3</td>
</tr>
<tr class="even">
<td align="left">Greece</td>
<td align="right">5</td>
<td align="right">8</td>
<td align="right">3</td>
</tr>
<tr class="odd">
<td align="left">Switzerland</td>
<td align="right">27</td>
<td align="right">24</td>
<td align="right">-3</td>
</tr>
<tr class="even">
<td align="left">Canada</td>
<td align="right">23</td>
<td align="right">21</td>
<td align="right">-2</td>
</tr>
<tr class="odd">
<td align="left">Finland</td>
<td align="right">15</td>
<td align="right">17</td>
<td align="right">2</td>
</tr>
<tr class="even">
<td align="left">Hungary</td>
<td align="right">1</td>
<td align="right">3</td>
<td align="right">2</td>
</tr>
<tr class="odd">
<td align="left">New Zealand</td>
<td align="right">20</td>
<td align="right">22</td>
<td align="right">2</td>
</tr>
<tr class="even">
<td align="left">Poland</td>
<td align="right">9</td>
<td align="right">11</td>
<td align="right">2</td>
</tr>
<tr class="odd">
<td align="left">Slovakia</td>
<td align="right">3</td>
<td align="right">5</td>
<td align="right">2</td>
</tr>
<tr class="even">
<td align="left">Australia</td>
<td align="right">25</td>
<td align="right">26</td>
<td align="right">1</td>
</tr>
<tr class="odd">
<td align="left">Denmark</td>
<td align="right">26</td>
<td align="right">27</td>
<td align="right">1</td>
</tr>
<tr class="even">
<td align="left">Ireland</td>
<td align="right">21</td>
<td align="right">20</td>
<td align="right">-1</td>
</tr>
<tr class="odd">
<td align="left">Israel</td>
<td align="right">29</td>
<td align="right">30</td>
<td align="right">1</td>
</tr>
<tr class="even">
<td align="left">Sweden</td>
<td align="right">17</td>
<td align="right">18</td>
<td align="right">1</td>
</tr>
<tr class="odd">
<td align="left">United Kingdom</td>
<td align="right">24</td>
<td align="right">25</td>
<td align="right">1</td>
</tr>
<tr class="even">
<td align="left">United States</td>
<td align="right">30</td>
<td align="right">29</td>
<td align="right">-1</td>
</tr>
<tr class="odd">
<td align="left">Italy</td>
<td align="right">12</td>
<td align="right">12</td>
<td align="right">0</td>
</tr>
<tr class="even">
<td align="left">Norway</td>
<td align="right">28</td>
<td align="right">28</td>
<td align="right">0</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="final-thoughts" class="section level2">
<h2>Final Thoughts</h2>
<p>There are lots of other ways we could correct the reported salaries, but the main idea of taking in other outside data to inform our analysis has shifted the results away from essentially ranking countries by their wealth to informing us of the value add of R programming as a skill. Unless you have a deadline, never stop at the first analysis, let it guide you to ask more and more questions until your curiousity is sated. As always, R made the process super easy, <code>data.table</code> made it super fast and <code>ggplot2</code> made it super pretty.</p>
</div>
</content:encoded>
    </item>
    
    <item>
      <title>A Tale of Three Assignment Operators</title>
      <link>http://thug-r.life/post/2019-04-03-tale-of-three-assignment-operators/</link>
      <pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://thug-r.life/post/2019-04-03-tale-of-three-assignment-operators/</guid>
      <description>The PlayersFirst, let’s meet the players.
&amp;lt;- The classic R assignment operator. It’s been around since the beginning ostensibly because there was actually a key for it back then.= The assignment operator used by nearly every other programming language in the world&amp;lt;&amp;lt;- The deep assignment operator, it exists only to commit sedition. And assign values to variables in other environments.-&amp;gt; and -&amp;gt;&amp;gt; The weird cousin that nobody likes to sit next to at family reunions.</description>
      <content:encoded><div id="the-players" class="section level2">
<h2>The Players</h2>
<p>First, let’s meet the players.</p>
<ul>
<li><code>&lt;-</code> The classic R assignment operator. It’s been around <a href="https://blog.revolutionanalytics.com/2008/12/use-equals-or-arrow-for-assignment.html">since the beginning</a> ostensibly because there was actually a key for it back then.</li>
<li><code>=</code> The assignment operator used by nearly every other programming language in the world</li>
<li><code>&lt;&lt;-</code> The deep assignment operator, it exists only to commit sedition. And assign values to variables in other environments.</li>
<li><code>-&gt;</code> and <code>-&gt;&gt;</code> The weird cousin that nobody likes to sit next to at family reunions. It’s the same thing as <code>&lt;-</code> and <code>&lt;&lt;-</code> respectively, but it assigns the opposite direction…we’ll pretend like it doesn’t exist going forward.</li>
</ul>
</div>
<div id="environments-in-r" class="section level2">
<h2>Environments in R</h2>
<p><a href="http://adv-r.had.co.nz/Environments.html">Environments in R</a> can be a little tricky to wrap your head around intially, but once you’ve got it, you can leverage that power for good or ill. I’d suggest reading the chapter from Advanced-R (linked earlier) to learn more.</p>
<p>Every R session has multiple environments which are organized in a search path. Whenever you use a variable or call a function in R, it begins by looking in the current environment. If it finds what you need, it stops and returns it. If it doesn’t find what you need, it looks through the search path starting with the parent of the current environment and then the grandparent, etc.</p>
<pre class="r"><code>search()
## [1] &quot;.GlobalEnv&quot;        &quot;package:stats&quot;     &quot;package:graphics&quot; 
## [4] &quot;package:grDevices&quot; &quot;package:utils&quot;     &quot;package:datasets&quot; 
## [7] &quot;package:methods&quot;   &quot;Autoloads&quot;         &quot;package:base&quot;</code></pre>
<p>When you load a library in R, the library’s environment is inserted just after <code>globalenv()</code> (<code>.GlobalEnv</code> as noted above). Note below how I load the <code>Matrix</code> library and it enters the search path at postion #2.</p>
<pre class="r"><code>library(Matrix)
search()
##  [1] &quot;.GlobalEnv&quot;        &quot;package:Matrix&quot;    &quot;package:stats&quot;    
##  [4] &quot;package:graphics&quot;  &quot;package:grDevices&quot; &quot;package:utils&quot;    
##  [7] &quot;package:datasets&quot;  &quot;package:methods&quot;   &quot;Autoloads&quot;        
## [10] &quot;package:base&quot;</code></pre>
<p>When we do basic assignment in the terminal in R, a variable is created (or changed) in the <code>globalenv()</code>.</p>
<pre class="r"><code>x = &#39;equals assign&#39;
y &lt;- &#39;arrow assign&#39;
z &lt;&lt;- &#39;deep assign&#39;</code></pre>
<p>We can fetch those values directly out of <code>globalenv()</code> using the <code>$</code>. Note that when I request a variable that hasn’t been created, it returns NULL.</p>
<pre class="r"><code>cat(&quot;x:&quot;,globalenv()$x,&quot;\n&quot;)
## x: equals assign
cat(&quot;y:&quot;,globalenv()$y,&quot;\n&quot;)
## y: arrow assign
cat(&quot;z:&quot;,globalenv()$z,&quot;\n&quot;)
## z: deep assign
cat(&quot;not_assigned:&quot;,globalenv()$not_assigned,&quot;\n&quot;)
## not_assigned:</code></pre>
<p>When we create a function, the code block that makes up the function has it’s own environment. In this function here, I define two inputs, <code>x</code>, <code>y</code>. These variable names are different from the variables we already defined in our global environment. So when we assign these values in the function call, they are earlier in the search path so they’re the value that’s used. however, they don’t modify the values in <code>globalenv()</code> which we can see below. We can also create new variables inside the function which don’t exist in <code>globalenv()</code> meaning we can’t reference those values. Finally, note that we can refernce the variable <code>z</code> that we created in the global environment inside the function. While the variable <code>z</code> doesn’t exist in the function’s environment, R looks through the search path and finds it in <code>globalenv()</code> and uses that value.</p>
<pre class="r"><code>demo = function(x, y){
  to_print = &quot;%s: %s\n&quot;
  a = &quot;apple&quot;
  cat(sprintf(to_print,&quot;a&quot;,a))
  cat(sprintf(to_print,&quot;x&quot;,x))
  cat(sprintf(to_print,&quot;y&quot;,y))
  cat(sprintf(to_print,&quot;z&quot;,z))
}
demo(x = &quot;arrow assign&quot;, y = &quot;equals assign&quot;)
## a: apple
## x: arrow assign
## y: equals assign
## z: deep assign</code></pre>
<pre class="r"><code>cat(&quot;From globalenv():\n&quot;)
## From globalenv():
cat(c(&quot;x:&quot;, globalenv()$x), &quot;\n&quot;)
## x: equals assign
cat(c(&quot;y:&quot;, globalenv()$y), &quot;\n&quot;)
## y: arrow assign
cat(c(&quot;a:&quot;, globalenv()$a), &quot;\n&quot;)
## a:</code></pre>
</div>
<div id="player-behavior" class="section level2">
<h2>Player Behavior</h2>
<p>We saw earlier that we can use all three of the assignment operators to create new values in the current environment. What are the differences? When should one be used over the other?</p>
<div id="sedition" class="section level3">
<h3>Sedition</h3>
<p>I jokingly indicated that the <code>&lt;&lt;-</code> operator exists only for sedition. This is because <code>&lt;&lt;-</code> doesn’t necessarily assign a value to a variable in the current environment, it can modify environments later in the search path. Consider the following example. A simple function <code>sedition</code> takes one argument and uses <code>&lt;&lt;-</code> to assign it to <code>x</code> which at the time of the assignment doesn’t already exist in the function’s environment. We then print out the value of <code>x</code> and then try to print out the local environment’s version of <code>x</code>.</p>
<pre class="r"><code>x = &quot;equals assign&quot;
sedition = function(new_val){
  x = &quot;hi there!&quot;
  x &lt;&lt;- new_val
  cat(&quot;internal:&quot;, x, &quot;\n&quot;)
}
cat(c(&quot;x:&quot;, x, &quot;\n&quot;))
## x: equals assign
sedition(&quot;all your base&quot;)
## internal: hi there!
cat(c(&quot;x:&quot;, x, &quot;\n&quot;))
## x: all your base</code></pre>
<p>What’s happened here? R started looking through the search path, <em>starting with the parent environment</em> and found where we’d already assigned a value to <code>x</code> in <code>globalenv()</code> and replaced the assignment with <code>new_val</code>. When we printed it out though, R found the value assigned to <code>x</code> from the function’s environment and returned that value. So the <code>&lt;&lt;-</code> has modified an environment <em>outside</em> the environment where it was used. <strong>But wait!</strong> When we used <code>&lt;&lt;-</code> in the global environment, it was assigned in the global environment, right? If R can’t find a variable with a value already assigned to it in the search path, it will create a new one in global and assign it there.</p>
<pre class="r"><code>dummy_func = function(value){
  dummy_var &lt;&lt;- value
}
cat(c(&quot;dummy_var:&quot;, globalenv()$dummy_var, &quot;\n&quot;))
## dummy_var:
dummy_func(&quot;dummy value&quot;)
cat(c(&quot;dummy_var:&quot;, dummy_var, &quot;\n&quot;))
## dummy_var: dummy value</code></pre>
<div id="when-would-this-be-useful" class="section level4">
<h4>When would this be useful?</h4>
<p>The main reason why <code>&lt;&lt;-</code> gets used is when you have a function and you want to create <strong>side effects</strong>, that is, have your function do things that affect the world around it beyond the value it returns. Side effects are generally considered bad, but I don’t judge your life choices.</p>
</div>
</div>
<div id="assigning-values-to-function-arguments" class="section level3">
<h3>Assigning values to function arguments</h3>
<p>While lots of people argue about <code>&lt;-</code> vs <code>=</code> for assigning values to variables, you’ve probably never seen someone call a function and assign values to the arguments of the function with anything other than <code>=</code>. In fact, <em>some people</em> argue that reserving <code>&lt;-</code> for variable assignment and <code>=</code> for argument assignment results in, and these are big air quotes, “cleaner code”. But, did you know that using <code>&lt;-</code> actually results in a sometimes useful side effect?</p>
<pre class="r"><code>dummy_func = function(arg){
  cat(arg, &quot;\n&quot;)
}

cat(&quot;arg:&quot;, globalenv()$arg, &quot;\n&quot;)
## arg:
dummy_func(arg = &quot;nothing ever changes...&quot;)
## nothing ever changes...
cat(&quot;arg:&quot;, globalenv()$arg, &quot;\n&quot;)
## arg:
dummy_func(arg &lt;- &quot;new values incoming!&quot;)
## new values incoming!
cat(&quot;arg:&quot;, globalenv()$arg, &quot;\n&quot;)
## arg: new values incoming!</code></pre>
<p>When this code block starts to run, no value is attached to <code>arg</code>. When I call my dummy function and pass in the argument name of <code>arg</code> and use an <code>=</code> to assign a value to it, the right text is printed, but my environment is unaffected. However, when I pass in the named argument of <code>arg</code> and use <code>&lt;-</code> to assign it, now it’s popped into my environment!</p>
<div id="when-would-this-be-useful-1" class="section level4">
<h4>When would this be useful?</h4>
<p><a href="https://codegolf.stackexchange.com/">Code golf</a>. It’s where I learned about this trick.</p>
<p>More useful though is to create psuedo-integration tests with <code>testthat</code>. The <code>testthat</code> package is great for unit tests, but what if you want to make sure the output of one function feeds correctly into another function? What if your function output has several characteristics you want to check but you don’t want to have to run the function repeatedly?</p>
<pre class="r"><code>testthat::test_that(&quot;Integration Test&quot;,{
  testthat::expect_type(tmp &lt;- function1(), &quot;list&quot;)
  testthat::expect_length(tmp, 4)
  testthat::expect_type(function2(tmp), &quot;data.frame&quot;)
})</code></pre>
<p>Because <code>testthat::expect_*</code> is a function call, anything you pass in as an argument is only availble for that function call. Using <code>&lt;-</code> for argument assignment (and leveraging the way R handles named arguments, argument order and <code>...</code>) can save the results into the testing environment for use in other checks.</p>
</div>
</div>
</div>
<div id="conclusion" class="section level2">
<h2>Conclusion</h2>
<p>I’m an avid <code>=</code> assigner because it keeps me consistent across the different languages I use. Also, <code>&lt;-</code> is too many keystrokes. I even figured out how to get <code>lintr</code> to make <code>=</code> the default and complain about <code>&lt;-</code> in some of my projects. That being said, knowing the tricks of using the different operators empowers you to do things that might otherwise be impossible or at least take even more keystrokes than <code>&lt;-</code>.</p>
</div>
</content:encoded>
    </item>
    
    <item>
      <title>Prep Your Hugo Blog for R-bloggers</title>
      <link>http://thug-r.life/post/2018-02-07-hugo-to-rbloggers/</link>
      <pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://thug-r.life/post/2018-02-07-hugo-to-rbloggers/</guid>
      <description>Get Ready for R-BloggersThere are lots of reasons to write a technical blog. Getting practice writing, thinking through ideas, etc. are all fulfilling reasons on their own. But life is always better with an audience. Well, not always. But for a blog it is. R-bloggers is a great platform to find an audience and share your writing with the world.
If you’re writing with Hugo via blogdown though, there’s a hurdle you’ll need to clear.</description>
      <content:encoded><div id="get-ready-for-r-bloggers" class="section level2">
<h2>Get Ready for R-Bloggers</h2>
<p>There are lots of reasons to write a technical blog. Getting practice writing, thinking through ideas, etc. are all fulfilling reasons on their own. But life is always better with an audience. Well, not always. But for a blog it is. <a href="https://www.r-bloggers.com">R-bloggers</a> is a great platform to find an audience and share your writing with the world.</p>
<p>If you’re writing with Hugo via blogdown though, there’s a hurdle you’ll need to clear. R-bloggers requires that your RSS feed contain the complete content of a blog post and not just a preview. By default, Hugo only produces a preview.</p>
<div class="figure">
<img src="/img/2018-02-07-rbloggers.png" />

</div>
<p>So how do make Hugo do the full content RSS? Turns out, R-bloggers actually had a link right on the page, but I missed it. The good news is, it’s pretty easy. You’ll need to modify just one file. From your blog directory, navigate through <code>themes</code> &gt; whatever theme you’re using &gt; <code>layouts</code> and you’ll see a file called rss.xml. Go ahead and edit this.</p>
<p>In this file you’re looking for the <code>&lt;item&gt;</code> section - this is where each RSS post is contained. Mine was lacking <code>&lt;content:encoded&gt;...</code> which I added below the description. I used safeHTML because I like safe things. Evrything else I left alone. When I rebuilt, the RSS feed included the full content of each post which is exactly what I was looking for.</p>
<pre class="xml"><code>    &lt;item&gt;
      &lt;title&gt;{{ .Title }}&lt;/title&gt;
      &lt;link&gt;{{ .Permalink }}&lt;/link&gt;
      &lt;pubDate&gt;{{ .Date.Format &quot;Mon, 02 Jan 2006 15:04:05 -0700&quot; | safeHTML }}&lt;/pubDate&gt;
      {{ with .Site.Author.email }}&lt;author&gt;{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}&lt;/author&gt;{{end}}
      &lt;guid&gt;{{ .Permalink }}&lt;/guid&gt;
      &lt;description&gt;{{ .Summary | html }}&lt;/description&gt;
      &lt;content:encoded&gt;{{ .Content | safeHTML }}&lt;/content:encoded&gt;
    &lt;/item&gt;</code></pre>
</div>
</content:encoded>
    </item>
    
    <item>
      <title>mgsub v1.0 Launched to CRAN</title>
      <link>http://thug-r.life/post/2018-01-26-mgsub-launched/</link>
      <pubDate>Fri, 26 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://thug-r.life/post/2018-01-26-mgsub-launched/</guid>
      <description>Official CRAN LaunchEarlier this week I submitted mgsub to CRAN and after a couple of days it was accepted! Now it’s live! I’m very excited to have published my second package and one that I think is a more valuable contribution than my first. The package represented a few firsts for me. The first package that I wrote tests for, checked code coverage on and for which I wrote a vignette.</description>
      <content:encoded><div id="official-cran-launch" class="section level2">
<h2>Official CRAN Launch</h2>
<p>Earlier this week I submitted <code>mgsub</code> to CRAN and after a couple of days <a href="https://cran.r-project.org/web/packages/mgsub/index.html">it was accepted</a>! Now it’s live! I’m very excited to have published my second package and one that I think is a more valuable contribution than my first. The package represented a few firsts for me. The first package that I wrote tests for, checked code coverage on and for which I wrote a vignette. Woot!</p>
<p>In my nervous anticipation after submission I worried I might have missed the email indicating it went live so I did a quick search for <code>mgsub</code> to see what would come back. Turns out, there are at least 4 other implementations of <code>mgsub</code> in packages on CRAN already. Nothing kicks imposter syndrome into overdrive like seeing that 4 other people already did what you did. But the focus of my implementation is <em>safety</em> - it’s important to know that a string manipulation function is going to work the way you intend. If your processing enough strings (or even a big enough string) it is difficult to do QA on a function. Spot checking could miss things and if the process isn’t safe enough, there may be no way of accomplishing your goal.</p>
<p>So, I decided to download all 4 implementations and test them to see how they stack up. Get ready for lots of examples!</p>
</div>
<div id="contenders" class="section level2">
<h2>Contenders</h2>
<p>The 4 contenders are <code>qdap</code> (which I covered in a <a href="http://thug-r.life/post/2018-01-10-safe-multiple-string-substitutions/">previous post</a>), <code>bayesbio</code> (which actually doesn’t export their function), <code>bazar</code> and <code>textclean</code>. Note that I’m not actually loading the libraries because they will all have a namespace collision on <code>mgsub</code> so I’m calling by reference.</p>
<pre class="r"><code># library(mgsub)
# library(qdap)
# library(bayesbio) #not exported
# library(bazar)
# library(textclean)</code></pre>
<p>To make testing/comparing easier I wrote a function for each package which accepts a list of the string to be modified, the vector of matches and the vector of replacements. This way I can put the functions in a list and just <code>lapply</code> (the name of <code>f</code> for my list is super expressive). One thing to note is that I have ensured that each function accepts regular expression input (by setting <code>fixed=FALSE</code> where necessary).</p>
<pre class="r"><code>mgsub = function(a){
  replace = a$replace
  names(replace) = a$match
  mgsub::mgsub(a$orig,replace)
}
qdap = function(a){
  qdap::mgsub(a$match,a$replace,a$orig,fixed=FALSE)
}
bayesbio = function(a){
  bayesbio:::mgsub(a$match,a$replace,a$orig)
}
bazar = function(a){
  bazar::mgsub(a$match,a$replace,a$orig)
}
textclean = function(a){
  textclean::mgsub(a$orig,a$match,a$replace,fixed = FALSE)
}
f = list(mgsub,qdap,bayesbio,bazar,textclean)
names(f) = c(&quot;mgsub&quot;,&quot;qdap&quot;,&quot;bayesbio&quot;,&quot;bazar&quot;,&quot;textclean&quot;)</code></pre>
<p>Each test will cover how well each package handles different scenarios in multiple, global string substition. For each test I provide the original string, the matches, the replacements <em>and</em> the target result. Each test will return a table which contains the result of the call and indicates how successful each library was.</p>
</div>
<div id="simple-test" class="section level2">
<h2>Simple Test</h2>
<p>We’ll start off nice and easy. We’ll modify a string by replacing “hey” with “yo” and “let’s” with “we”.</p>
<pre class="r"><code>a = list(
orig = &quot;hey ho, let&#39;s go!&quot;,
match = c(&quot;hey&quot;,&quot;let&#39;s&quot;),
replace = c(&quot;yo&quot;,&quot;we&quot;)
)
simple_target = &quot;yo ho, we go!&quot;
simple = lapply(f,function(x) x(a))

htmlTable(prepTable(simple,simple_target),
          align=&quot;llr&quot;,
          css.cell = &quot;padding-left: 1em; padding-right: 1em&quot;)</code></pre>
<table class='gmisc_table' style='border-collapse: collapse; margin-top: 1em; margin-bottom: 1em;' >
<thead>
<tr>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey;'> </th>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;'>Library</th>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;'>Result</th>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;'>Correct</th>
</tr>
</thead>
<tbody>
<tr>
<td style='text-align: left;'>1</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>mgsub</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>yo ho, we go!</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>TRUE</td>
</tr>
<tr>
<td style='text-align: left;'>2</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>qdap</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>yo ho, we go!</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>TRUE</td>
</tr>
<tr>
<td style='text-align: left;'>3</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>bayesbio</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>we</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>FALSE</td>
</tr>
<tr>
<td style='text-align: left;'>4</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>bazar</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>yo ho, we go!</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>TRUE</td>
</tr>
<tr>
<td style='border-bottom: 2px solid grey; text-align: left;'>5</td>
<td style='padding-left: 1em; padding-right: 1em; border-bottom: 2px solid grey; text-align: left;'>textclean</td>
<td style='padding-left: 1em; padding-right: 1em; border-bottom: 2px solid grey; text-align: left;'>yo ho, we go!</td>
<td style='padding-left: 1em; padding-right: 1em; border-bottom: 2px solid grey; text-align: right;'>TRUE</td>
</tr>
</tbody>
</table>
<p>Right away we see that <code>bayesbio</code> is doing something very different from expected. Spoiler Alert: it continues. Given that it’s not an exported function, it may have a very specific use case in mind. Otherwise, the other packages all make the correct substitutions.</p>
</div>
<div id="substring" class="section level2">
<h2>Substring</h2>
<p>Next we’ll test how the libraries protect against substring substitution. In this case we want to replace “the” with “any” and “they” with “we”. I specifically put “the” earlier in the list of matches. If the functions aren’t safe, they may detect “the” as a substring of “they” and the result would be “any”. What’s very problematic about this example is that “any” is a real word which would make detection even more difficult when scanning results.</p>
<pre class="r"><code>a = list(
orig = &quot;they don&#39;t know the answer&quot;,
match = c(&quot;the&quot;,&quot;they&quot;),
replace = c(&quot;an&quot;,&quot;we&quot;)
)
substring_target = &quot;we don&#39;t know an answer&quot;
substring = lapply(f,function(x) x(a))

htmlTable(prepTable(substring,substring_target),
          align=&quot;llr&quot;,
          css.cell = &quot;padding-left: 1em; padding-right: 1em&quot;)</code></pre>
<table class='gmisc_table' style='border-collapse: collapse; margin-top: 1em; margin-bottom: 1em;' >
<thead>
<tr>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey;'> </th>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;'>Library</th>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;'>Result</th>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;'>Correct</th>
</tr>
</thead>
<tbody>
<tr>
<td style='text-align: left;'>1</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>mgsub</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>we don't know an answer</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>TRUE</td>
</tr>
<tr>
<td style='text-align: left;'>2</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>qdap</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>any don't know an answer</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>FALSE</td>
</tr>
<tr>
<td style='text-align: left;'>3</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>bayesbio</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>we</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>FALSE</td>
</tr>
<tr>
<td style='text-align: left;'>4</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>bazar</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>any don't know an answer</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>FALSE</td>
</tr>
<tr>
<td style='border-bottom: 2px solid grey; text-align: left;'>5</td>
<td style='padding-left: 1em; padding-right: 1em; border-bottom: 2px solid grey; text-align: left;'>textclean</td>
<td style='padding-left: 1em; padding-right: 1em; border-bottom: 2px solid grey; text-align: left;'>any don't know an answer</td>
<td style='padding-left: 1em; padding-right: 1em; border-bottom: 2px solid grey; text-align: right;'>FALSE</td>
</tr>
</tbody>
</table>
<p>The other packages have made the substring mistake. Now, this was an engineered example - by providing “the” before “they”, anything that just matches in order will have this problem. It could be avoided by the user simply sorting their matches by <code>nchar</code>. <code>qdap</code> actually does this by default - <em>if</em> <code>fixed = TRUE</code> (the actual argument is <code>order.pattern</code> but it seems to ignore setting it to <code>TRUE</code> if <code>fixed = FALSE</code>). So, just know that if you’re only working with fixed matches, <code>qdap</code> would have worked correctly here.</p>
<pre class="r"><code>qdap::mgsub(c(&quot;the&quot;,&quot;they&quot;),c(&quot;an&quot;,&quot;we&quot;),&quot;they don&#39;t know the answer&quot;,fixed=TRUE)
## [1] &quot;we don&#39;t know an answer&quot;</code></pre>
</div>
<div id="transpose-words" class="section level2">
<h2>Transpose words</h2>
<p>Transposing words means taking a pair of words and replacing each with the other. Here, we replace “hey” with “ho” and “ho” with “hey”.</p>
<pre class="r"><code>a = list(
orig = &quot;hey ho, let&#39;s go!&quot;,
match = c(&quot;hey&quot;,&quot;ho&quot;),
replace = c(&quot;ho&quot;,&quot;hey&quot;)
)
transpose_target = &quot;ho hey, let&#39;s go!&quot;
transpose = lapply(f,function(x) x(a))

htmlTable(prepTable(transpose,transpose_target),
          align=&quot;llr&quot;,
          css.cell = &quot;padding-left: 1em; padding-right: 1em&quot;)</code></pre>
<table class='gmisc_table' style='border-collapse: collapse; margin-top: 1em; margin-bottom: 1em;' >
<thead>
<tr>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey;'> </th>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;'>Library</th>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;'>Result</th>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;'>Correct</th>
</tr>
</thead>
<tbody>
<tr>
<td style='text-align: left;'>1</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>mgsub</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>ho hey, let's go!</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>TRUE</td>
</tr>
<tr>
<td style='text-align: left;'>2</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>qdap</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>hey hey, let's go!</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>FALSE</td>
</tr>
<tr>
<td style='text-align: left;'>3</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>bayesbio</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>hey</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>FALSE</td>
</tr>
<tr>
<td style='text-align: left;'>4</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>bazar</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>hey hey, let's go!</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>FALSE</td>
</tr>
<tr>
<td style='border-bottom: 2px solid grey; text-align: left;'>5</td>
<td style='padding-left: 1em; padding-right: 1em; border-bottom: 2px solid grey; text-align: left;'>textclean</td>
<td style='padding-left: 1em; padding-right: 1em; border-bottom: 2px solid grey; text-align: left;'>hey hey, let's go!</td>
<td style='padding-left: 1em; padding-right: 1em; border-bottom: 2px solid grey; text-align: right;'>FALSE</td>
</tr>
</tbody>
</table>
<p>The failure is amongst all the contenders again. Note, in this case, <code>qdap</code> fails even if <code>fixed = TRUE</code>. The problem (at least for <code>bazar</code> and <code>textclean</code>) is that they’re simply looping through matches. “hey” is replaced with “ho” leaving “ho ho, let’s go” and then “ho” is replaced with “hey” generating the result.</p>
<pre class="r"><code>qdap::mgsub(c(&quot;hey&quot;,&quot;ho&quot;),c(&quot;ho&quot;,&quot;hey&quot;),&quot;hey ho, let&#39;s go!&quot;,fixed=TRUE)
## [1] &quot;hey hey, let&#39;s go!&quot;</code></pre>
</div>
<div id="shifting-words" class="section level2">
<h2>Shifting Words</h2>
<p>This is similar to shifting words except it’s a chain of shifts. By shifting each word one spot to the left (with wraparound) we check if it’s a simple looping problem or something else. Also note, each match here is the same number of characters so any placeholder work done based on <code>nchar</code> would fail.</p>
<pre class="r"><code>a = list(
orig = &quot;hey, how are you?&quot;,
match = c(&quot;hey&quot;,&quot;how&quot;,&quot;are&quot;,&quot;you&quot;),
replace = c(&quot;how&quot;,&quot;are&quot;,&quot;you&quot;,&quot;hey&quot;)
)
shift_target = &quot;how, are you hey?&quot;
shift = lapply(f,function(x) x(a))

htmlTable(prepTable(shift,shift_target),
          align=&quot;llr&quot;,
          css.cell = &quot;padding-left: 1em; padding-right: 1em&quot;)</code></pre>
<p><table class='gmisc_table' style='border-collapse: collapse; margin-top: 1em; margin-bottom: 1em;' >
<thead>
<tr>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey;'> </th>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;'>Library</th>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;'>Result</th>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;'>Correct</th>
</tr>
</thead>
<tbody>
<tr>
<td style='text-align: left;'>1</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>mgsub</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>how, are you hey?</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>TRUE</td>
</tr>
<tr>
<td style='text-align: left;'>2</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>qdap</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>hey, hey hey hey?</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>FALSE</td>
</tr>
<tr>
<td style='text-align: left;'>3</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>bayesbio</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>hey</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>FALSE</td>
</tr>
<tr>
<td style='text-align: left;'>4</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>bazar</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>hey, hey hey hey?</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>FALSE</td>
</tr>
<tr>
<td style='border-bottom: 2px solid grey; text-align: left;'>5</td>
<td style='padding-left: 1em; padding-right: 1em; border-bottom: 2px solid grey; text-align: left;'>textclean</td>
<td style='padding-left: 1em; padding-right: 1em; border-bottom: 2px solid grey; text-align: left;'>hey, hey hey hey?</td>
<td style='padding-left: 1em; padding-right: 1em; border-bottom: 2px solid grey; text-align: right;'>FALSE</td>
</tr>
</tbody>
</table> In this case, every word has been replaced with the last replacement value (again, due to the looping).</p>
</div>
<div id="regex" class="section level2">
<h2>Regex</h2>
<p>Next I test regular expression support (including backreferences.)</p>
<pre class="r"><code>a = list(
orig = &quot;Dopazamine is not the same as dopachloride or dopamezamine and is still fake.&quot;,
match = c(&quot;[Dd]opa([^ ]*?mine)&quot;,&quot;fake&quot;),
replace = c(&quot;Meta\\1&quot;,&quot;real&quot;)
)
regex_target = &quot;Metazamine is not the same as dopachloride or Metamezamine and is still real.&quot;
regex = lapply(f,function(x) x(a))

htmlTable(prepTable(regex,regex_target),
          align=&quot;llr&quot;,
          css.cell = &quot;padding-left: 1em; padding-right: 1em&quot;)</code></pre>
<table class='gmisc_table' style='border-collapse: collapse; margin-top: 1em; margin-bottom: 1em;' >
<thead>
<tr>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey;'> </th>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;'>Library</th>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;'>Result</th>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;'>Correct</th>
</tr>
</thead>
<tbody>
<tr>
<td style='text-align: left;'>1</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>mgsub</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>Metazamine is not the same as dopachloride or Metamezamine and is still real.</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>TRUE</td>
</tr>
<tr>
<td style='text-align: left;'>2</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>qdap</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>Metazamine is not the same as dopachloride or Metamezamine and is still real.</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>TRUE</td>
</tr>
<tr>
<td style='text-align: left;'>3</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>bayesbio</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>real</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>FALSE</td>
</tr>
<tr>
<td style='text-align: left;'>4</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>bazar</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>Metazamine is not the same as dopachloride or Metamezamine and is still real.</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>TRUE</td>
</tr>
<tr>
<td style='border-bottom: 2px solid grey; text-align: left;'>5</td>
<td style='padding-left: 1em; padding-right: 1em; border-bottom: 2px solid grey; text-align: left;'>textclean</td>
<td style='padding-left: 1em; padding-right: 1em; border-bottom: 2px solid grey; text-align: left;'>Metazamine is not the same as dopachloride or Metamezamine and is still real.</td>
<td style='padding-left: 1em; padding-right: 1em; border-bottom: 2px solid grey; text-align: right;'>TRUE</td>
</tr>
</tbody>
</table>
<p>This one passes easily (everything is working with a form of <code>gsub</code> turned on) though remember we did have to explicitly flag <code>fixed = FALSE</code> for <code>qdap</code> and <code>textclean</code>. Forgetting to do so would have resulted in failure to match or weird replacements.</p>
</div>
<div id="regex-susbtring" class="section level2">
<h2>Regex Susbtring</h2>
<p>Most things failed to protect against substring matches, but what about when the smaller string (in terms of <code>nchar</code>) is a regular expression that matches a variable number of characters? Does the function actively determine what is a substring and what is a longer string? The example below is <em>super</em> engineered to create the scenario.</p>
<pre class="r"><code>a = list(
orig = &quot;Dopazamine is a fake chemical&quot;,
match = c(&quot;Dopazamin&quot;,&quot;Do.*ne&quot;),
replace = c(&quot;freakout&quot;,&quot;metazamine&quot;)
)
regex_substring_target = &quot;metazamine is a fake chemical&quot;
regex_substring = lapply(f,function(x) x(a))

htmlTable(prepTable(regex_substring,regex_substring_target),
          align=&quot;llr&quot;,
          css.cell = &quot;padding-left: 1em; padding-right: 1em&quot;)</code></pre>
<table class='gmisc_table' style='border-collapse: collapse; margin-top: 1em; margin-bottom: 1em;' >
<thead>
<tr>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey;'> </th>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;'>Library</th>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;'>Result</th>
<th style='border-bottom: 1px solid grey; border-top: 2px solid grey; text-align: center;'>Correct</th>
</tr>
</thead>
<tbody>
<tr>
<td style='text-align: left;'>1</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>mgsub</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>metazamine is a fake chemical</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>TRUE</td>
</tr>
<tr>
<td style='text-align: left;'>2</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>qdap</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>freakoute is a fake chemical</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>FALSE</td>
</tr>
<tr>
<td style='text-align: left;'>3</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>bayesbio</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>metazamine</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>FALSE</td>
</tr>
<tr>
<td style='text-align: left;'>4</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>bazar</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: left;'>freakoute is a fake chemical</td>
<td style='padding-left: 1em; padding-right: 1em; text-align: right;'>FALSE</td>
</tr>
<tr>
<td style='border-bottom: 2px solid grey; text-align: left;'>5</td>
<td style='padding-left: 1em; padding-right: 1em; border-bottom: 2px solid grey; text-align: left;'>textclean</td>
<td style='padding-left: 1em; padding-right: 1em; border-bottom: 2px solid grey; text-align: left;'>freakoute is a fake chemical</td>
<td style='padding-left: 1em; padding-right: 1em; border-bottom: 2px solid grey; text-align: right;'>FALSE</td>
</tr>
</tbody>
</table>
<p>Note that only <code>mgsub::mgsub</code> correctly protects substrings in the presence of variable length regular expressions - even when that variable length is presented later in the list of inputs.</p>
</div>
<div id="speed" class="section level2">
<h2>Speed</h2>
<p>So I’ve shown several examples of cases where other implementations of <code>mgsub</code> fail to safely perform substitutions. But what is the performance cost?</p>
<div id="simple" class="section level3">
<h3>Simple</h3>
<pre class="r"><code>library(microbenchmark)

s = &quot;Hi, my name is Mark&quot;
m = c(&quot;Hi&quot;,&quot;Mark&quot;)
r = c(&quot;Goodbye&quot;,&quot;Tom&quot;)
names(r) = m

smb = microbenchmark(
  mgsub = mgsub::mgsub(s,r,fixed=TRUE),
  qdap = qdap::mgsub(m,r,s),
  bayesbio = bayesbio:::mgsub(m,r,s),
  bazar = bazar::mgsub(m,r,s),
  textclean = textclean::mgsub(s,m,r)
)
smb = print(smb)
## Unit: microseconds
##       expr     min       lq      mean   median       uq     max neval
##      mgsub  95.545 140.9460 160.71527 161.9150 180.8780 304.137   100
##       qdap 184.890 242.8725 273.25684 286.8155 298.3025 422.291   100
##   bayesbio  16.411  28.6270  33.59056  33.5500  37.9260  88.252   100
##      bazar  26.257  41.9380  49.17671  48.3195  53.2430 114.143   100
##  textclean  43.397  68.1940  77.61020  77.6755  84.7875 216.251   100</code></pre>
<p><code>mgsub</code> and <code>qdap</code> in this simple case are in the same order of magnitude. The other three are significantly faster - the slowest of them is still 2x faster than <code>mgsub</code> or <code>qdap</code>.</p>
</div>
<div id="regex-1" class="section level3">
<h3>Regex</h3>
<pre class="r"><code>s = &quot;Dopazamine is not the same as Dopachloride and is still fake.&quot;
m = c(&quot;[Dd]opa(.*?mine)&quot;,&quot;fake&quot;)
r = c(&quot;Meta\\1&quot;,&quot;real&quot;)
names(r) = m

rmb = microbenchmark(
  mgsub = mgsub::mgsub(s,r),
  qdap = qdap::mgsub(m,r,s,fixed=FALSE),
  bayesbio = bayesbio:::mgsub(m,r,s),
  bazar = bazar::mgsub(m,r,s),
  textclean = textclean::mgsub(s,m,r,fixed=FALSE)
)
rmb = print(rmb)
## Unit: microseconds
##       expr     min       lq      mean   median       uq     max neval
##      mgsub 186.348 308.8780 345.39981 347.8975 381.4475 605.356   100
##       qdap 168.479 266.3935 275.46668 283.8980 297.9375 735.544   100
##   bayesbio  19.328  34.6445  41.66810  42.6675  49.5960  94.450   100
##      bazar  32.092  54.7015  59.58088  59.8070  69.1060  94.816   100
##  textclean  32.092  58.3485  65.30250  64.9120  73.3000 161.551   100</code></pre>
<p>When we add regular expressions (with backreferences) the speed difference grows even bigger.</p>
<p>All that being said, things are still in microseconds, so it’s not necessarily a practical difference. And, is it worth being so much faster knowing you could be getting wrong results?</p>
</div>
</div>
<div id="conclusion" class="section level2">
<h2>Conclusion</h2>

<table style="border-collapse:collapse;" class=table_1161 border=0>
<thead>
<tr style="border-top:2px solid black;">
  <th colspan=1 id="tableHTML_second_header_1"></th>
  <th colspan=6 id="tableHTML_second_header_2" style="border-bottom:1px solid black;">Correctness Results</th>
  <th colspan=2 id="tableHTML_second_header_3" style="border-bottom:1px solid black;">Median Runtime (microseconds)</th>
</tr>
<tr style="border-bottom:1px solid black;">
  <th id="tableHTML_header_1">Library&nbsp;&nbsp;</th>
  <th id="tableHTML_header_2">&nbsp;&nbsp;Simple&nbsp;&nbsp;</th>
  <th id="tableHTML_header_3">&nbsp;&nbsp;Substring&nbsp;&nbsp;</th>
  <th id="tableHTML_header_4">&nbsp;&nbsp;Transpose&nbsp;&nbsp;</th>
  <th id="tableHTML_header_5">&nbsp;&nbsp;Shift&nbsp;&nbsp;</th>
  <th id="tableHTML_header_6">&nbsp;&nbsp;Regex&nbsp;&nbsp;</th>
  <th id="tableHTML_header_7">Regex<br>Substring</th>
  <th id="tableHTML_header_8" style="text-align:right;">Simple </th>
  <th id="tableHTML_header_9" style="text-align:right;">Regex </th>
</tr>
</thead>
<tbody>
<tr>
  <td id="tableHTML_column_1">mgsub</td>
  <td id="tableHTML_column_2" style="background-color:#8df086;text-align:center;">Y</td>
  <td id="tableHTML_column_3" style="background-color:#8df086;text-align:center;">Y</td>
  <td id="tableHTML_column_4" style="background-color:#8df086;text-align:center;">Y</td>
  <td id="tableHTML_column_5" style="background-color:#8df086;text-align:center;">Y</td>
  <td id="tableHTML_column_6" style="background-color:#8df086;text-align:center;">Y</td>
  <td id="tableHTML_column_7" style="background-color:#8df086;text-align:center;">Y</td>
  <td id="tableHTML_column_8" style="text-align:right;">162</td>
  <td id="tableHTML_column_9" style="text-align:right;">348</td>
</tr>
<tr>
  <td id="tableHTML_column_1">qdap</td>
  <td id="tableHTML_column_2" style="background-color:#8df086;text-align:center;">Y</td>
  <td id="tableHTML_column_3" style="background-color:#6f87fc;text-align:center;">N</td>
  <td id="tableHTML_column_4" style="background-color:#6f87fc;text-align:center;">N</td>
  <td id="tableHTML_column_5" style="background-color:#6f87fc;text-align:center;">N</td>
  <td id="tableHTML_column_6" style="background-color:#8df086;text-align:center;">Y</td>
  <td id="tableHTML_column_7" style="background-color:#6f87fc;text-align:center;">N</td>
  <td id="tableHTML_column_8" style="text-align:right;">287</td>
  <td id="tableHTML_column_9" style="text-align:right;">284</td>
</tr>
<tr>
  <td id="tableHTML_column_1">bayesbio</td>
  <td id="tableHTML_column_2" style="background-color:#6f87fc;text-align:center;">N</td>
  <td id="tableHTML_column_3" style="background-color:#6f87fc;text-align:center;">N</td>
  <td id="tableHTML_column_4" style="background-color:#6f87fc;text-align:center;">N</td>
  <td id="tableHTML_column_5" style="background-color:#6f87fc;text-align:center;">N</td>
  <td id="tableHTML_column_6" style="background-color:#6f87fc;text-align:center;">N</td>
  <td id="tableHTML_column_7" style="background-color:#6f87fc;text-align:center;">N</td>
  <td id="tableHTML_column_8" style="text-align:right;">34</td>
  <td id="tableHTML_column_9" style="text-align:right;">43</td>
</tr>
<tr>
  <td id="tableHTML_column_1">bazar</td>
  <td id="tableHTML_column_2" style="background-color:#8df086;text-align:center;">Y</td>
  <td id="tableHTML_column_3" style="background-color:#6f87fc;text-align:center;">N</td>
  <td id="tableHTML_column_4" style="background-color:#6f87fc;text-align:center;">N</td>
  <td id="tableHTML_column_5" style="background-color:#6f87fc;text-align:center;">N</td>
  <td id="tableHTML_column_6" style="background-color:#8df086;text-align:center;">Y</td>
  <td id="tableHTML_column_7" style="background-color:#6f87fc;text-align:center;">N</td>
  <td id="tableHTML_column_8" style="text-align:right;">48</td>
  <td id="tableHTML_column_9" style="text-align:right;">60</td>
</tr>
<tr style="border-bottom:2px solid black;">
  <td id="tableHTML_column_1">textclean</td>
  <td id="tableHTML_column_2" style="background-color:#8df086;text-align:center;">Y</td>
  <td id="tableHTML_column_3" style="background-color:#6f87fc;text-align:center;">N</td>
  <td id="tableHTML_column_4" style="background-color:#6f87fc;text-align:center;">N</td>
  <td id="tableHTML_column_5" style="background-color:#6f87fc;text-align:center;">N</td>
  <td id="tableHTML_column_6" style="background-color:#8df086;text-align:center;">Y</td>
  <td id="tableHTML_column_7" style="background-color:#6f87fc;text-align:center;">N</td>
  <td id="tableHTML_column_8" style="text-align:right;">78</td>
  <td id="tableHTML_column_9" style="text-align:right;">65</td>
</tr>
</tbody>
</table>
<p>I’ve shown that only <code>mgsub::mgsub</code> provides actual correct multiple, global string substitution from the 5 packages that have a function named <code>mgsub</code> in every possible scenario. While it is on the slower end of runtime, it’s a small price to pay for safety.</p>
</div>
</content:encoded>
    </item>
    
    <item>
      <title>One Year of Trump Executive Orders</title>
      <link>http://thug-r.life/post/2018-01-25-one-year-of-trump-eo/</link>
      <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://thug-r.life/post/2018-01-25-one-year-of-trump-eo/</guid>
      <description>First YearLess than a week ago marked the end of Trump’s first year in office. Back in August I posted code on analyzing the issuing of Executive Orders. Today I’m just going to provide updated commentary.
NotesThe Federal Register takes time to actually publish Executive Orders. This window is variable but has a median value of 5 days. That’s why this post is coming out on the 25th instead of the 20th.</description>
      <content:encoded><script src="/rmarkdown-libs/htmlwidgets/htmlwidgets.js"></script>
<script src="/rmarkdown-libs/plotly-binding/plotly.js"></script>
<script src="/rmarkdown-libs/typedarray/typedarray.min.js"></script>
<script src="/rmarkdown-libs/jquery/jquery.min.js"></script>
<link href="/rmarkdown-libs/crosstalk/css/crosstalk.css" rel="stylesheet" />
<script src="/rmarkdown-libs/crosstalk/js/crosstalk.min.js"></script>
<link href="/rmarkdown-libs/plotlyjs/plotly-htmlwidgets.css" rel="stylesheet" />
<script src="/rmarkdown-libs/plotlyjs/plotly-latest.min.js"></script>


<div id="first-year" class="section level1">
<h1>First Year</h1>
<p>Less than a week ago marked the end of Trump’s first year in office. <a href="http://thug-r.life/post/2017-08-10-legislate-by-executive-order/">Back in August</a> I posted code on analyzing the issuing of Executive Orders. Today I’m just going to provide updated commentary.</p>
<div id="notes" class="section level2">
<h2>Notes</h2>
<p>The Federal Register takes time to actually publish Executive Orders. This window is variable but has a median value of 5 days. That’s why this post is coming out on the 25th instead of the 20th. There is a chance that Executive Orders are not caputred in this analysis which should be.</p>
</div>
<div id="back-in-august" class="section level2">
<h2>Back in August…</h2>
<p>Trump was second most prolific user of executive orders coming in just behind Ford having signed 46. Carter was catching up quickly and looked to overtake Trump. We saw a spike in Trumps usage of Executive Orders just before his 100 days in office mark. Will we see something similar at the end of his first year?</p>
</div>
<div id="chart" class="section level2">
<h2>Chart</h2>
<pre><code>## Warning: Column `daysInOffice` has different attributes on LHS and RHS of
## join

## Warning: Column `daysInOffice` has different attributes on LHS and RHS of
## join

## Warning: Column `daysInOffice` has different attributes on LHS and RHS of
## join

## Warning: Column `daysInOffice` has different attributes on LHS and RHS of
## join

## Warning: Column `daysInOffice` has different attributes on LHS and RHS of
## join

## Warning: Column `daysInOffice` has different attributes on LHS and RHS of
## join

## Warning: Column `daysInOffice` has different attributes on LHS and RHS of
## join

## Warning: Column `daysInOffice` has different attributes on LHS and RHS of
## join

## Warning: Column `daysInOffice` has different attributes on LHS and RHS of
## join</code></pre>
<div id="11203c72137a" style="width:672px;height:480px;" class="plotly html-widget"></div>
<script type="application/json" data-for="11203c72137a">{"x":{"visdat":{"1120462c39a1":["function () ","plotlyVisDat"]},"cur_data":"1120462c39a1","attrs":{"1120462c39a1":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Nixon"},"1120462c39a1.1":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Ford"},"1120462c39a1.2":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Carter"},"1120462c39a1.3":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Reagan"},"1120462c39a1.4":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"G.H.W. Bush"},"1120462c39a1.5":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Clinton"},"1120462c39a1.6":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"G.W. Bush"},"1120462c39a1.7":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Obama"},"1120462c39a1.8":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Trump"}},"layout":{"margin":{"b":40,"l":60,"t":25,"r":10},"shapes":[{"type":"line","x0":365,"x1":365,"y0":0,"y1":90,"line":{"dash":"dot","width":1}}],"xaxis":{"domain":[0,1],"title":"Days in Office"},"yaxis":{"domain":[0,1],"title":"# of Executive Orders Signed"},"title":"How have presidents used Executive Orders over the course of their terms?","hovermode":"closest","showlegend":true},"source":"A","config":{"modeBarButtonsToAdd":[{"name":"Collaborate","icon":{"width":1000,"ascent":500,"descent":-50,"path":"M487 375c7-10 9-23 5-36l-79-259c-3-12-11-23-22-31-11-8-22-12-35-12l-263 0c-15 0-29 5-43 15-13 10-23 23-28 37-5 13-5 25-1 37 0 0 0 3 1 7 1 5 1 8 1 11 0 2 0 4-1 6 0 3-1 5-1 6 1 2 2 4 3 6 1 2 2 4 4 6 2 3 4 5 5 7 5 7 9 16 13 26 4 10 7 19 9 26 0 2 0 5 0 9-1 4-1 6 0 8 0 2 2 5 4 8 3 3 5 5 5 7 4 6 8 15 12 26 4 11 7 19 7 26 1 1 0 4 0 9-1 4-1 7 0 8 1 2 3 5 6 8 4 4 6 6 6 7 4 5 8 13 13 24 4 11 7 20 7 28 1 1 0 4 0 7-1 3-1 6-1 7 0 2 1 4 3 6 1 1 3 4 5 6 2 3 3 5 5 6 1 2 3 5 4 9 2 3 3 7 5 10 1 3 2 6 4 10 2 4 4 7 6 9 2 3 4 5 7 7 3 2 7 3 11 3 3 0 8 0 13-1l0-1c7 2 12 2 14 2l218 0c14 0 25-5 32-16 8-10 10-23 6-37l-79-259c-7-22-13-37-20-43-7-7-19-10-37-10l-248 0c-5 0-9-2-11-5-2-3-2-7 0-12 4-13 18-20 41-20l264 0c5 0 10 2 16 5 5 3 8 6 10 11l85 282c2 5 2 10 2 17 7-3 13-7 17-13z m-304 0c-1-3-1-5 0-7 1-1 3-2 6-2l174 0c2 0 4 1 7 2 2 2 4 4 5 7l6 18c0 3 0 5-1 7-1 1-3 2-6 2l-173 0c-3 0-5-1-8-2-2-2-4-4-4-7z m-24-73c-1-3-1-5 0-7 2-2 3-2 6-2l174 0c2 0 5 0 7 2 3 2 4 4 5 7l6 18c1 2 0 5-1 6-1 2-3 3-5 3l-174 0c-3 0-5-1-7-3-3-1-4-4-5-6z"},"click":"function(gd) { \n        // is this being viewed in RStudio?\n        if (location.search == '?viewer_pane=1') {\n          alert('To learn about plotly for collaboration, visit:\\n https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html');\n        } else {\n          window.open('https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html', '_blank');\n        }\n      }"}],"cloud":false},"data":[{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402],"y":[0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,11,11,11,11,12,12,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,19,19,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,29,30,30,30,30,30,30,30,30,30,30,30,30,31,32,32,32,32,32,32,33,33,34,34,35,35,35,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,39,40,41,41,41,41,41,41,41,41,41,41,41,41,41,41,43,43,43,43,43,44,44,44,45,45,45,45,45,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,48,49,49,49,49,49,49,49,49,49,49,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,54,55,55,56,56,56,56,56,56,57,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,59],"type":"scatter","mode":"lines","name":"Nixon","line":{"fillcolor":"rgba(31,119,180,1)","color":"rgba(31,119,180,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402],"y":[0,0,0,0,0,1,1,1,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,7,7,7,7,8,8,8,8,8,9,9,9,10,10,13,13,13,13,13,13,13,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,19,19,19,19,19,19,19,19,19,19,19,19,19,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,29,29,29,29,31,31,32,32,32,35,35,35,35,36,36,37,37,37,37,37,37,37,37,37,37,37,37,39,39,39,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,42,42,42,43,43,43,43,43,43,43,43,43,43,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,48,48,48,49,50,51,51,51,52,52,52,52,52,52,52,53,53,54,54,54,54,54,54,55,56,56,56,56,56,56,56,57,57,57,57,57,57,57,58,58,58,58,58,58,62,62,62,62,62,62,62,62,62,62,62,62,63,63,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,65,66,67,67,67,68,68,69,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,74,74,74,76,76,76,76,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,80,80,80,80,80,80,80,80,81,81,81,81,81,81],"type":"scatter","mode":"lines","name":"Ford","line":{"fillcolor":"rgba(255,127,14,1)","color":"rgba(255,127,14,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402],"y":[0,1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,4,4,4,4,4,4,5,5,5,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,10,10,10,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,20,20,20,20,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,31,31,33,33,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36,38,38,38,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,44,44,45,45,45,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,49,49,49,49,49,50,50,50,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55,59,59,59,59,61,61,61,61,61,61,61,62,62,63,64,64,64,64,64,64,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,66,66,66,68,68,68,68,68,68,68,68,68,68,69,69,69,69,70,70,70,70,70,70,70,71,71,71,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,74,75,75],"type":"scatter","mode":"lines","name":"Carter","line":{"fillcolor":"rgba(44,160,44,1)","color":"rgba(44,160,44,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402],"y":[0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,5,5,5,5,5,5,7,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,12,12,12,12,12,13,13,13,13,13,13,14,14,14,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,21,22,22,22,22,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,34,35,35,36,36,36,36,36,37,37,37,37,37,37,37,38,40,41,41,41,41,41,41,41,42,42,42,42,42,42,43,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,52,52,53,53,53,53,53,53,53,54,55,55,55,55,55,55,57,57,57,57,57,58,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,61,61,62,63],"type":"scatter","mode":"lines","name":"Reagan","line":{"fillcolor":"rgba(214,39,40,1)","color":"rgba(214,39,40,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402],"y":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,17,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,24,24,24,24,24,24,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,36,36,36,36,36,36,37],"type":"scatter","mode":"lines","name":"G.H.W. Bush","line":{"fillcolor":"rgba(148,103,189,1)","color":"rgba(148,103,189,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402],"y":[1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,15,15,15,15,15,15,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,29,29,30,30,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,41,41,41,41,41,41,42,42,42,42,42,42,43,43,44,44,45,45,45,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,49,49,49,49,49,49,50,50,51,51,51,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,55,55,55,55,56,56,56,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,59,59,60,60,60,60,60,60,60,60,60,63,63,63,63,63,63,63,63,65,65,65,65,65,65,65,65,66,66,66,66,67,67,67,67,67,67,67,68,68,68,68,68],"type":"scatter","mode":"lines","name":"Clinton","line":{"fillcolor":"rgba(140,86,75,1)","color":"rgba(140,86,75,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402],"y":[0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,15,15,15,15,16,16,16,16,16,16,17,17,17,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,20,20,21,21,21,21,21,21,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,28,28,29,29,30,30,30,30,30,30,31,32,32,32,33,33,33,33,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,39,40,40,40,40,40,40,40,41,41,41,41,41,41,41,42,42,42,42,42,42,50,50,51,51,51,51,51,51,51,51,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,58,58,58,58,58,58,59,60,60,60,60,60,60,60,60,60,60,60,60,60,61],"type":"scatter","mode":"lines","name":"G.W. Bush","line":{"fillcolor":"rgba(227,119,194,1)","color":"rgba(227,119,194,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402],"y":[0,2,5,5,5,5,5,5,5,5,9,9,9,9,9,9,12,14,14,14,14,14,14,14,14,14,14,14,14,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,24,24,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,35,35,35,35,35,36,36,36,36,36,36,36,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,43],"type":"scatter","mode":"lines","name":"Obama","line":{"fillcolor":"rgba(127,127,127,1)","color":"rgba(127,127,127,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402],"y":[1,1,1,1,2,4,4,5,6,6,7,7,7,7,8,8,8,8,8,8,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,19,20,20,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,25,25,25,25,26,28,29,31,33,33,33,33,33,34,34,34,34,34,34,34,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,41,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,48,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,50,50,50,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,52,52,54,54,55,55,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,57,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58],"type":"scatter","mode":"lines","name":"Trump","line":{"fillcolor":"rgba(188,189,34,1)","color":"rgba(188,189,34,1)"},"xaxis":"x","yaxis":"y","frame":null}],"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1}},"base_url":"https://plot.ly"},"evals":["config.modeBarButtonsToAdd.0.click"],"jsHooks":{"render":[{"code":"function(el, x) { var ctConfig = crosstalk.var('plotlyCrosstalkOpts').set({\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1}}); }","data":null}]}}</script>
<p>There is no real indication that Trump used a surge of Executive Orders to bolster his ‘wins’ at the end of his first year (in fact, the only president who looks even remotely like they have a first year surge is G.W. Bush and that happened in month 11, shortly after the 9/11 attacks). Rather, his cummulative usage at this point is decidedly average. Clinton and Carter both overtook him in terms of usage. Furthermore, G.W. Bush, Nixon and Reagan are all tightly grouped and in the same space.</p>
<p>So, while Trump came out of the gates using Executive Orders much like Obama did initially followed by a surge for his 100th day in office, Trump has tempered his usage of Executive Orders. Granted, he’s still ~50% higher than Obama at this relative point in the presidency, but that doesn’t mean he can’t be decidedly average.</p>
</div>
</div>
</content:encoded>
    </item>
    
    <item>
      <title>Safe, Multiple String Substitutions with mgsub::mgsub</title>
      <link>http://thug-r.life/post/2018-01-10-safe-multiple-string-substitutions/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://thug-r.life/post/2018-01-10-safe-multiple-string-substitutions/</guid>
      <description>String substitutionsNote - the package I wrote was originally inspired by a challenge a coworker tossed out. It also happened to provide a solution to this SO question which was really cool!
Substitutions in strings are best handled with regular expressions which are an amazingly powerful and flexible tool. Regular expressions are a way of expressing patterns in strings. In the example below I want to find the four letters, “dopa” and replace them with “meta”.</description>
      <content:encoded><div id="string-substitutions" class="section level2">
<h2>String substitutions</h2>
<p>Note - the package I wrote was originally inspired by a challenge a coworker tossed out. It also happened to provide a solution to <a href="https://stackoverflow.com/questions/48169135/str-replace-all-replacing-named-vector-elements-iteratively-not-all-at-once/48189012#48189012">this SO question</a> which was really cool!</p>
<p>Substitutions in strings are best handled with <em>regular expressions</em> which are an amazingly powerful and flexible tool. Regular expressions are a way of expressing patterns in strings. In the example below I want to find the four letters, “dopa” and replace them with “meta”. I accomplish this with the internal function <code>sub</code>.</p>
<pre class="r"><code>sub(&quot;dopa&quot;,&quot;meta&quot;,&quot;The chemical dopaziamine is fake, long live dopaziamine!&quot;)
## [1] &quot;The chemical metaziamine is fake, long live dopaziamine!&quot;</code></pre>
</div>
<div id="multiple-substitutions" class="section level2">
<h2>Multiple substitutions</h2>
<p>Sometimes you need to substitute many things, all at once.</p>
<div id="multiple-instances-of-the-same-pattern" class="section level3">
<h3>Multiple instances of the same pattern</h3>
<p>In the first example, only the first instance of “dopa” was replaced with “meta”. If the goal is to replace all of them, I can use the internal function <code>gsub</code> (the <em>g</em> stand for global!).</p>
<pre class="r"><code>gsub(&quot;dopa&quot;,&quot;meta&quot;,&quot;The chemical dopaziamine is fake, long live dopaziamine!&quot;)
## [1] &quot;The chemical metaziamine is fake, long live metaziamine!&quot;</code></pre>
<p>However, the internal regex functions aren’t vectorized, so I can’t have multiple patterns.</p>
<pre class="r"><code>gsub(c(&quot;dopa&quot;,&quot;fake&quot;),c(&quot;meta&quot;,&quot;real&quot;),&quot;The chemical dopaziamine is fake, long live dopaziamine!&quot;)
## Warning in gsub(c(&quot;dopa&quot;, &quot;fake&quot;), c(&quot;meta&quot;, &quot;real&quot;), &quot;The chemical
## dopaziamine is fake, long live dopaziamine!&quot;): argument &#39;pattern&#39; has
## length &gt; 1 and only the first element will be used
## Warning in gsub(c(&quot;dopa&quot;, &quot;fake&quot;), c(&quot;meta&quot;, &quot;real&quot;), &quot;The chemical
## dopaziamine is fake, long live dopaziamine!&quot;): argument &#39;replacement&#39; has
## length &gt; 1 and only the first element will be used
## [1] &quot;The chemical metaziamine is fake, long live metaziamine!&quot;</code></pre>
</div>
<div id="multiple-patterns" class="section level3">
<h3>Multiple patterns</h3>
<p>There are a few string substitution methods that handle multiple patterns.</p>
<div id="stringr" class="section level4">
<h4>stringr</h4>
<p>The function <code>str_replace_all</code> in the <code>stringr</code> package supports vectorized patterns and replacements. However, it applies each set individually giving <code>n</code> responses (where <code>n</code> is the longer length of the pattern or replacement vector). So, this doesn’t really work.</p>
<pre class="r"><code>stringr::str_replace_all(&quot;The chemical dopaziamine is fake, long live dopaziamine!&quot;
                         ,c(&quot;dopa&quot;,&quot;fake&quot;),c(&quot;meta&quot;,&quot;real&quot;))
## [1] &quot;The chemical metaziamine is fake, long live metaziamine!&quot;
## [2] &quot;The chemical dopaziamine is real, long live dopaziamine!&quot;</code></pre>
</div>
<div id="qdap" class="section level4">
<h4>qdap</h4>
<p>The function <code>mgsub</code> in the <code>qdap</code> package also supports vectorized patterns and replacements. It works by using placeholders and then iteratively applying internal regex functions.</p>
<pre class="r"><code>qdap::mgsub(c(&quot;dopa&quot;,&quot;fake&quot;),c(&quot;meta&quot;,&quot;real&quot;),&quot;The chemical dopaziamine is fake, long live dopaziamine!&quot;)
## [1] &quot;The chemical metaziamine is real, long live metaziamine!&quot;</code></pre>
</div>
<div id="chartr" class="section level4">
<h4>chartr</h4>
<p>There’s a special case which is mostly for transliteration, so it only works on single characters. <code>chartr</code>, an internal function, takes a string of old characters and a string of new characters and does simultaneous replacement, characterwise, on the string. This does not support regex or anything other than single characters, so it’s pretty limited.</p>
<pre class="r"><code>chartr(&quot;ho&quot;,&quot;oh&quot;,&quot;ho ho hoot&quot;)
## [1] &quot;oh oh ohht&quot;</code></pre>
</div>
</div>
<div id="problems-with-safety" class="section level3">
<h3>Problems with safety</h3>
<p>I noted that <code>qdap::mgsub</code> uses placeholders. This can actually cause a problem in certain cases where patterns are the same length. Consider the phrase “Hey, how are you?” where I want to shift each word to the left. So, “hey” shoudl be replaced by “how”, “how” by “are”, etc. Note, each pattern to match is 3 characters long. Note also that I pass in the <code>ignore.case=T</code> argument so my patterns won’t be bothered by capitalization.</p>
<pre class="r"><code>qdap::mgsub(c(&quot;hey&quot;,&quot;how&quot;,&quot;are&quot;,&quot;you&quot;),c(&quot;how&quot;,&quot;are&quot;,&quot;you&quot;,&quot;hey&quot;),&quot;Hey, how are you?&quot;
            ,fixed=F,ignore.case=T)
## [1] &quot;hey, hey hey hey?&quot;</code></pre>
<p>The placeholders became indistinguishable and so every word was replaced with the same word.</p>
</div>
<div id="a-safer-option" class="section level3">
<h3>A safer option</h3>
<p>I just published a <a href="https://github.com/bmewing/mgsub">github repo</a> which contains a new R package called <code>mgsub</code>. It is a safe alternative to <code>qdap::mgsub</code>, fully supporting regular expression matching and replacement in a way that guarantees safety. It also replaces with the longer match first, so sub-matches won’t mess things up.</p>
<p>Rather than passing in vectors (which could be recylced) of matches and replacements, I require named lists.</p>
<p>Finally, the code is pure R (for now) with no dependencies, so you won’t get a lot of bloat.</p>
<div id="installing-from-github" class="section level4">
<h4>Installing from github</h4>
<pre class="r"><code>devtools::install_github(&quot;bmewing/mgsub&quot;)</code></pre>
</div>
<div id="examples" class="section level4">
<h4>Examples</h4>
<p>First, the case that broke <code>qdap</code>.</p>
<pre class="r"><code>mgsub::mgsub(&quot;Hey, how are you?&quot;,list(&quot;hey&quot;=&quot;how&quot;,&quot;how&quot;=&quot;are&quot;,&quot;are&quot;=&quot;you&quot;,&quot;you&quot;=&quot;hey&quot;)
            ,ignore.case=T)
## [1] &quot;how, are you hey?&quot;</code></pre>
<p>We can also try a complex regular expression. Note we use regular expressions in the match and the replacement and it works exactly as expected. We only replaced “dopa” with “meta” with it’s a -mine group as opposed to a -ride group. Disclaimer - I know nothing about chemistry and stuff, so I don’t know if those are real.</p>
<pre class="r"><code>mgsub::mgsub(&quot;Dopazamine is not the same as Dopachloride and is still fake.&quot;,
             list(&quot;[Dd]opa(.*?mine)&quot;=&quot;Meta\\1&quot;,&quot;fake&quot;=&quot;real&quot;),
             ignore.case=F)
## [1] &quot;Metazamine is not the same as Dopachloride and is still real.&quot;</code></pre>
<p>We can see the substring protection here. Even though “the” is a substring of “they” and appears in the list first, “they” is given priority when it is also matched.</p>
<pre class="r"><code>mgsub::mgsub(&quot;They don&#39;t understand the value of what they seek.&quot;,
             list(&quot;the&quot;=&quot;a&quot;,&quot;they&quot;=&quot;we&quot;),ignore.case=T)
## [1] &quot;we don&#39;t understand a value of what we seek.&quot;</code></pre>
<p>You can also use it on single characters.</p>
<pre class="r"><code>mgsub::mgsub(&quot;ho ho hoot&quot;,list(&quot;h&quot;=&quot;o&quot;,&quot;o&quot;=&quot;h&quot;))
## [1] &quot;oh oh ohht&quot;</code></pre>
</div>
</div>
<div id="development-plans" class="section level3">
<h3>Development plans</h3>
<p>Once I write unit tests and get some error handling in place I will submit to CRAN. Then I’ll start working on getting the code into C++ to test the performance enhancements. Overall goal will be <em>low</em> overhead.</p>
</div>
</div>
</content:encoded>
    </item>
    
    <item>
      <title>How many random numbers does it take?</title>
      <link>http://thug-r.life/post/2017-10-30-how-many-random-numbers-does-it-take/</link>
      <pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://thug-r.life/post/2017-10-30-how-many-random-numbers-does-it-take/</guid>
      <description>Fermat and his libraryThis morning I woke up to a delightful tweet from fermatslibrary about sample random uniform numbers and how many it takes, on average, to sum to 1.
Pick a uniformly random number in [0,1] and repeat until the sum of the numbers picked is &amp;gt;1. You&#39;ll on average pick e≈2.718… numbers! pic.twitter.com/8ak1hYENCi— Fermat&#39;s Library (@fermatslibrary) October 28, 2017If you look at the embedded picture, you can see the math sketched out but of course it’s alwasy more fun to simulate.</description>
      <content:encoded><div id="fermat-and-his-library" class="section level2">
<h2>Fermat and his library</h2>
<p>This morning I woke up to a delightful tweet from fermatslibrary about sample random uniform numbers and how many it takes, on average, to sum to 1.</p>
<blockquote class="twitter-tweet" data-lang="en">
<p lang="en" dir="ltr">
Pick a uniformly random number in [0,1] and repeat until the sum of the numbers picked is &gt;1. You'll on average pick e≈2.718… numbers! <a href="https://t.co/8ak1hYENCi">pic.twitter.com/8ak1hYENCi</a>
</p>
— Fermat's Library (<span class="citation">@fermatslibrary</span>) <a href="https://twitter.com/fermatslibrary/status/924263998589145090?ref_src=twsrc%5Etfw">October 28, 2017</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>If you look at the embedded picture, you can see the math sketched out but of course it’s alwasy more fun to simulate.</p>
</div>
<div id="some-r-code" class="section level2">
<h2>Some R Code</h2>
<p>How can we generate a random uniform [0,1] number in R? There are many distributions built in and this one is included. Note, I’m setting a seed to ensure if you’re following along at home you will get the same answer. <code>runif</code> is the function which generates random values, by default <em>min</em> is 0 and <em>max</em> is 1 (just what we want).</p>
<pre class="r"><code>set.seed(1001)
runif(n = 1,min = 0,max = 1)
## [1] 0.9856888</code></pre>
<p>We can visually ‘verify’ the distribution we’re drawing from with a histogram. While it’s not totally flat, it’s fairly obvious that it’s uniformly sampling values between 0 and 1.</p>
<pre class="r"><code>hist(runif(10000), main = &quot;Histogram of 10,000 Random Uniform [0,1] Values&quot;,xlab=&quot;&quot;)</code></pre>
<p><img src="/post/2017-10-30-how-many-random-numbers-does-it-take_files/figure-html/unnamed-chunk-2-1.png" width="672" /></p>
<div id="how-many-are-needed" class="section level3">
<h3>How many are needed?</h3>
<p>To determine how many values are needed to sum to 1, we’ll use a <code>while</code> loop. This is a loop that will cycle until a logical condition is satisified. It’s like a <code>for</code> loop except it has the potential to be an infinite loop.</p>
<pre class="r"><code>summedValue = 0
steps = 0
while(summedValue &lt; 1){
  summedValue = summedValue + runif(1)
  steps = steps+1
}
cat(&quot;Total Summed Value:&quot;,summedValue,&quot;\n&quot;)
## Total Summed Value: 1.753755
cat(&quot;It took &quot;,steps,&quot; step&quot;,ifelse(steps==1,&quot;&quot;,&quot;s&quot;),&quot; to get there\n&quot;,sep=&quot;&quot;)
## It took 2 steps to get there</code></pre>
<p>This is great! We can see to total value, and how many values were drawn to get to 1. But now we need to do this lots of times.</p>
</div>
<div id="functional-programming" class="section level3">
<h3>Functional programming</h3>
<p>By wrapping our above code in a function we’ll be able to take advantage of functional programming. Note how the function is mostly a wrapper and all that’s changed is we replaced the <code>cat</code> steps with a <code>return</code> argument (what the function will return as a value).</p>
<pre class="r"><code>countUnif = function(){
  summedValue = 0
  steps = 0
  while(summedValue &lt; 1){
    summedValue = summedValue+runif(1)
    steps = steps+1
  }
  return(steps)
}

countUnif()
## [1] 3</code></pre>
<p>Now we can simulate this many, many times. The <code>replicate</code> function makes it very easy to generate 1,000,000 experiments.</p>
<pre class="r"><code>results = replicate(1000000,countUnif())
cat(&quot;Average values required from simulation:&quot;,mean(results),&quot;\n&quot;)
## Average values required from simulation: 2.717411
cat(&quot;Average values required from math      :&quot;,exp(1),&quot;\n&quot;)
## Average values required from math      : 2.718282</code></pre>
<p>Wow! That’s really close. But I’d really like to see how the value stabilizes over time. So, I’d like a cumulative average.</p>
<pre class="r"><code>cumulativeAverage = cumsum(results)/(1:1000000)</code></pre>
</div>
</div>
<div id="visualize" class="section level2">
<h2>Visualize!</h2>
<pre class="r"><code>plot(cumulativeAverage,type=&#39;l&#39;,main=&#39;Average Random Uniform [0,1] Values Needed to Sum to 1&#39;,ylab=&#39;Cumulative Average&#39;)
abline(h=exp(1),col=&#39;red&#39;)</code></pre>
<p><img src="/post/2017-10-30-how-many-random-numbers-does-it-take_files/figure-html/unnamed-chunk-7-1.png" width="672" /></p>
<p>Zoom and enhance! Here we can see that we’re not necessarily stabilizing,but the movement is all in a very small range.</p>
<pre class="r"><code>plot(cumulativeAverage,type=&#39;l&#39;,main=&#39;Average Random Uniform [0,1] Values Needed to Sum to 1&#39;,ylab=&#39;Cumulative Average&#39;,ylim=c(2.715,2.72))
abline(h=exp(1),col=&#39;red&#39;)</code></pre>
<p><img src="/post/2017-10-30-how-many-random-numbers-does-it-take_files/figure-html/unnamed-chunk-8-1.png" width="672" /></p>
</div>
<div id="conclusion" class="section level2">
<h2>Conclusion</h2>
<p>A fun and easy simluation to do in R, allowing functional programming practice, to demonstrate a neat math fundamental.</p>
</div>
</content:encoded>
    </item>
    
    <item>
      <title>The Value of Learning the Basics</title>
      <link>http://thug-r.life/post/2017-10-18-the-value-of-learning-the-basics/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://thug-r.life/post/2017-10-18-the-value-of-learning-the-basics/</guid>
      <description>Learning the hard wayAbout a month ago David Robinson made a tweet that I both agree and disagree with.
New blog post: “Don&#39;t teach students the hard way first” https://t.co/X2drh1tQe5 #rstats pic.twitter.com/GXAEpx5eET— David Robinson (@drob) September 21, 2017His example is simple enough - you’re going to a friends new house and are provided with directions involving a lot of back roads, twisting and turning. When you arrive you’re told to just take the highway back because it’s easier.</description>
      <content:encoded><div id="learning-the-hard-way" class="section level2">
<h2>Learning the hard way</h2>
<p>About a month ago David Robinson made a tweet that I both agree and disagree with.</p>
<blockquote class="twitter-tweet" data-partner="tweetdeck">
<p lang="en" dir="ltr">
New blog post: “Don't teach students the hard way first” <a href="https://t.co/X2drh1tQe5">https://t.co/X2drh1tQe5</a> <a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a> <a href="https://t.co/GXAEpx5eET">pic.twitter.com/GXAEpx5eET</a>
</p>
— David Robinson (<span class="citation">@drob</span>) <a href="https://twitter.com/drob/status/910869810178936832?ref_src=twsrc%5Etfw">September 21, 2017</a>
</blockquote>
<script async src="http://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>His example is simple enough - you’re going to a friends new house and are provided with directions involving a lot of back roads, twisting and turning. When you arrive you’re told to just take the highway back because it’s easier. “Why,” you exclaim, “did you give me such complex directions them?!” The host replies, “I just wanted to show you how much easier the highway is!”</p>
<p>This is a parable for how students are often taught base R and then later are introduced to packages like <code>dplyr</code>, <code>data.table</code> or <code>purrr</code>. David’s argument is that you lose the trust and attention of students when they are forced to do things the hard way only for the purpose of showing them how much easier it can be done. I agree that doing something hard to appreciate how easy something else is sucks. It can be useful for a moral lesson, but not helping people appreciate productivity. However, I disagree strongly with his blanket statement, <strong>“Don’t teach students the hard way first.”</strong></p>
<div id="the-directions-parable" class="section level3">
<h3>The directions parable</h3>
<p>It’s true, if you only visit a friend infrequently and when it’s convenient, you should only learn the highway. But, the homeowner or long-term resident of the home should know multiple routes and paths to get home. A few years ago I lived in a more rural town in Tennessee. It started snowing outside and my wife called and told me I should head home. Being from Alaska and loving winter, I disregarded her suggestions because it was only a few inches of snow, nothing I couldn’t handle. Of course, hell is other people and I discovered that the road to my house (which has many hills, twists and no shoulder) was blocked due to idiots. There are only two ways to get to my house and the other one was even more rural with even more hills and turns and fewer shoulders. I was able to extricate myself from the traffic jam, take the back road and arrive home just in time for the power to go out (and stay out for 2 days). Knowing the back-road to get home let me be with my family literally days earlier than many people in our neighborhood.</p>
<p>A casual R user, someone in a random discipline who brushes off their skills every few months, does not really need to know base R or even basic programming paradigms. They can be well served with a few canned examples they know how to manipulate and a stack of packages they learned. They probably don’t care about the difference between a <code>matrix</code>, <code>data.frame</code>, <code>data.table</code> or <code>tibble</code> as long as the get their results. And that’s fine. Someone who uses R day-in and day-out to analyze data? That won’t cut it. You need to <strong>master your craft</strong> and that involves learning to do things the hard way. You need to know the back roads to get home.</p>
</div>
</div>
<div id="why-the-hard-way-first" class="section level2">
<h2>Why the hard way first?</h2>
<p>My experience with education, both personal and having taught at university for a few years, is that the way people first learn something frames their mental framework of the whole problem set to match. I first learned to program in BASIC on a TI Calculator, complete with <code>GOTO</code> statements and then I did some web development in HTML for a while (in the 90’s and early 00’s, before CSS and HTML5). Next I learned R, but I learned it as a scripting language. The common theme here is everything I did was a script with sequential execution. It was years after I first learned R that I learned how to write functions and even longer after that before I realized the value. I repeated myself a lot. Why? Because mentally I struggled with the concept of functional programming - computer code executes sequentially. I have only started to grok object oriented programming. I led a team which included several people with traditional IT backgrounds. They had learned object oriented programming first and they struggled with learning R - especially the vectorization aspect. By learning the ‘easy’ way of programming first (scripting) I struggled to learn the (valuable) ‘hard’ way of functional (or object oriented) programming. How many lines of code did I write that could have been avoided? How inefficient was my code for so long? And what was the push to learn the ‘hard’ way? I could do all the analysis I wanted the ‘easy’ way - learning the ‘hard’ way was more expensive now because I would have to reduce my productivity during the learning period and then continue operating at a reduced productivity level while mastering the new mode of writing code. Even if it had been introduced in school, I would have questioned why I need to learn the ‘hard’ way when the ‘easy’ way works great. The only answer would have been that at some random time in the future, I would benefit from knowing it. And that’s not an inspirational answer for people who are already too busy.</p>
<p>Now, the argument here isn’t to teach scripting over functional programming. It’s essentially an argument to teach the tidyverse instead of base methods. Recently I’ve had a 180 flip on my opinion about aspects of the tidyverse (<code>dplyr</code> specifically) because the APIs will undergo too many breaking changes. I write code for a large company - we can’t afford to break code because Hadley decided to change how <code>group_by</code> should work. But that’s not really the point I want to make. If someone learns the ‘five verb’ approach to data munging they will think reframe everything they do around those verbs. Again, if that person is an infrequent user of R, that’s not a problem. But if they really need to master R because it will be their primary tool for analyzing data, they need to know how base R works to ensure they’re writing performant code.</p>
</div>
<div id="non-r-example" class="section level2">
<h2>Non R Example</h2>
<p>I have a GPS watch that I take hiking with me. It produces a .gpx file which is hard to work with. I want to convert it to a .csv file so I can analyze and visualize hikes in Shiny. Turns out there’s a Python package called <code>gpxpy</code> and I found a script online that read in .gpx files and output a .csv file. I’ve been running this script on my laptop for a year or so and decided I’d rather implement it as a AWS Lambda function that triggers off .gpx files uploaded to an S3 bucket. The script I had found online used <code>pandas</code> to convert a list of dictionaries to a data frame and write it to a csv file. Turns out, <code>pandas</code>+dependencies are too big for a lambda function. Because I understood what dictionaries are and how python iterates over lists I was able to remove the dependency on the ‘easy’ way and replace it with the ‘hard’ way which reduced my (zipped) Lambda package from 75MB to 1MB.</p>
</div>
<div id="conclusion" class="section level2">
<h2>Conclusion</h2>
<p>Don’t teach people the ‘hard’ way to make them appreciate how easy the ‘easy’ way is. Teach people the ‘hard’ way first to ensure they learn the fundamentals of how something works and then teach them the ‘easy’ way to enable higher productivity.</p>
</div>
</content:encoded>
    </item>
    
    <item>
      <title>Fun Math Problems</title>
      <link>http://thug-r.life/post/2017-10-02-fun-math-problems/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://thug-r.life/post/2017-10-02-fun-math-problems/</guid>
      <description>Meme Me Up, Scotty!Every now and then on Twitter or Facebook there’s a math problem posted which challenges users to get the right answer. They’re almost always based on order of operations and the reason most people get them wrong is because they don’t remember that elementary rule. It’s hard to blame most people since a lot of math that’s used day to day doesn’t require order of operations.</description>
      <content:encoded><div id="meme-me-up-scotty" class="section level2">
<h2>Meme Me Up, Scotty!</h2>
<p>Every now and then on Twitter or Facebook there’s a math problem posted which challenges users to get the right answer. They’re almost always based on order of operations and the reason most people get them wrong is because they don’t remember that elementary rule. It’s hard to blame most people since a lot of math that’s used day to day doesn’t require order of operations.</p>
</div>
<div id="the-trolling-post" class="section level2">
<h2>The trolling post</h2>
<blockquote class="twitter-tweet" data-partner="tweetdeck">
<p lang="en" dir="ltr">
You will either be really angry or lol <a href="https://t.co/yLECGwpXdQ">pic.twitter.com/yLECGwpXdQ</a>
</p>
— John May (<span class="citation">@3j0hn</span>) <a href="https://twitter.com/3j0hn/status/914212307642621952?ref_src=twsrc%5Etfw">September 30, 2017</a>
</blockquote>
<script async src="http://platform.twitter.com/widgets.js" charset="utf-8"></script>
<div id="response-1" class="section level3">
<h3>Response #1</h3>
<p>Of course it’s 5! How is this for math nerds only?</p>
</div>
<div id="response-2" class="section level3">
<h3>Response #2</h3>
<p>What kind of idiot posts something so clearly wrong? It’s 120!!</p>
</div>
<div id="response-3" class="section level3">
<h3>Response #3</h3>
<p>Are you just trolling?</p>
</div>
<div id="response-4" class="section level3">
<h3>Response #4</h3>
<p>LOLOLOLOLOL.</p>
<pre class="r"><code>230 - 220 * 1/2 == factorial(5) #5!
## [1] TRUE</code></pre>
<p>Sometimes, math is hidden in plain sight.</p>
</div>
</div>
</content:encoded>
    </item>
    
    <item>
      <title>Bucket List</title>
      <link>http://thug-r.life/post/2017-09-01-bucket-list/</link>
      <pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>http://thug-r.life/post/2017-09-01-bucket-list/</guid>
      <description>Bucket ListMost people end up having a list of things they’d like to do in their life before they ‘kick the bucket’. Often this is made up of big events - a foreign trip, some daredevil adventure. But sometimes that list is a bunch of little things.
RI’ve published a package on CRAN - readOffice - which was designed to enable the importing of text from modern Microsoft Word and PowerPoint files.</description>
      <content:encoded><div id="bucket-list" class="section level2">
<h2>Bucket List</h2>
<p>Most people end up having a list of things they’d like to do in their life before they ‘kick the bucket’. Often this is made up of big events - a foreign trip, some daredevil adventure. But sometimes that list is a bunch of little things.</p>
<div id="r" class="section level3">
<h3>R</h3>
<p>I’ve published a package on CRAN - <code>readOffice</code> - which was designed to enable the importing of text from modern Microsoft Word and PowerPoint files. This scratched off an item from my bucket list of ‘give back to open source’. But now I want to do more - I want to make a meaningful contribution to a package of substance that gets used a lot.</p>
</div>
<div id="analysis" class="section level3">
<h3>Analysis</h3>
<p>I really want to get into computer vision, especially as it relates to my hobby of painting miniatures. I’d like to try and build algorithms that can identify the manufacturer of miniatures and maybe even the model itself from pictures people upload.</p>
</div>
<div id="deep-learning" class="section level3">
<h3>Deep Learning</h3>
<p>I’d love to learn more about these feature transference neural networks which take characteristics of one image and apply them to another. I’d love to try and transfer a paint scheme of one miniature to an unpainted mini.</p>
</div>
<div id="c" class="section level3">
<h3>C++</h3>
<p>I want to learn more about C++ programming so I can be better equipped to take alogrithms implemented not-in-R and make them into R implementations.</p>
</div>
<div id="painting" class="section level3">
<h3>Painting</h3>
<p>I have a list of 100+ miniatures I want to paint.</p>
</div>
<div id="miniature-gaming" class="section level3">
<h3>Miniature Gaming</h3>
<p>I currently play Warmachine but there’s not a local scene for the game where I am. So I want to learn Malifaux and Warhammer 40k (also Age of Sigmar looks gorgeous, so that too!)</p>
</div>
<div id="backpacking" class="section level3">
<h3>Backpacking</h3>
<p>I’ve done a little bit of backpacking with my wife and I’d like to do more to get my son involved and do family trips.</p>
</div>
</div>
<div id="and-it-keeps-growing" class="section level2">
<h2>And it keeps growing</h2>
<p>I think the issue, at the end of the day, is FOMO. I have a strong fear of missing out on all the cool stuff people around me are doing. I’m fortunate to be surrounded by some really cool people who do very interesting things. I’m glad that I’m constantly getting reminded of what more I could be learning and doing. The people I’ve surrounded myself with, physically and digitally, are all people who are pushing to grow and develop themselves and as they break into new areas, it just highlights one more thing I could be doing.</p>
</div>
<div id="better-than-no-ambition" class="section level2">
<h2>Better than no ambition</h2>
<p>It’s frustrating sometimes, because the issue isn’t that I’m money limited, it’s that I’m time limited. There’s only so much time in any given day to be a dad, be a husband, be a friend and also learn a bunch of new stuff and also do my painting and still have time to play the games for which I’ve been painting. But I’d rather have this problem than to find myself among those who have no ambition and whittle their lives away doing things of little consequence or development.</p>
<p>The other challenge I face is feeling like I’m a fraud for doing what someone else has done. It turns out that the <code>officer</code> package supports the import of modern Microsoft Word and PowerPoint files - and it seems to do it better than my <code>readOffice</code> contribution. My pride turned to ash in my mouth - why had I bothered? Now I’m just cluttering up CRAN.</p>
<p>I look at the paint jobs that professional painters do on miniatures and then I look at mine and all I can see are my imperfections - why would I post it to Twitter? Who wants to look at my stuff when they could look at awesome stuff?</p>
</div>
<div id="dont-limit-yourself" class="section level2">
<h2>Don’t limit yourself</h2>
<p>I started this blog because I saw other people doing technical blogging and I wanted to contribute. A lot of what I’ll end up publishing has already been written or said by other people, maybe even better. It’s easy to convince yourself to not try because someone else is better. But sharing and contributing isn’t a competition (miniature gaming is), especially not in an open source community.</p>
<div class="figure">
<img src="/img/2017-09-01-content.jpg" />

</div>
<p>This comic <a href="https://twitter.com/fictionaIs/status/858211515882651648">from this tweet</a> is very motivational for me. Just because someone else has done something shouldn’t preclude you from doing it as well. I have never once googled for a solution and been upset to find lots of me-too posts. In fact, the way people learn can be very different and the way I’ve written something might be very helpful to someone.</p>
<p>So, as they say, ‘Never stop never stopping!’ and get out there and start crossing items off your bucket list while keeping the bucket overflowing.</p>
</div>
</content:encoded>
    </item>
    
    <item>
      <title>purrr Tricks with All Subset Regression</title>
      <link>http://thug-r.life/post/2017-08-24-purrr-tricks-with-all-subset-regression/</link>
      <pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://thug-r.life/post/2017-08-24-purrr-tricks-with-all-subset-regression/</guid>
      <description>All Subsets RegressionWhat is all subsets regression? It’s a technique for model building which involves taking a set of independent variables \(X_1..i\) and regressing them in sets of \(k\), where \(k\) is in \(\{1,2,\dots,i\}\), against the response variable \(Y\). The ‘all’ part of ‘all subsets’ means it’s every combination of \(X_{1..i}\) being drawn \(k\) at a time.
But…why?You’re probably familiar with forward, backward or stepwise model building where terms are added (or removed) from a model one at a time while attempting to maximize or minimize some ‘goodness’ criteria.</description>
      <content:encoded><div id="all-subsets-regression" class="section level2">
<h2>All Subsets Regression</h2>
<p>What is all subsets regression? It’s a technique for model building which involves taking a set of independent variables <span class="math inline">\(X_1..i\)</span> and regressing them in sets of <span class="math inline">\(k\)</span>, where <span class="math inline">\(k\)</span> is in <span class="math inline">\(\{1,2,\dots,i\}\)</span>, against the response variable <span class="math inline">\(Y\)</span>. The ‘all’ part of ‘all subsets’ means it’s every combination of <span class="math inline">\(X_{1..i}\)</span> being drawn <span class="math inline">\(k\)</span> at a time.</p>
<div id="butwhy" class="section level3">
<h3>But…why?</h3>
<p>You’re probably familiar with forward, backward or stepwise model building where terms are added (or removed) from a model one at a time while attempting to maximize or minimize some ‘goodness’ criteria. These are generally regarded as bad - so why all subsets? Really, it has all the faults of the other methods but it has at least one advantage - you can have more complex ‘goodness’ criteria which may hit local maxima/minima (interupting the previous methods) but allow you to find the global. So, it’s fishing to the max.</p>
</div>
<div id="leaps" class="section level3">
<h3>leaps</h3>
<p>R has a great package called <code>leaps</code> which implements all subsets regression. But…it doesn’t meet my needs.</p>
</div>
</div>
<div id="all-subsets-regression-and-missing-values" class="section level2">
<h2>All Subsets Regression and Missing Values</h2>
<p>Let’s consider a dataset which has missing values. I’ll generate a dummy set of data containing 4 independent variables and one dependent which depends on the first three variables. Then, I’ll randomly assign ~12% of the data to be missing.</p>
<pre class="r"><code>set.seed(1001)
X1 = c(-1,0,1)
df = expand.grid(X1=X1,X2=X1,X3=X1,X4=X1)
df$Y = df$X1+3*df$X2-0.5*df$X3+rnorm(81,0,1)
df$X1[sample(1:81,10,replace = FALSE)] = NA
df$X2[sample(1:81,10,replace = FALSE)] = NA
df$X3[sample(1:81,10,replace = FALSE)] = NA
df$X4[sample(1:81,10,replace = FALSE)] = NA</code></pre>
<p>We can verify that no rows are completely missing:</p>
<pre class="r"><code>any(apply(is.na(df[,1:4]),1,all))
## [1] FALSE
# Explanation
# df %&gt;% 
#   #only consider the first 4 columns
#   .[,1:4] %&gt;% 
#   #convert to a logical data frame checking for missing values
#   is.na() %&gt;% 
#   #this function applies another function row or column wise to the input dataframe or matrix
#   apply(
#     # 1 means rows
#     1, 
#     # Check if all the values are TRUE
#     all) %&gt;% 
#   # now we have a vector of logicals checking if the whole row of df was missing
#   # check if any are TRUE
#   any()</code></pre>
<p>And we can count that there are 50 complete rows (just 62% of the original data).</p>
<pre class="r"><code>sum(apply(!is.na(df[,1:4]),1,all))
## [1] 50
# Explanation
# df %&gt;% 
#   #only consider the first 4 columns
#   .[,1:4] %&gt;% 
#    #convert to a logical data frame checking for missing values
#   is.na() %&gt;%
#   #flip the logical values
#   `!` %&gt;% 
#   #this function applies another function row or column wise to the input dataframe or matrix
#   apply(
#     # 1 means rows
#     1,
#     # Check if all the values are TRUE
#     all
#   ) %&gt;% 
#   # now we have a vector of logicals checking if the whole row of df is present
#   # sum this up to get a count
#   sum()</code></pre>
<p>In linear regression observations cannot be included if they are missing because we don’t know what value they take. And sure, there’s missing value imputation - as always in statistics, if you’re willing to make assumptions whatever you’re doing becomes more statistically powerful, but also more real life fragile. With missing value imputation you have to make some assumptions about why they’re missing and then you have to generate the values themselves which requires another set of assumptions. It’s fine to not want to make those assumptions.</p>
<p>So despite the fact that we have 81 rows, we only have 50 rows for fitting a linear regression model which means if we fit the full model we’ll only have <span class="math inline">\(n-1-k=50-1-4=45\)</span> degrees of freedom.</p>
<pre class="r"><code>fullModel = lm(Y~X1+X2+X3+X4,data=df)
summary(fullModel)
## 
## Call:
## lm(formula = Y ~ X1 + X2 + X3 + X4, data = df)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -2.4627 -0.7666 -0.0156  0.6580  3.4490 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&gt;|t|)    
## (Intercept) -0.02660    0.18046  -0.147   0.8835    
## X1           0.98850    0.22582   4.377 7.07e-05 ***
## X2           2.96688    0.22758  13.036  &lt; 2e-16 ***
## X3          -0.53690    0.22246  -2.413   0.0199 *  
## X4           0.06567    0.21863   0.300   0.7653    
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 1.249 on 45 degrees of freedom
##   (31 observations deleted due to missingness)
## Multiple R-squared:  0.8074, Adjusted R-squared:  0.7902 
## F-statistic: 47.15 on 4 and 45 DF,  p-value: 1.547e-15</code></pre>
<p>You can see the DF agree with what we expect to see. Also, please ignore the fact that we’re getting results which are nearly perfect. It’s hard to generate dummy data that looks like real world data.</p>
<div id="first-subset" class="section level3">
<h3>First Subset</h3>
<p>The first subset is typically just the first indpendent variable we encounter, on it’s own, so X1 in our case, but we’ll start with X1+X2 (because it helps with comparing to leaps). We have 61 complete observations across X1 and X2.</p>
<pre class="r"><code>sum(apply(!is.na(df[,1:2]),1,all))
## [1] 61</code></pre>
<p>So when we fit the model we expect to have <span class="math inline">\(n-1-k=61-1-2=58\)</span> degrees of freedom.</p>
<pre class="r"><code>firstSubset = lm(Y~X1+X2,data=df)
summary(firstSubset)
## 
## Call:
## lm(formula = Y ~ X1 + X2, data = df)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -2.64333 -0.79388 -0.01199  0.74753  2.85868 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&gt;|t|)    
## (Intercept)  0.05194    0.16760   0.310    0.758    
## X1           0.87991    0.20895   4.211 8.96e-05 ***
## X2           2.88003    0.21237  13.561  &lt; 2e-16 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 1.304 on 58 degrees of freedom
##   (20 observations deleted due to missingness)
## Multiple R-squared:  0.7794, Adjusted R-squared:  0.7718 
## F-statistic: 102.5 on 2 and 58 DF,  p-value: &lt; 2.2e-16</code></pre>
<p>This is a pretty good model, and we nailed basic arithmetic! How does this model compare to what we would get if we used only the complete observations?</p>
<pre class="r"><code>firstSubset_limited = lm(Y~X1+X2,data=fullModel$model)
summary(firstSubset_limited)
## 
## Call:
## lm(formula = Y ~ X1 + X2, data = fullModel$model)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -2.4684 -0.8767 -0.0286  0.7977  3.0501 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&gt;|t|)    
## (Intercept) -0.09628    0.18551  -0.519 0.606175    
## X1           0.94976    0.23369   4.064 0.000182 ***
## X2           2.90673    0.23552  12.342 2.37e-16 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 1.301 on 47 degrees of freedom
## Multiple R-squared:  0.7819, Adjusted R-squared:  0.7726 
## F-statistic: 84.26 on 2 and 47 DF,  p-value: 2.869e-16</code></pre>
<p>It’s not very different, but the R^2 value is a little higher. Also the AIC and BIC are little better for the reduced data set.</p>
<pre class="r"><code>cat(&quot;All available observations AIC:    &quot;,AIC(firstSubset),&quot;\nJust the complete observations AIC:&quot;,AIC(firstSubset_limited),&quot;\n\nAll available observations BIC:    &quot;,BIC(firstSubset),&quot;\nJust the complete observations BIC:&quot;,BIC(firstSubset_limited))
## All available observations AIC:     210.4281 
## Just the complete observations AIC: 173.0897 
## 
## All available observations BIC:     218.8716 
## Just the complete observations BIC: 180.7378</code></pre>
</div>
<div id="leaps-1" class="section level3">
<h3>leaps</h3>
<p>So what does leaps produce? The <code>regsubsets</code> lets us specify a formula just like in lm and then it fits all subsets of the specified full model. The summary shows the best model for each set size <span class="math inline">\(k\)</span>. It selected X2 in the <span class="math inline">\(k=1\)</span> case, X1+X2 in the <span class="math inline">\(k=2\)</span> case, X1+X2+X3 in the <span class="math inline">\(k=3\)</span> and the full model for <span class="math inline">\(k=4\)</span>.</p>
<pre class="r"><code>library(leaps) #Version 3.0
leapsResults = leaps::regsubsets(Y~X1+X2+X3+X4,data=df)
summary(leapsResults)
## Subset selection object
## Call: regsubsets.formula(Y ~ X1 + X2 + X3 + X4, data = df)
## 4 Variables  (and intercept)
##    Forced in Forced out
## X1     FALSE      FALSE
## X2     FALSE      FALSE
## X3     FALSE      FALSE
## X4     FALSE      FALSE
## 1 subsets of each size up to 4
## Selection Algorithm: exhaustive
##          X1  X2  X3  X4 
## 1  ( 1 ) &quot; &quot; &quot;*&quot; &quot; &quot; &quot; &quot;
## 2  ( 1 ) &quot;*&quot; &quot;*&quot; &quot; &quot; &quot; &quot;
## 3  ( 1 ) &quot;*&quot; &quot;*&quot; &quot;*&quot; &quot; &quot;
## 4  ( 1 ) &quot;*&quot; &quot;*&quot; &quot;*&quot; &quot;*&quot;</code></pre>
<p>The summary object has a lot in it including BIC, <span class="math inline">\(R^2_{Adj}\)</span>, Mallows Cp and more. It’s important to note that <code>leaps</code> only retains information about the best models selected.</p>
<p>It looks like the way <code>stats::BIC</code> calculates BIC and the way <code>leaps</code> does don’t match up. That won’t be much use. But look at the second value of <span class="math inline">\(R^2_{Adj} = 0.7726\)</span> - that’s what we calculated when using only the complete observations across all variables.</p>
<pre class="r"><code>leapsSummary = summary(leapsResults)
leapsSummary$bic[2] #second value for the two term model
## [1] -64.40754
leapsSummary$adjr2[2]
## [1] 0.7726352</code></pre>
</div>
</div>
<div id="how-much-data-to-use" class="section level2">
<h2>How much data to use?</h2>
<p>Using only the complete observations in all subset regression is common across several platforms including R and JMP. But why? Is it more statistically valid to ignore data that could be part of the regression model? Or is it simply more computationally efficient? It seems to me that each model you fit should be fit using all data available to it - why should my results be different because I collected results on X3 and X4? I should get the exact same results when fitting the selected model as when doing my model building. So, how can we do all subsets regression using all the data available? And when do we get to purrr?</p>
</div>
<div id="new-functions" class="section level2">
<h2>New Functions</h2>
<p>Below I present 3 functions with a limited amount of safe programming tossed in.</p>
<div id="allsubsetsregression" class="section level3">
<h3>allSubsetsRegression</h3>
<p>The main function is <code>allSubsetsRegression</code> which is too long of a name. It accepts * a data frame which should contain only the independent variables to be included and the dependent variable * a quoted string for the column name in <code>data</code> which is the independent variable * optionally, minimum number of variables to include * optionally, maximum number of variables to include (useful if your data is wider than it is tall)</p>
<p>This makes a call to <code>calcKreg</code></p>
<pre class="r"><code>allSubsetsRegression = function(data,y,minV=1L,maxV){
  if(missing(maxV)) maxV = as.integer(ncol(data)-1)
  if(minV &gt; maxV) stop(&quot;Max number of variables must be bigger than the min number of variables&quot;)
  if(!is.integer(minV) | !is.integer(maxV)) stop(&quot;Min/Max variables must be integers&quot;)
  if(!is.data.frame(data)) stop(&quot;Data must be provided in a data frame&quot;)
  if(!is.character(y)) stop(&quot;Response variable &#39;y&#39; must be provided as a quoted string&quot;)
  xnames = names(data)[names(data) != y]
  output = lapply(minV:maxV,calcKreg,data=data,y=y,xnames=xnames)
  class(output) = c(class(output),&quot;subReg&quot;)
  return(output)
}</code></pre>
</div>
<div id="calckreg" class="section level3">
<h3>calcKreg</h3>
<p>The name looks like “calc Kreg” which sounds like a weird German thing but it’s actually “calc K reg” meaning “calculate the <span class="math inline">\(k^{th}\)</span> regression set”. This requires * the provided data * the quoted string of the dependent variable * the vector of quoted strings of the independent variables * k - how big the set is</p>
<p>This leverages the built in function <code>combn</code> which returns a matrix of all combinations of <span class="math inline">\(X_i\)</span> of size <span class="math inline">\(k\)</span>. This in turn calls the function <code>genReg</code>.</p>
<pre class="r"><code>calcKreg = function(data,y,xnames,k){
  runs = combn(xnames, k)
  models = lapply(1:ncol(runs), genReg, data=data, y=y, runs=runs)
  names(models) = apply(runs, 2, paste, collapse=&#39;+&#39;)
  return(models)
}</code></pre>
</div>
<div id="genreg" class="section level3">
<h3>genReg</h3>
<p><code>genReg</code> (“generate regression”) requires * the provided data * the quoted string of the dependent variable * the output of <code>combn</code> * the column being used this run</p>
<p>It generates a formula by pasting the needed independent variables together with “+” and then returns the full lm object.</p>
<pre class="r"><code>genReg = function(data,y,runs,i){
  x = runs[,i]
  form = paste0(y,&quot;~&quot;,paste(x,collapse=&quot;+&quot;))
  return(lm(form,data=data))
}</code></pre>
<div id="danger-will-robinson-danger" class="section level4">
<h4>DANGER, WILL ROBINSON! DANGER!</h4>
<p>I’m returning the <em>entire</em> lm object? Well, yeah. If you have stupid big data or stupid wide data, this won’t work well, but also, you probably aren’t really wanting to do linear regression. I’m just guessing. The advantage of returning the whole object is it will let me use whatever ‘goodness’ measure I after the fact - even use several, to determine which model I want to keep.</p>
</div>
</div>
</div>
<div id="purrr" class="section level2">
<h2>purrr</h2>
<p><code>purrr</code> is a package from the tidyverse that provides a set of tools to improve functional programming. It has consistent syntax versions of <code>map</code> and <code>reduce</code> type functions that make code more readable than the base versions in R. But you’ll notice I used <code>lapply</code> above instead of <code>purrr::map</code>. I’m used to using <code>lapply</code> and I don’t like loading a whole package for simple use cases like that. Where I do like using it is for more complex cases - like <code>at_depth</code></p>
<div id="at_depth" class="section level3">
<h3>at_depth</h3>
<p><code>lapply</code> takes an object and applies a function to each element of the object and returns it in a list. Consider a heirarchical list like the one below.</p>
<pre class="r"><code>dumbList = list(z=list(a=c(1,2), b=c(2,3)), y=list(a=c(1,1),b=c(1,4)), x=list(a=c(2,2),b=c(2,0)))</code></pre>
<p>Maybe I want to sum each element so that z<span class="math inline">\(a = 3, y\)</span>a = 2, x$a = 4, etc…</p>
<pre class="r"><code>lapply(dumbList,sum)
## Error in FUN(X[[i]], ...): invalid &#39;type&#39; (list) of argument</code></pre>
<p>It doesn’t work because <code>dumbList[[1]]</code> is a list and you can’t sum a list. However, with <code>purrr::at_depth</code> we can specify the depth we want to work at - in this case, the second level. Operate on the lists inside of lists.</p>
<pre class="r"><code>library(purrr) #version 0.2.2
purrr::at_depth(dumbList,2,sum)
## $z
## $z$a
## [1] 3
## 
## $z$b
## [1] 5
## 
## 
## $y
## $y$a
## [1] 2
## 
## $y$b
## [1] 5
## 
## 
## $x
## $x$a
## [1] 4
## 
## $x$b
## [1] 2</code></pre>
<p>This is equivalent to the following code which requires an anonymous function to work.</p>
<pre class="r"><code>lapply(dumbList,function(x){
  lapply(x,sum)
})</code></pre>
<p>How does this relate to <code>allSubsetsRegression</code>? Let’s look at the results of running it.</p>
</div>
<div id="results-of-allsubetsregression" class="section level3">
<h3>Results of allSubetsRegression</h3>
<p>The function returns a hierarchical list - the top level has <span class="math inline">\(k\)</span> elements and the second level has <span class="math inline">\(i\)</span> choose <span class="math inline">\(k\)</span> elements.</p>
<pre class="r"><code>res = allSubsetsRegression(df,&quot;Y&quot;)
length(res) #4 because we had 4 independent variables
## [1] 4
lapply(res,length) # 4, 6, 4, 1 because there are 4 ways to select 1 variable from a group of 4, 6 ways to select 2, 4 ways to select 3 and 1 way to select 4
## [[1]]
## [1] 4
## 
## [[2]]
## [1] 6
## 
## [[3]]
## [1] 4
## 
## [[4]]
## [1] 1</code></pre>
<p>This allows me to easily index into any specific model via <code>res[[k]][[&quot;terms&quot;]]</code> and inspect that model. Want to see <code>X1+X2+X3</code>?</p>
<pre class="r"><code>res[[3]][[&quot;X1+X2+X3&quot;]]
## 
## Call:
## lm(formula = form, data = data)
## 
## Coefficients:
## (Intercept)           X1           X2           X3  
##     0.03424      0.97513      2.99673     -0.63855</code></pre>
<p>Now I want to calculate goodness statistics on each of these so I can determine the best models.</p>
</div>
<div id="reggoodness" class="section level3">
<h3>regGoodness</h3>
<p><code>regGoodness</code> (regression goodness) operates on the hierarchical list produced by <code>allSubsetsRegression</code>, applying a function which produces a ‘goodness’ score and then sorts by if that goodness score should be minimzed or maximized. It does this by using <code>purrr::at_depth</code> to allow a clean hierarchical output when generating the models, but ease of computing summary statistics afterward. <strong>note</strong> this does leverage the <code>stringr</code> package.</p>
<pre class="r"><code>library(stringr) #version 1.2.0

regGoodness = function(models,f,direction){
  if(!(direction %in% c(&quot;&gt;&quot;,&quot;&lt;&quot;))) stop(&quot;Invalid direction - must be &lt; or &gt;&quot;)
  if(!is.function(f)) stop(&quot;f must be a function&quot;)
  if(!(&quot;subReg&quot; %in% class(models))) stop(&quot;models must be generated by allSubsetsRegression&quot;)
  score = unlist(purrr::at_depth(models,2,f))
  output = data.frame(N = stringr::str_count(names(score),&quot;\\+&quot;)+1,Terms = names(score),Value = score,stringsAsFactors = FALSE)
  rownames(output) = NULL
  if(direction == &quot;&lt;&quot;){
    return(output[order(output$Value),])
  } else {
    return(output[order(output$Value,decreasing = T),])
  }
}</code></pre>
<p>For example, we could get the <span class="math inline">\(R^2_{Adj}\)</span> for each model by using this function.</p>
<pre class="r"><code>asrAR2 = function(model){
  summary(model)$adj.r.squared
}</code></pre>
<p>We pass it into the function thusly and get out a data.frame with summary details about each model fit.</p>
<pre class="r"><code>ar2 = regGoodness(res,asrAR2,&quot;&gt;&quot;)
ar2
##    N       Terms        Value
## 11 3    X1+X2+X3  0.804526215
## 15 4 X1+X2+X3+X4  0.790234207
## 5  2       X1+X2  0.771840082
## 12 3    X1+X2+X4  0.768256130
## 8  2       X2+X3  0.747873190
## 14 3    X2+X3+X4  0.727369827
## 2  1          X2  0.723193708
## 9  2       X2+X4  0.709493147
## 6  2       X1+X3  0.094866148
## 1  1          X1  0.055237747
## 7  2       X1+X4  0.048400898
## 13 3    X1+X3+X4  0.042796504
## 3  1          X3  0.003718353
## 4  1          X4 -0.013302437
## 10 2       X3+X4 -0.028144430</code></pre>
</div>
<div id="coefficient-stability" class="section level3">
<h3>Coefficient Stability</h3>
<p>We can also analyze how stable our coefficient estimates are as we vary what is in or out of the model. First we need to extract the coefficients from each model, then mutate the vector so it becomes a named data frame. The <code>dplyr::bind_rows</code> function is great because, like a “UNION ALL” query in SQL, keeps all the column names as it binds data frames together like new rows.</p>
<pre class="r"><code>library(dplyr) #version 0.5.0
coefs = purrr::at_depth(res,2,coefficients) %&gt;% 
  purrr::at_depth(2,function(x){as.data.frame(t(as.matrix(x)))}) %&gt;% 
  purrr::reduce(bind_rows) %&gt;% 
  mutate(Terms = ar2$Terms)
coefs
##     (Intercept)        X1       X2         X3          X4       Terms
## 1   0.150404089 0.8892705       NA         NA          NA    X1+X2+X3
## 2   0.031631652        NA 2.962518         NA          NA X1+X2+X3+X4
## 3   0.001309230        NA       NA -0.4622766          NA       X1+X2
## 4   0.017983923        NA       NA         NA  0.11390661    X1+X2+X4
## 5   0.051936938 0.8799054 2.880028         NA          NA       X2+X3
## 6   0.095013433 1.1728420       NA -0.4231423          NA    X2+X3+X4
## 7   0.047982016 0.9208031       NA         NA  0.16213820          X2
## 8   0.003984185        NA 3.093045 -0.6135762          NA       X2+X4
## 9   0.013940875        NA 2.881377         NA  0.02489288       X1+X3
## 10  0.060029856        NA       NA -0.2083143  0.11762346          X1
## 11  0.034239325 0.9751328 2.996726 -0.6385541          NA       X1+X4
## 12 -0.021320977 0.9166835 2.816281         NA  0.09154406    X1+X3+X4
## 13  0.079566784 1.0442746       NA -0.1011008  0.15250775          X3
## 14 -0.024519496        NA 2.986471 -0.5301225 -0.01590184          X4
## 15 -0.026595776 0.9885010 2.966883 -0.5368965  0.06566652       X3+X4</code></pre>
</div>
</div>
<div id="conclusion" class="section level2">
<h2>Conclusion</h2>
<p>All subsets regression presents many challenges, theoretical and practical. I was able to easily write some functional code which produced a hierarchical list. The structure is nice for exploring the results but presents hurdles when trying to analyze it with functional programming. <code>purrr::at_depth</code> allows for easy functional programming on hierarchical lists without the need for anonymous functions or other cumbersome overhead.</p>
</div>
</content:encoded>
    </item>
    
    <item>
      <title>Automatic Twitter Updates</title>
      <link>http://thug-r.life/post/2017-08-12-automatic-twitter-updates/</link>
      <pubDate>Sat, 12 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://thug-r.life/post/2017-08-12-automatic-twitter-updates/</guid>
      <description>Automatic Twitter UpdatesOne of my goals with this site is to have as much as possible to automatic. Because it’s a static site, each time I write a post I have to copy all the files (new and updated) to the hosting location so you, the illustrious reader, can enjoy the content I create. Then, I need to promote it. This involves the laborious process of switching to my pinned Chrome tab with Twitter open and writing a tweet remember to paste in a link.</description>
      <content:encoded><div id="automatic-twitter-updates" class="section level1">
<h1>Automatic Twitter Updates</h1>
<p>One of my goals with this site is to have as much as possible to automatic. Because it’s a static site, each time I write a post I have to copy all the files (new and updated) to the hosting location so you, the illustrious reader, can enjoy the content I create. Then, I need to promote it. This involves the laborious process of switching to my pinned Chrome tab with Twitter open and writing a tweet remember to paste in a link. I’d like to make it easier for me, so I turned to AWS Lambda.</p>
<div id="aws-lambda" class="section level2">
<h2>AWS Lambda</h2>
<p>Maybe you’re not familiar with the serverless magic that is AWS Lambda - if so, I’m sorry. It will change your life. Unless you only know R, then you’ll mostly just be frustrated.</p>
<p>One of the big points of the ‘cloud’ or IASS (Infrastructure as a Service) is the ability to scale (up or down) on demand - if you just partition an EC2 server on AWS and never spin up/down, you’re probably wasting money. And by probably I mean, almost certainly. Many Fortune 500 companies claim they’re saving money by switching to the cloud but this is often because they have big renewals coming up with their bare metal providers (maybe EMC storage contract is coming up) and so they get to trade infrequent-but-massive capital costs with frequent-but-smaller expense costs. Classic business internal shell games. If you’re a startup or a tech company that deals with highly flexible demand, IASS makes a ton of sense - did you just land a big client? Spin up more servers! Did you just lose a big client or they’ve been with you long enough you don’t care about their performance? Spin some servers down! If you’re writing a little blog, use S3 because you only pay for exactly what you’re storing/using and nothing more keeping your costs at pennies!</p>
<p>So how does AWS Lambda fit into all this? And what do you mean by serverless?</p>
<div id="serverless" class="section level3">
<h3>Serverless</h3>
<p>Serverless is a bit of a misnomer because lambda (I’m going to stop saying AWS Lambda all the time) <em>does</em> run on a server. But, you don’t have to partition the server. Or configure it. Or spin it down. Lambda handles all that. It’s brilliant!</p>
</div>
<div id="lambda-for-scale" class="section level3">
<h3>Lambda for Scale</h3>
<p>With lambda you write a function that does a small block of work in one of the (few) supportedl languages. These are (as of now):</p>
<ul>
<li>Python (2/3)</li>
<li>Node.js (4/6)</li>
<li>Java 8</li>
<li>C#</li>
</ul>
<p>Then, you create a trigger for the lambda code to run. Examples include:</p>
<ul>
<li>Call from an API Gateway</li>
<li>File being uploaded to S3</li>
<li>AWS IoT button being pushed</li>
<li>Alexa Skill</li>
</ul>
<p>The trigger will cause AWS to spin up a container, load your function (and any additional components you included), execute your function and then spin down the container. You, as the developer, only pay by the millisecond that your code is <em>actually running</em> and you can, by default, have 100 of these running simultaneously without you having to manage or own a single server. Again - you only pay when they’re running so you can have an API which gets used once a month and only pay for the 2 seconds it runs but have 100% availability. This is <strong>incredible</strong>.</p>
</div>
</div>
<div id="auto-tweeting" class="section level2">
<h2>Auto Tweeting</h2>
<p>There are lots of options for hosting a static website (including GitHub), so why choose AWS S3 which costs pennies a month? The main reason is the ability to integrate with lambda. I just finished writing a module in Python 2.7 using the <code>tweepy</code> library that is trigger each time I upload new posts to my S3 bucket which tweets out the title and the link. The Python code is pretty simple.</p>
<pre class="python"><code>from __future__ import print_function

import json
import urllib
import boto3
import datetime
import tweepy
from titlecase import titlecase

now = datetime.datetime.now()

s3 = boto3.client(&#39;s3&#39;)


def lambda_handler(event, context):
    key = urllib.unquote_plus(event[&#39;Records&#39;][0][&#39;s3&#39;][&#39;object&#39;][&#39;key&#39;].encode(&#39;utf8&#39;))
    postDate = key[5:15]
    today = str(now.strftime(&quot;%Y-%m-%d&quot;))
    if postDate == today:
        auth = tweepy.OAuthHandler(&#39;XXXX&#39;,&#39;XXXX&#39;)
        auth.set_access_token(&#39;XXXX&#39;,&#39;XXXX&#39;)
        api = tweepy.API(auth)
        postTitle = titlecase(key[16:][:-4].replace(&#39;-&#39;,&#39; &#39;))
        url = &#39;http://thug-r.life/&#39;+key[:-4]+&#39;/&#39;
        
        post = &#39;I just wrote a post called &quot;&#39;+postTitle+&#39;&quot; at &#39;+url
        print(post)
        api.update_status(post)
    else:
        print(&#39;Old post - ignore!&#39;)</code></pre>
<p>I’m not going to go into how to get it all setup - I plan to write a tutorial on how I did everything with this blog in September so I can have at least the full first month costs.</p>
</div>
<div id="conclusion" class="section level2">
<h2>Conclusion</h2>
<p>AWS Lambda is pretty cool and you should learn about it. By using S3 to host this site, I can integrate with lambda to get extra automation around promoting my site.</p>
</div>
</div>
</content:encoded>
    </item>
    
    <item>
      <title>Legislate by Executive Order</title>
      <link>http://thug-r.life/post/2017-08-10-legislate-by-executive-order/</link>
      <pubDate>Thu, 10 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://thug-r.life/post/2017-08-10-legislate-by-executive-order/</guid>
      <description>Executive Orders in the USAFrom Wikipedia:
Executive orders are orders issued by United States Presidents and directed towards officers and agencies of the U.S. federal government. Executive orders have the full force of law, based on the authority derived from statute or the Constitution itself. The ability to make such orders is also based on express or implied Acts of Congress that delegate to the President some degree of discretionary power (delegated legislation).</description>
      <content:encoded><script src="/rmarkdown-libs/htmlwidgets/htmlwidgets.js"></script>
<script src="/rmarkdown-libs/plotly-binding/plotly.js"></script>
<script src="/rmarkdown-libs/typedarray/typedarray.min.js"></script>
<script src="/rmarkdown-libs/jquery/jquery.min.js"></script>
<link href="/rmarkdown-libs/crosstalk/css/crosstalk.css" rel="stylesheet" />
<script src="/rmarkdown-libs/crosstalk/js/crosstalk.min.js"></script>
<link href="/rmarkdown-libs/plotlyjs/plotly-htmlwidgets.css" rel="stylesheet" />
<script src="/rmarkdown-libs/plotlyjs/plotly-latest.min.js"></script>


<div id="executive-orders-in-the-usa" class="section level1">
<h1>Executive Orders in the USA</h1>
<p>From Wikipedia:</p>
<blockquote>
<p>Executive orders are orders issued by United States Presidents and directed towards officers and agencies of the U.S. federal government. Executive orders have the full force of law, based on the authority derived from statute or the Constitution itself. The ability to make such orders is also based on express or implied Acts of Congress that delegate to the President some degree of discretionary power (delegated legislation).</p>
<p>Like both legislative statutes and regulations promulgated by government agencies, executive orders are subject to judicial review and may be overturned if the orders lack support by statute or the Constitution. Major policy initiatives require approval by the legislative branch, but executive orders have significant influence over the internal affairs of government, deciding how and to what degree legislation will be enforced, dealing with emergencies, waging wars, and in general fine-tuning policy choices in the implementation of broad statutes.</p>
</blockquote>
<p>Executive Orders are a way for a President to enact certain policies without having to go through the tedious process of writing bills <a href="https://www.bing.com/videos/search?q=youtube+how+a+bill+becomes+a+law&amp;view=detail&amp;mid=129019FC2CC536DD451C129019FC2CC536DD451C&amp;FORM=VIRE">and making them laws</a>. For the party in power they are a great way of getting stuff done. In 2014, Obama <a href="http://washington.cbslocal.com/2014/01/14/obama-on-executive-actions-ive-got-a-pen-and-ive-got-a-phone/">said</a> “We’re not just going to be waiting for legislation. … I’ve got a pen and I’ve got a phone. And I can use that pen to sign executive orders and take executive actions and administrative actions that move the ball forward.”. However, the opposition party usually gets pretty upset and decries their use. In 2016, Marc Thiessen, former speechwriter for George W. Bush, <a href="https://www.washingtonpost.com/opinions/the-fall-of-the-house-of-obama-is-coming-and-its-his-own-fault/2016/11/14/d0151cac-aa7d-11e6-977a-1030f822fc35_story.html?utm_term=.5e5d2fdcdf18">called Obama’s use of executive rders</a> “unlawful” and said they “[twist] the meaning of the law”.</p>
<p>Donald Trump, the current President of the USA had the following to say about Obama’s use of exeutive orders (from <a href="http://www.cnn.com/2017/04/27/politics/trump-executive-orders/index.html">CNN</a>):</p>
<blockquote>
<p>“I don’t think he even tries anymore,” Trump said of President Barack Obama in December 2015. “I think he just signs executive actions.” A month later, as contests in Iowa and New Hampshire loomed, Trump said Obama’s executive orders show he “doesn’t talk to anybody.” “You know, it’s supposed to be negotiated,” Trump told CNN in January 2016. “You’re supposed to cajole, get people in a room, you have Republicans, Democrats, you’re supposed to get together and pass a law. (Obama) doesn’t want to do that because it’s too much work. So he doesn’t want to work too hard. He wants to go back and play golf.”</p>
</blockquote>
<p>All this made me ask - how have presidents actually used Executive Orders? There are several ways to measure this:</p>
<ul>
<li>Analyze the content of the orders</li>
<li>Analyze when/how many orders</li>
<li>Analyze how efficacious the orders are</li>
</ul>
<p>The first one could be done with some text mining (maybe later). The third one would be very difficult. For example, Trump has signed 4 different orders trying to accomplish his purported “Muslim Ban” - if he is eventually successful though the courts of enacting the ban, which are considered to have accomplished their intended result? All four? Just the last one? So, I’m taking the easy route and analyzing counts of signed orders over time.</p>
<div id="needed-r-libraries" class="section level2">
<h2>Needed R Libraries</h2>
<p>I use 7 packages in this analysis. Versions and purpose listed below.</p>
<table>
<thead>
<tr class="header">
<th>Package</th>
<th>Version</th>
<th>Purpose</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>httr</td>
<td>1.2.1</td>
<td>Access online APIs</td>
</tr>
<tr class="even">
<td>jsonlite</td>
<td>1.3</td>
<td>Process JSON from APIs</td>
</tr>
<tr class="odd">
<td>purrr</td>
<td>0.2.2</td>
<td>Improves functional programming</td>
</tr>
<tr class="even">
<td>magrittr</td>
<td>1.5</td>
<td>Pipes make everything better</td>
</tr>
<tr class="odd">
<td>dplyr</td>
<td>0.5.0</td>
<td>Data munging</td>
</tr>
<tr class="even">
<td>readr</td>
<td>1.0.0</td>
<td>Load CSV files</td>
</tr>
<tr class="odd">
<td>lubridate</td>
<td>1.6.0</td>
<td>Helps with managing dates</td>
</tr>
<tr class="even">
<td>plotly</td>
<td>4.5.6</td>
<td>Make beautiful, interactive visualizations</td>
</tr>
</tbody>
</table>
<pre class="r"><code>library(httr)
library(jsonlite)
library(purrr)
library(magrittr)
library(dplyr)
library(readr)
library(lubridate)
library(plotly)</code></pre>
</div>
<div id="the-data" class="section level2">
<h2>The Data</h2>
<p>The Federal Register is where all executive orders are recorded and stored. Luckily, they make a lot of their data easily available.</p>
<div id="post-1994" class="section level3">
<h3>Post-1994</h3>
<p>The Federal Register makes <a href="https://www.federalregister.gov/executive-orders">all orders since 1994</a> (Bill Clinton) available through an API.</p>
<pre class="r"><code>getPresident = function(url){
  httr::GET(url) %&gt;% 
    httr::content(as=&quot;text&quot;) %&gt;% 
    jsonlite::fromJSON() %&gt;% 
    `$`(&quot;results&quot;)
}
trump = getPresident(&quot;https://www.federalregister.gov/documents/search.json?conditions%5Bcorrection%5D=0&amp;conditions%5Bpresident%5D=donald-trump&amp;conditions%5Bpresidential_document_type_id%5D=2&amp;conditions%5Btype%5D=PRESDOCU&amp;fields%5B%5D=citation&amp;fields%5B%5D=document_number&amp;fields%5B%5D=end_page&amp;fields%5B%5D=executive_order_notes&amp;fields%5B%5D=executive_order_number&amp;fields%5B%5D=html_url&amp;fields%5B%5D=pdf_url&amp;fields%5B%5D=publication_date&amp;fields%5B%5D=signing_date&amp;fields%5B%5D=start_page&amp;fields%5B%5D=title&amp;fields%5B%5D=full_text_xml_url&amp;fields%5B%5D=body_html_url&amp;fields%5B%5D=json_url&amp;order=executive_order_number&amp;per_page=1000&quot;)
head(trump)</code></pre>
<pre><code>##     citation document_number end_page executive_order_notes
## 1 82 FR 8351      2017-01799     8352                    NA
## 2 82 FR 8657      2017-02029     8658                    NA
## 3 82 FR 8793      2017-02095     8797                    NA
## 4 82 FR 8799      2017-02102     8803                    NA
## 5 82 FR 8977      2017-02281     8982                    NA
## 6 82 FR 9333      2017-02450     9338                    NA
##   executive_order_number
## 1                  13765
## 2                  13766
## 3                  13767
## 4                  13768
## 5                  13769
## 6                  13770
##                                                                                                                                                          html_url
## 1 https://www.federalregister.gov/documents/2017/01/24/2017-01799/minimizing-the-economic-burden-of-the-patient-protection-and-affordable-care-act-pending-repeal
## 2        https://www.federalregister.gov/documents/2017/01/30/2017-02029/expediting-environmental-reviews-and-approvals-for-high-priority-infrastructure-projects
## 3                                        https://www.federalregister.gov/documents/2017/01/30/2017-02095/border-security-and-immigration-enforcement-improvements
## 4                                    https://www.federalregister.gov/documents/2017/01/30/2017-02102/enhancing-public-safety-in-the-interior-of-the-united-states
## 5                       https://www.federalregister.gov/documents/2017/02/01/2017-02281/protecting-the-nation-from-foreign-terrorist-entry-into-the-united-states
## 6                                               https://www.federalregister.gov/documents/2017/02/03/2017-02450/ethics-commitments-by-executive-branch-appointees
##                                                          pdf_url
## 1 https://www.gpo.gov/fdsys/pkg/FR-2017-01-24/pdf/2017-01799.pdf
## 2 https://www.gpo.gov/fdsys/pkg/FR-2017-01-30/pdf/2017-02029.pdf
## 3 https://www.gpo.gov/fdsys/pkg/FR-2017-01-30/pdf/2017-02095.pdf
## 4 https://www.gpo.gov/fdsys/pkg/FR-2017-01-30/pdf/2017-02102.pdf
## 5 https://www.gpo.gov/fdsys/pkg/FR-2017-02-01/pdf/2017-02281.pdf
## 6 https://www.gpo.gov/fdsys/pkg/FR-2017-02-03/pdf/2017-02450.pdf
##   publication_date signing_date start_page
## 1       2017-01-24   2017-01-20       8351
## 2       2017-01-30   2017-01-24       8657
## 3       2017-01-30   2017-01-25       8793
## 4       2017-01-30   2017-01-25       8799
## 5       2017-02-01   2017-01-27       8977
## 6       2017-02-03   2017-01-28       9333
##                                                                                             title
## 1 Minimizing the Economic Burden of the Patient Protection and Affordable Care Act Pending Repeal
## 2        Expediting Environmental Reviews and Approvals for High Priority Infrastructure Projects
## 3                                        Border Security and Immigration Enforcement Improvements
## 4                                    Enhancing Public Safety in the Interior of the United States
## 5                       Protecting the Nation From Foreign Terrorist Entry Into the United States
## 6                                               Ethics Commitments by Executive Branch Appointees
##                                                                   full_text_xml_url
## 1 https://www.federalregister.gov/documents/full_text/xml/2017/01/24/2017-01799.xml
## 2 https://www.federalregister.gov/documents/full_text/xml/2017/01/30/2017-02029.xml
## 3 https://www.federalregister.gov/documents/full_text/xml/2017/01/30/2017-02095.xml
## 4 https://www.federalregister.gov/documents/full_text/xml/2017/01/30/2017-02102.xml
## 5 https://www.federalregister.gov/documents/full_text/xml/2017/02/01/2017-02281.xml
## 6 https://www.federalregister.gov/documents/full_text/xml/2017/02/03/2017-02450.xml
##                                                                         body_html_url
## 1 https://www.federalregister.gov/documents/full_text/html/2017/01/24/2017-01799.html
## 2 https://www.federalregister.gov/documents/full_text/html/2017/01/30/2017-02029.html
## 3 https://www.federalregister.gov/documents/full_text/html/2017/01/30/2017-02095.html
## 4 https://www.federalregister.gov/documents/full_text/html/2017/01/30/2017-02102.html
## 5 https://www.federalregister.gov/documents/full_text/html/2017/02/01/2017-02281.html
## 6 https://www.federalregister.gov/documents/full_text/html/2017/02/03/2017-02450.html
##                                                           json_url
## 1 https://www.federalregister.gov/api/v1/documents/2017-01799.json
## 2 https://www.federalregister.gov/api/v1/documents/2017-02029.json
## 3 https://www.federalregister.gov/api/v1/documents/2017-02095.json
## 4 https://www.federalregister.gov/api/v1/documents/2017-02102.json
## 5 https://www.federalregister.gov/api/v1/documents/2017-02281.json
## 6 https://www.federalregister.gov/api/v1/documents/2017-02450.json</code></pre>
<p>What do we get from this?</p>
<table style="width:100%;">
<colgroup>
<col width="7%" />
<col width="92%" />
</colgroup>
<thead>
<tr class="header">
<th>Field</th>
<th>Content</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>citation</td>
<td>Document Citation (reference)</td>
</tr>
<tr class="even">
<td>document_number</td>
<td>Document Number (reference)</td>
</tr>
<tr class="odd">
<td>end_page</td>
<td>The final page (used for citations) in the published register</td>
</tr>
<tr class="even">
<td>executive_order_notes</td>
<td>Notes, if any, attached to the order</td>
</tr>
<tr class="odd">
<td>executive_order_number</td>
<td>UID of Executive Orders</td>
</tr>
<tr class="even">
<td>html_url</td>
<td>URL to view the order online</td>
</tr>
<tr class="odd">
<td>pdf_url</td>
<td>URL to view a PDF copy of the order</td>
</tr>
<tr class="even">
<td>publication_date</td>
<td>Date the Register published the Order</td>
</tr>
<tr class="odd">
<td>signing_date</td>
<td>Date the order was signed by the president</td>
</tr>
<tr class="even">
<td>start_page</td>
<td>The first page (used for citations) in the published register</td>
</tr>
<tr class="odd">
<td>title</td>
<td>Title of the Order</td>
</tr>
<tr class="even">
<td>full_text_xml_url</td>
<td>Machine readable version of the orders text</td>
</tr>
<tr class="odd">
<td>body_html_url</td>
<td>A basic HTML version of the orders text</td>
</tr>
<tr class="even">
<td>json_url</td>
<td>JSON encoded header information (similar to what we have already)</td>
</tr>
</tbody>
</table>
<p>We can three other presidents this way</p>
<pre class="r"><code>obama = getPresident(&quot;https://www.federalregister.gov/documents/search.json?conditions%5Bcorrection%5D=0&amp;conditions%5Bpresident%5D=barack-obama&amp;conditions%5Bpresidential_document_type_id%5D=2&amp;conditions%5Btype%5D=PRESDOCU&amp;fields%5B%5D=citation&amp;fields%5B%5D=document_number&amp;fields%5B%5D=end_page&amp;fields%5B%5D=executive_order_notes&amp;fields%5B%5D=executive_order_number&amp;fields%5B%5D=html_url&amp;fields%5B%5D=pdf_url&amp;fields%5B%5D=publication_date&amp;fields%5B%5D=signing_date&amp;fields%5B%5D=start_page&amp;fields%5B%5D=title&amp;fields%5B%5D=full_text_xml_url&amp;fields%5B%5D=body_html_url&amp;fields%5B%5D=json_url&amp;order=executive_order_number&amp;per_page=1000&quot;)

gw_bush = getPresident(&quot;https://www.federalregister.gov/documents/search.json?conditions%5Bcorrection%5D=0&amp;conditions%5Bpresident%5D=george-w-bush&amp;conditions%5Bpresidential_document_type_id%5D=2&amp;conditions%5Btype%5D=PRESDOCU&amp;fields%5B%5D=citation&amp;fields%5B%5D=document_number&amp;fields%5B%5D=end_page&amp;fields%5B%5D=executive_order_notes&amp;fields%5B%5D=executive_order_number&amp;fields%5B%5D=html_url&amp;fields%5B%5D=pdf_url&amp;fields%5B%5D=publication_date&amp;fields%5B%5D=signing_date&amp;fields%5B%5D=start_page&amp;fields%5B%5D=title&amp;fields%5B%5D=full_text_xml_url&amp;fields%5B%5D=body_html_url&amp;fields%5B%5D=json_url&amp;order=executive_order_number&amp;per_page=1000&quot;)

clinton = getPresident(&quot;https://www.federalregister.gov/documents/search.json?conditions%5Bcorrection%5D=0&amp;conditions%5Bpresident%5D=william-j-clinton&amp;conditions%5Bpresidential_document_type_id%5D=2&amp;conditions%5Btype%5D=PRESDOCU&amp;fields%5B%5D=citation&amp;fields%5B%5D=document_number&amp;fields%5B%5D=end_page&amp;fields%5B%5D=executive_order_notes&amp;fields%5B%5D=executive_order_number&amp;fields%5B%5D=html_url&amp;fields%5B%5D=pdf_url&amp;fields%5B%5D=publication_date&amp;fields%5B%5D=signing_date&amp;fields%5B%5D=start_page&amp;fields%5B%5D=title&amp;fields%5B%5D=full_text_xml_url&amp;fields%5B%5D=body_html_url&amp;fields%5B%5D=json_url&amp;order=executive_order_number&amp;per_page=1000&quot;)</code></pre>
</div>
<div id="pre-1994" class="section level3">
<h3>Pre-1994</h3>
Sadly, before 1994 the information isn’t really machine readable. It is <a href="https://www.archives.gov/federal-register/executive-orders/disposition">available online</a> but the way it’s setup doesn’t contribute to machine readability. Why not? Each year of each president can actually be formatted differently and none of the pre-1994 dispositions use modern HTML structures (e.g.
<div>
<p>tags) to markup the pages. So, I manually copied and pasted and did regex matching in Sublime Text to generate basic .csv files to use for a few additional presidents. I also needed to get Clinton’s first year as president and bind that up.</p>
<pre class="r"><code>pre94clinton = read_csv(&quot;https://raw.githubusercontent.com/bmewing/legislate-by-order/master/data/pre94_clinton.csv&quot;) %&gt;% select(executive_order_number=id,everything())
clinton %&lt;&gt;% 
  mutate(signing_date = lubridate::as_date(signing_date)) %&gt;% 
  bind_rows(pre94clinton)
nixon = read_csv(&quot;https://raw.githubusercontent.com/bmewing/legislate-by-order/master/data/nixon.csv&quot;)
ford = read_csv(&quot;https://raw.githubusercontent.com/bmewing/legislate-by-order/master/data/ford.csv&quot;)
carter = read_csv(&quot;https://raw.githubusercontent.com/bmewing/legislate-by-order/master/data/carter.csv&quot;)
reagan = read_csv(&quot;https://raw.githubusercontent.com/bmewing/legislate-by-order/master/data/reagan.csv&quot;)
ghw_bush = read_csv(&quot;https://raw.githubusercontent.com/bmewing/legislate-by-order/master/data/george%20h%20w%20bush.csv&quot;)</code></pre>
</div>
<div id="data-issues" class="section level3">
<h3>Data Issues</h3>
<p>There’s a time lag between when orders are signed and when orders are published. It’s important to know this because when we look at this today (August 10, 2017) we won’t see orders published in the last couple days. So, we’ll look at the current president and how long it’s taken the register, on average, to publish his orders.</p>
<pre class="r"><code>timeToPublish = difftime(lubridate::as_date(trump$publication_date),lubridate::as_date(trump$signing_date),unit=&quot;days&quot;) %&gt;% 
  as.numeric() %&gt;% 
  median()
print(sprintf(&quot;%d days, on average&quot;,timeToPublish))</code></pre>
<pre><code>## [1] &quot;5 days, on average&quot;</code></pre>
<p>Now we can adjust ‘when’ we’re looking at the analysis to reflect this typical delta. What I mean is, Trump today has been in office 201 days but we’ll only consider him to have been in office for 196 as far as looking at his use of Executive Orders.</p>
<pre class="r"><code>trumpDaysInOffice = difftime(Sys.Date(),lubridate::as_date(&quot;2017-01-20&quot;),units=&quot;days&quot;) %&gt;% 
  as.numeric() %&gt;% 
  `-`(timeToPublish)</code></pre>
</div>
</div>
<div id="data-munging" class="section level2">
<h2>Data Munging</h2>
<p>Now we need to create two new columns for each president.</p>
<ul>
<li>How many days they’ve been in office as of the signing date</li>
<li>How many orders they’ve signed to date</li>
</ul>
<pre class="r"><code>processPresident = function(president,inaugurationDate){
  s = get(president,envir = globalenv()) %&gt;% 
    dplyr::mutate(start_date = lubridate::as_date(inaugurationDate),
         signing_date = lubridate::as_date(signing_date)) %&gt;% 
    dplyr::mutate(daysInOffice = difftime(signing_date,start_date,units=&quot;days&quot;)) %&gt;% 
    dplyr::group_by(daysInOffice) %&gt;% 
    dplyr::summarise(orders = n())
  names(s) = c(&quot;daysInOffice&quot;,paste0(president,&quot;Orders&quot;))
  return(s)
}

presidents = c(&quot;nixon&quot;,&quot;ford&quot;,&quot;carter&quot;,&quot;reagan&quot;,&quot;ghw_bush&quot;,&quot;clinton&quot;,&quot;gw_bush&quot;,&quot;obama&quot;,&quot;trump&quot;)
inauguartionDates = c(&quot;1969-01-20&quot;,&quot;1974-08-09&quot;,&quot;1977-01-20&quot;,&quot;1981-01-20&quot;,&quot;1989-01-20&quot;,&quot;1993-01-20&quot;,&quot;2001-01-20&quot;,&quot;2009-01-20&quot;,&quot;2017-01-20&quot;)
munged = purrr::map2(presidents,inauguartionDates,processPresident)

allDaysInOffice = data_frame(daysInOffice = seq(0,8*365.25,1))

orders = purrr::reduce(munged,dplyr::left_join,by=&quot;daysInOffice&quot;,.init=allDaysInOffice)</code></pre>
<pre><code>## Warning: Column `daysInOffice` has different attributes on LHS and RHS of
## join

## Warning: Column `daysInOffice` has different attributes on LHS and RHS of
## join

## Warning: Column `daysInOffice` has different attributes on LHS and RHS of
## join

## Warning: Column `daysInOffice` has different attributes on LHS and RHS of
## join

## Warning: Column `daysInOffice` has different attributes on LHS and RHS of
## join

## Warning: Column `daysInOffice` has different attributes on LHS and RHS of
## join

## Warning: Column `daysInOffice` has different attributes on LHS and RHS of
## join

## Warning: Column `daysInOffice` has different attributes on LHS and RHS of
## join

## Warning: Column `daysInOffice` has different attributes on LHS and RHS of
## join</code></pre>
<pre class="r"><code>orders[is.na(orders)] = 0

for(i in 2:ncol(orders)){
  orders[[i]] = cumsum(orders[[i]])
}</code></pre>
</div>
<div id="data-visualization" class="section level2">
<h2>Data Visualization</h2>
<p>With the data now calculated, it’s time to make the plot. We’ll be plotting lines showing the total to date number of executive orders signed by each president. Using plotly we can create a visualization that enables interactivity (zooming, hovering, etc.) very easily. We’ll add one line per president so we can format the name correctly.</p>
<pre class="r"><code>orders %&gt;% 
  plot_ly(x = ~daysInOffice) %&gt;% 
  add_lines(y = ~nixonOrders,name=&quot;Nixon&quot;) %&gt;% 
  add_lines(y = ~fordOrders,name=&quot;Ford&quot;) %&gt;% 
  add_lines(y = ~carterOrders,name=&quot;Carter&quot;) %&gt;% 
  add_lines(y = ~reaganOrders,name=&quot;Reagan&quot;) %&gt;% 
  add_lines(y = ~ghw_bushOrders,name=&quot;G.H.W. Bush&quot;) %&gt;% 
  add_lines(y = ~clintonOrders,name=&quot;Clinton&quot;) %&gt;% 
  add_lines(y = ~gw_bushOrders,name=&quot;G.W. Bush&quot;) %&gt;% 
  add_lines(y = ~obamaOrders,name=&quot;Obama&quot;) %&gt;% 
  add_lines(y = ~trumpOrders,name=&quot;Trump&quot;) %&gt;% 
  layout(shapes=list(type=&#39;line&#39;, x0= trumpDaysInOffice, x1= trumpDaysInOffice, y0=0, y1=400, line=list(dash=&#39;dot&#39;, width=1)),
         xaxis = list(title=&quot;Days in Office&quot;),
         yaxis = list(title=&quot;# of Executive Orders Signed&quot;),
         title = &#39;How have presidents used Executive Orders over the course of their terms?&#39;)</code></pre>
<div id="20784f2f2935" style="width:672px;height:480px;" class="plotly html-widget"></div>
<script type="application/json" data-for="20784f2f2935">{"x":{"visdat":{"207852ee1457":["function () ","plotlyVisDat"]},"cur_data":"207852ee1457","attrs":{"207852ee1457":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Nixon"},"207852ee1457.1":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Ford"},"207852ee1457.2":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Carter"},"207852ee1457.3":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Reagan"},"207852ee1457.4":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"G.H.W. Bush"},"207852ee1457.5":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Clinton"},"207852ee1457.6":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"G.W. Bush"},"207852ee1457.7":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Obama"},"207852ee1457.8":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Trump"}},"layout":{"margin":{"b":40,"l":60,"t":25,"r":10},"shapes":[{"type":"line","x0":250,"x1":250,"y0":0,"y1":400,"line":{"dash":"dot","width":1}}],"xaxis":{"domain":[0,1],"title":"Days in Office"},"yaxis":{"domain":[0,1],"title":"# of Executive Orders Signed"},"title":"How have presidents used Executive Orders over the course of their terms?","hovermode":"closest","showlegend":true},"source":"A","config":{"modeBarButtonsToAdd":[{"name":"Collaborate","icon":{"width":1000,"ascent":500,"descent":-50,"path":"M487 375c7-10 9-23 5-36l-79-259c-3-12-11-23-22-31-11-8-22-12-35-12l-263 0c-15 0-29 5-43 15-13 10-23 23-28 37-5 13-5 25-1 37 0 0 0 3 1 7 1 5 1 8 1 11 0 2 0 4-1 6 0 3-1 5-1 6 1 2 2 4 3 6 1 2 2 4 4 6 2 3 4 5 5 7 5 7 9 16 13 26 4 10 7 19 9 26 0 2 0 5 0 9-1 4-1 6 0 8 0 2 2 5 4 8 3 3 5 5 5 7 4 6 8 15 12 26 4 11 7 19 7 26 1 1 0 4 0 9-1 4-1 7 0 8 1 2 3 5 6 8 4 4 6 6 6 7 4 5 8 13 13 24 4 11 7 20 7 28 1 1 0 4 0 7-1 3-1 6-1 7 0 2 1 4 3 6 1 1 3 4 5 6 2 3 3 5 5 6 1 2 3 5 4 9 2 3 3 7 5 10 1 3 2 6 4 10 2 4 4 7 6 9 2 3 4 5 7 7 3 2 7 3 11 3 3 0 8 0 13-1l0-1c7 2 12 2 14 2l218 0c14 0 25-5 32-16 8-10 10-23 6-37l-79-259c-7-22-13-37-20-43-7-7-19-10-37-10l-248 0c-5 0-9-2-11-5-2-3-2-7 0-12 4-13 18-20 41-20l264 0c5 0 10 2 16 5 5 3 8 6 10 11l85 282c2 5 2 10 2 17 7-3 13-7 17-13z m-304 0c-1-3-1-5 0-7 1-1 3-2 6-2l174 0c2 0 4 1 7 2 2 2 4 4 5 7l6 18c0 3 0 5-1 7-1 1-3 2-6 2l-173 0c-3 0-5-1-8-2-2-2-4-4-4-7z m-24-73c-1-3-1-5 0-7 2-2 3-2 6-2l174 0c2 0 5 0 7 2 3 2 4 4 5 7l6 18c1 2 0 5-1 6-1 2-3 3-5 3l-174 0c-3 0-5-1-7-3-3-1-4-4-5-6z"},"click":"function(gd) { \n        // is this being viewed in RStudio?\n        if (location.search == '?viewer_pane=1') {\n          alert('To learn about plotly for collaboration, visit:\\n https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html');\n        } else {\n          window.open('https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html', '_blank');\n        }\n      }"}],"cloud":false},"data":[{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922],"y":[0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,11,11,11,11,12,12,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,19,19,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,29,30,30,30,30,30,30,30,30,30,30,30,30,31,32,32,32,32,32,32,33,33,34,34,35,35,35,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,39,40,41,41,41,41,41,41,41,41,41,41,41,41,41,41,43,43,43,43,43,44,44,44,45,45,45,45,45,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,48,49,49,49,49,49,49,49,49,49,49,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,54,55,55,56,56,56,56,56,56,57,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,59,61,61,61,61,62,62,63,63,63,63,63,63,63,63,64,64,64,64,64,64,66,67,67,67,68,68,69,70,70,70,70,70,70,70,70,70,70,70,71,71,71,72,72,72,72,72,72,74,74,74,74,74,74,74,75,76,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,80,80,80,80,80,80,80,81,81,83,83,83,83,83,83,83,83,84,85,85,85,86,86,86,86,86,86,86,86,86,86,86,86,86,87,88,90,91,91,91,91,91,92,93,95,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,98,98,99,99,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,101,101,102,102,102,103,103,103,103,104,104,105,105,105,105,105,105,106,106,106,106,106,106,106,106,108,108,108,108,108,109,109,111,112,112,112,112,112,112,112,112,112,112,113,113,113,113,113,113,113,114,114,114,114,114,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,117,117,117,117,117,117,117,117,119,119,119,119,119,119,119,119,119,119,119,119,119,119,120,120,121,121,121,121,121,121,121,121,121,121,121,122,122,123,123,123,123,123,123,123,123,124,124,124,124,124,124,124,124,126,126,126,126,126,127,127,127,127,127,127,128,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,131,131,131,131,131,131,131,131,131,131,131,131,131,132,132,132,132,132,132,132,133,134,134,134,134,134,134,135,135,135,135,135,136,136,136,136,136,136,136,136,136,136,136,136,136,136,137,137,137,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,140,140,140,140,140,140,140,140,140,140,140,140,140,141,141,141,141,141,141,141,142,142,142,142,143,143,143,143,143,143,143,143,143,144,144,144,144,144,144,144,144,144,144,145,145,145,145,145,145,146,146,146,146,146,147,148,148,148,148,148,148,148,148,148,148,148,148,151,152,152,154,154,154,154,154,154,154,154,155,155,155,155,155,155,155,155,155,157,157,157,159,159,159,159,161,161,161,161,161,161,161,162,162,162,163,163,163,163,163,163,163,163,163,163,164,164,164,164,164,164,164,164,164,164,164,165,165,165,165,165,165,165,166,166,166,166,166,166,166,166,167,167,167,167,167,167,167,167,167,167,167,167,168,168,168,169,169,169,169,169,169,169,169,169,170,171,171,171,171,171,171,171,173,175,175,176,176,176,177,177,177,177,177,177,177,177,178,178,178,178,179,179,179,179,179,179,179,179,179,179,180,180,180,180,180,180,180,180,180,180,180,180,180,181,181,181,181,181,181,181,181,181,181,181,182,182,182,183,183,183,184,184,184,184,184,184,184,184,185,185,185,185,185,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,189,189,190,190,190,190,191,191,191,191,191,191,191,195,195,196,196,196,196,196,196,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,200,200,200,200,200,201,202,202,202,202,203,205,205,205,205,205,205,205,205,208,209,210,210,210,210,210,211,211,213,213,213,213,213,213,213,213,213,213,214,215,215,215,215,215,215,215,215,216,216,217,217,217,217,217,217,217,217,217,217,217,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,220,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,224,225,225,225,225,225,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,227,227,227,228,228,230,230,230,230,230,230,230,230,232,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,234,234,234,234,234,234,234,234,234,234,234,234,235,235,235,235,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,237,237,237,237,238,238,238,238,238,238,238,238,238,239,241,241,241,241,241,241,241,241,241,241,241,242,242,242,242,242,242,242,243,243,243,243,243,243,243,243,243,244,244,244,244,244,244,246,246,247,247,247,248,249,250,251,251,251,251,251,251,251,251,251,251,251,251,251,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,254,254,255,255,255,255,256,256,256,256,256,256,256,256,256,256,256,257,257,257,257,258,258,258,258,258,258,258,258,259,259,259,259,259,259,259,259,259,260,260,260,260,260,261,261,261,262,262,262,264,264,265,265,265,265,265,265,265,265,265,265,265,265,265,266,266,266,266,266,267,267,267,269,269,269,269,269,269,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,271,271,271,271,272,272,272,272,272,272,272,272,272,272,272,272,273,273,274,274,275,275,275,275,275,275,275,276,276,276,276,276,276,278,278,278,278,278,278,279,279,279,279,279,280,280,280,280,280,280,280,283,283,283,283,284,284,284,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,286,286,286,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,289,289,289,289,289,289,289,289,289,289,289,289,290,290,290,290,290,290,290,290,292,293,293,293,293,293,293,293,293,294,294,294,294,294,294,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,297,297,297,297,297,297,298,298,298,299,299,300,300,301,301,301,302,302,302,302,302,302,303,303,303,304,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,308,308,312,312,312,312,314,314,314,314,314,314,314,314,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,316,317,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,320,320,320,322,322,322,322,322,324,324,325,325,325,325,325,325,325,325,325,325,325,325,325,325,325,327,327,327,327,327,327,327,328,328,328,329,329,329,329,329,329,329,329,329,330,330,330,330,330,331,331,331,331,331,331,331,331,331,331,331,331,331,331,331,332,332,332,332,332,332,332,332,332,333,333,333,333,333,334,334,334,335,335,335,335,336,336,336,336,336,336,336,337,337,337,337,337,337,337,341,341,341,341,341,341,341,341,341,341,341,341,341,341,341,342,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,345,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346],"type":"scatter","mode":"lines","name":"Nixon","line":{"fillcolor":"rgba(31,119,180,1)","color":"rgba(31,119,180,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922],"y":[0,0,0,0,0,1,1,1,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,7,7,7,7,8,8,8,8,8,9,9,9,10,10,13,13,13,13,13,13,13,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,19,19,19,19,19,19,19,19,19,19,19,19,19,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,29,29,29,29,31,31,32,32,32,35,35,35,35,36,36,37,37,37,37,37,37,37,37,37,37,37,37,39,39,39,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,42,42,42,43,43,43,43,43,43,43,43,43,43,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,48,48,48,49,50,51,51,51,52,52,52,52,52,52,52,53,53,54,54,54,54,54,54,55,56,56,56,56,56,56,56,57,57,57,57,57,57,57,58,58,58,58,58,58,62,62,62,62,62,62,62,62,62,62,62,62,63,63,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,65,66,67,67,67,68,68,69,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,74,74,74,76,76,76,76,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,83,84,84,84,86,87,87,87,87,87,87,87,87,88,88,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,96,96,96,97,97,98,98,98,98,98,98,98,98,100,101,101,101,101,101,101,101,101,103,103,103,103,103,103,103,103,104,104,104,106,106,106,106,107,107,107,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,109,109,109,109,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,112,112,112,112,112,115,115,115,115,115,115,115,115,115,115,115,115,115,116,116,117,117,117,117,117,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,120,120,120,120,121,121,121,121,121,121,121,121,122,123,124,124,124,124,124,125,126,126,126,126,126,126,126,126,126,126,126,126,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,129,129,129,130,130,130,130,132,132,132,132,133,133,133,133,134,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,136,136,136,136,136,137,137,137,138,138,138,138,138,138,139,139,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,141,143,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,145,145,145,149,149,149,149,149,149,149,149,149,149,149,149,149,149,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,151,151,151,151,152,152,152,152,152,152,154,157,157,157,158,158,158,160,160,160,160,160,162,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169],"type":"scatter","mode":"lines","name":"Ford","line":{"fillcolor":"rgba(255,127,14,1)","color":"rgba(255,127,14,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922],"y":[0,1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,4,4,4,4,4,4,5,5,5,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,10,10,10,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,20,20,20,20,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,31,31,33,33,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36,38,38,38,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,44,44,45,45,45,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,49,49,49,49,49,50,50,50,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55,59,59,59,59,61,61,61,61,61,61,61,62,62,63,64,64,64,64,64,64,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,66,66,66,68,68,68,68,68,68,68,68,68,68,69,69,69,69,70,70,70,70,70,70,70,71,71,71,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,74,75,75,75,75,75,75,75,75,75,76,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,78,78,78,78,83,83,83,83,83,83,83,83,84,84,84,86,86,86,86,86,86,86,87,87,87,87,87,87,87,88,88,88,88,88,88,89,90,90,90,90,90,90,90,90,90,90,91,91,91,93,93,93,93,94,94,94,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,96,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,99,100,104,104,104,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,109,109,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,112,112,112,112,112,115,116,116,116,116,116,116,116,116,118,119,119,119,119,119,119,119,120,120,121,121,121,121,121,121,122,122,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,124,128,130,130,130,130,130,130,131,131,131,131,131,131,132,132,132,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,137,138,138,138,138,139,139,139,139,139,139,139,139,139,144,144,144,144,144,146,146,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,152,152,152,152,152,152,152,152,154,154,154,154,154,154,154,154,154,154,154,154,157,157,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,159,159,159,159,159,159,159,159,159,159,159,159,159,159,160,160,161,161,161,161,162,163,163,163,163,163,163,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,165,165,165,165,166,169,169,169,169,169,169,170,171,171,172,172,172,172,172,173,173,173,173,173,173,174,174,174,174,174,174,174,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,176,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,180,181,183,183,183,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,186,186,186,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,188,188,188,188,188,188,190,190,190,190,191,191,191,191,192,192,193,193,193,193,193,193,194,194,196,198,198,198,198,198,198,198,198,198,198,199,199,199,199,199,199,199,199,199,199,200,200,200,200,201,202,202,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,204,204,204,204,204,205,205,205,205,205,205,205,206,206,206,207,208,208,208,208,208,208,208,210,210,210,212,215,215,215,216,216,217,219,219,219,219,220,220,220,220,220,220,220,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222,222,222,222,222,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,225,225,225,225,225,225,225,225,225,225,225,227,227,227,227,227,227,227,227,227,228,229,229,229,229,230,230,230,230,230,230,230,230,231,231,231,231,231,231,231,234,234,235,235,235,235,236,236,236,236,236,236,236,236,237,238,238,238,238,238,238,238,238,238,238,238,240,240,240,240,240,241,241,241,242,244,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,251,253,253,253,253,253,253,253,253,255,256,256,257,258,258,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,261,261,262,262,262,262,262,263,264,264,264,264,264,265,265,265,265,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,267,267,271,271,271,271,271,271,271,271,271,272,272,272,272,272,272,272,272,272,273,273,273,273,273,274,274,274,275,276,276,276,278,278,278,279,279,279,279,280,280,280,280,280,281,282,282,282,282,282,282,282,282,282,283,283,283,283,283,283,283,283,284,284,284,284,284,284,284,284,284,284,284,284,284,285,285,285,285,285,285,285,285,285,286,286,287,287,287,287,287,287,287,288,288,289,289,289,289,289,289,289,289,289,289,290,290,290,291,291,291,291,291,291,291,291,291,291,291,291,291,294,294,294,294,294,295,295,296,297,297,297,297,297,297,297,305,309,309,309,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320],"type":"scatter","mode":"lines","name":"Carter","line":{"fillcolor":"rgba(44,160,44,1)","color":"rgba(44,160,44,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922],"y":[0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,5,5,5,5,5,5,7,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,12,12,12,12,12,13,13,13,13,13,13,14,14,14,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,21,22,22,22,22,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,34,35,35,36,36,36,36,36,37,37,37,37,37,37,37,38,40,41,41,41,41,41,41,41,42,42,42,42,42,42,43,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,52,52,53,53,53,53,53,53,53,54,55,55,55,55,55,55,57,57,57,57,57,58,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,61,61,62,63,63,63,63,63,63,63,63,63,63,63,65,65,65,65,65,65,65,65,66,66,66,66,66,66,67,67,67,67,67,67,67,68,68,69,70,70,70,70,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,74,74,74,74,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,77,77,77,79,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,83,83,83,83,83,83,83,83,84,84,84,84,85,85,86,86,86,86,86,86,86,87,87,87,87,87,87,87,88,88,88,88,88,88,88,89,90,92,92,92,92,92,92,92,92,92,92,92,93,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,95,95,95,95,95,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,100,100,100,100,100,100,100,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,102,102,104,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,106,107,107,108,108,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,113,113,113,114,114,114,114,114,114,114,114,114,114,114,115,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,117,117,118,118,118,118,119,119,119,119,120,120,120,120,121,122,122,122,122,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,124,126,127,127,127,127,127,128,129,129,129,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,131,131,131,133,133,133,133,133,133,134,135,135,135,135,135,135,135,135,136,136,136,136,136,136,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,138,138,138,138,138,138,139,139,139,139,139,139,140,140,140,140,140,141,143,143,143,143,143,143,143,143,144,144,145,145,145,145,145,145,146,146,146,146,146,148,148,148,148,148,148,148,148,148,149,150,150,150,150,150,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,151,151,151,151,151,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,154,154,154,154,154,154,154,154,154,154,154,154,155,156,156,156,156,156,156,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,158,158,158,160,160,160,160,160,160,160,160,160,160,161,161,161,161,161,161,161,161,162,162,162,162,162,162,162,162,162,162,162,162,162,162,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,164,164,164,164,164,164,164,164,164,164,164,165,165,166,167,167,167,167,167,167,169,170,170,170,170,171,171,171,171,171,171,171,171,171,171,171,172,172,173,173,173,173,173,173,173,173,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,176,176,176,176,176,176,178,179,179,179,180,180,180,180,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,182,182,182,182,183,183,183,183,185,185,185,185,186,186,186,186,186,186,186,186,186,186,187,187,187,187,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,189,189,190,190,190,190,190,190,190,190,190,190,190,190,192,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,195,196,196,196,196,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,201,201,201,201,201,201,201,201,201,201,201,201,201,202,203,203,203,203,203,203,203,203,203,203,203,203,203,203,204,204,204,204,204,204,204,204,204,204,204,204,204,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,207,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,209,209,209,209,209,209,209,210,211,211,211,211,211,211,212,212,212,212,212,212,212,212,212,212,212,212,212,212,213,213,213,213,213,213,214,214,214,214,217,217,217,218,218,218,218,218,218,218,218,218,218,218,218,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,223,223,223,224,224,224,224,224,224,224,224,224,224,224,224,226,226,227,227,227,227,227,227,227,227,227,227,227,227,227,229,229,229,229,229,229,229,230,230,230,230,230,230,230,230,231,231,231,231,231,232,232,232,232,232,232,232,232,232,232,233,233,233,233,233,233,234,234,234,234,234,236,236,236,237,237,237,237,238,238,238,238,238,238,238,238,238,238,238,239,239,239,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,241,242,242,242,242,242,242,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,244,245,245,245,245,245,245,245,245,245,245,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,248,249,249,249,249,249,249,249,249,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,256,256,256,256,256,256,256,256,257,258,258,258,258,258,258,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,260,260,260,261,261,261,261,261,261,261,261,262,262,262,262,263,264,264,265,265,265,265,267,267,267,268,268,268,268,268,268,268,268,268,268,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,272,272,272,272,273,273,273,273,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,275,275,275,275,275,275,275,275,275,275,275,275,275,275,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,277,277,277,278,278,278,278,278,278,278,278,278,278,279,280,280,280,280,280,280,282,282,282,282,282,282,282,282,282,282,282,282,282,282,283,283,283,283,283,283,283,283,284,284,284,285,285,285,285,285,285,285,286,286,286,287,287,287,287,287,287,287,287,287,287,287,287,287,287,288,288,288,288,288,288,288,288,288,288,288,289,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,291,291,291,291,291,291,291,291,291,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,294,294,294,294,294,295,295,295,295,295,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,298,298,298,298,298,298,298,298,298,298,298,298,300,300,300,300,300,300,301,301,301,301,301,301,301,301,301,303,303,303,303,303,303,303,303,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,306,306,306,306,306,306,306,306,306,306,306,307,307,307,307,307,307,307,308,308,308,308,308,308,308,309,309,310,310,310,310,310,310,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,312,312,312,312,312,312,314,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,316,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,318,318,318,318,318,318,318,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,321,321,321,321,321,321,321,322,322,322,322,322,322,322,322,322,322,322,322,322,322,323,323,323,323,323,323,323,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,325,325,325,325,325,325,325,325,325,325,325,326,326,326,327,327,327,327,327,327,327,328,328,328,328,328,328,328,328,328,328,328,328,328,328,329,329,329,329,329,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,331,331,331,331,331,333,333,334,334,334,334,334,335,335,336,336,336,336,336,336,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,339,339,339,339,340,340,340,340,340,340,340,340,340,340,340,340,340,340,340,340,340,340,340,340,340,340,340,340,340,341,341,341,341,342,342,342,342,342,342,342,342,343,344,344,344,344,344,344,345,345,345,346,346,346,346,346,347,347,347,347,347,348,348,348,348,349,349,349,349,349,349,349,350,350,350,350,350,350,350,350,350,350,350,350,351,351,351,351,351,351,351,352,353,353,353,353,353,353,353,353,354,354,354,354,355,355,355,355,355,355,355,355,355,355,356,356,356,356,356,356,356,356,356,356,356,356,356,356,356,356,356,356,356,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,359,359,359,360,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,362,362,362,362,362,362,362,362,362,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,366,366,366,366,366,366,366,366,366,366,367,367,367,367,367,367,367,367,367,367,368,368,368,368,368,368,368,368,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,370,370,370,370,370,370,370,370,370,370,370,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,374,375,375,375,375,375,375,375,375,375,375,375,376,376,376,376,376,376,376,376,376,376,378,378,378,378,378,378,380,380,380,380,380,380,381,381,381],"type":"scatter","mode":"lines","name":"Reagan","line":{"fillcolor":"rgba(214,39,40,1)","color":"rgba(214,39,40,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922],"y":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,17,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,24,24,24,24,24,24,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,36,36,36,36,36,36,37,37,37,37,37,38,38,38,38,38,38,39,39,39,39,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,41,41,42,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,46,46,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,53,53,53,53,54,54,54,56,56,56,56,56,56,56,58,58,58,58,58,58,59,59,59,59,59,59,59,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,65,65,65,66,67,67,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,70,70,71,71,71,72,72,72,72,72,72,72,72,72,72,72,72,73,73,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,76,76,76,77,78,79,79,80,80,80,80,80,80,80,81,81,81,82,82,82,82,82,82,82,82,82,82,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,85,86,86,86,86,88,88,88,88,88,88,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,94,94,94,94,94,94,96,97,97,97,97,97,97,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,100,101,101,101,101,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,106,107,107,107,107,107,107,107,108,108,108,108,109,109,109,109,109,109,109,109,109,109,110,110,110,110,110,111,111,111,111,111,112,112,112,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,114,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,116,116,117,117,117,117,117,117,117,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,123,123,123,123,123,123,124,124,124,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,129,129,129,130,130,130,131,132,132,132,132,132,132,133,133,134,135,135,135,135,135,135,135,135,135,135,135,135,135,135,136,137,137,137,137,137,137,137,137,137,137,138,138,138,138,138,138,138,138,139,139,139,139,139,140,140,140,140,140,140,141,141,141,141,142,142,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,145,145,145,145,145,145,145,145,145,145,145,145,145,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,148,148,148,148,148,148,148,148,148,148,148,148,148,148,149,149,149,149,149,149,149,150,150,151,151,151,151,151,152,152,152,152,152,152,152,152,153,153,153,153,153,153,153,153,153,153,153,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,156,156,156,156,157,157,157,157,157,157,157,157,157,157,157,158,158,158,158,158,158,158,158,158,158,158,158,160,160,160,160,160,160,161,162,162,162,163,163,163,163,163,163,164,164,164,164,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166],"type":"scatter","mode":"lines","name":"G.H.W. Bush","line":{"fillcolor":"rgba(148,103,189,1)","color":"rgba(148,103,189,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922],"y":[1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,15,15,15,15,15,15,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,29,29,30,30,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,41,41,41,41,41,41,42,42,42,42,42,42,43,43,44,44,45,45,45,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,49,49,49,49,49,49,50,50,51,51,51,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,55,55,55,55,56,56,56,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,59,59,60,60,60,60,60,60,60,60,60,63,63,63,63,63,63,63,63,65,65,65,65,65,65,65,65,66,66,66,66,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,69,69,69,69,69,70,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,74,74,74,75,75,75,75,75,75,75,75,77,78,78,79,79,79,79,80,80,80,81,81,81,81,81,82,82,82,82,82,82,84,84,84,84,84,84,84,84,85,85,85,85,85,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,88,88,88,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,93,93,93,93,93,93,94,94,94,95,96,96,96,96,96,96,96,96,96,96,96,96,96,98,98,98,98,98,98,98,98,98,98,98,98,98,98,99,100,100,100,100,100,100,101,101,101,101,101,102,102,102,103,103,103,103,103,103,103,103,103,103,103,103,103,105,105,105,105,106,106,106,106,106,106,106,106,107,107,107,107,107,107,108,108,108,109,109,109,109,109,109,109,109,109,109,109,110,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,114,114,114,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,117,117,117,117,119,119,120,120,120,121,121,121,121,121,121,121,121,121,122,123,123,123,123,124,124,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,127,127,127,127,127,127,128,128,128,128,128,128,128,128,128,128,128,128,128,128,129,129,129,129,129,129,129,129,129,129,129,129,130,130,130,130,130,130,130,131,131,131,131,131,131,131,132,132,132,132,132,132,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,135,135,136,136,136,136,136,136,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,138,139,139,139,140,140,140,140,140,140,140,140,140,141,141,142,142,142,142,143,143,144,144,144,144,144,144,144,144,144,144,144,144,144,144,145,145,146,146,146,146,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,149,149,149,150,150,150,150,150,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,152,152,152,152,152,152,152,152,152,152,152,152,152,152,153,153,153,153,153,153,153,154,154,154,154,154,154,154,154,154,154,154,154,154,155,155,155,155,155,156,156,156,156,156,156,156,156,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,158,158,158,158,158,158,159,159,159,159,159,159,159,159,159,160,160,160,160,160,160,162,162,162,162,164,164,164,164,164,164,164,165,165,165,165,166,166,166,166,166,166,166,166,166,166,166,166,167,167,167,167,167,167,167,168,168,168,168,168,168,168,168,168,168,168,168,168,168,169,169,169,169,169,170,170,171,171,172,172,172,172,174,174,174,175,175,175,175,175,175,175,175,175,175,176,176,176,176,176,176,176,176,176,176,176,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,178,179,179,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,181,181,181,181,181,181,181,181,181,182,182,182,182,182,182,182,183,183,183,183,183,183,184,184,184,184,184,184,184,184,185,185,185,185,185,185,185,185,185,185,185,186,186,186,186,186,186,186,186,186,186,186,186,187,187,187,187,187,187,187,187,187,187,187,187,187,187,188,188,188,188,188,188,188,189,189,189,189,189,189,189,189,189,189,189,189,190,190,190,190,190,190,191,192,192,192,192,192,192,193,193,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,197,197,197,197,197,197,197,197,197,198,199,199,199,199,199,199,199,199,199,199,199,199,199,200,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,202,202,202,202,202,202,202,202,202,202,202,202,203,203,203,203,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,205,205,205,205,205,205,205,205,207,207,207,207,207,207,207,207,207,207,207,207,207,207,208,208,208,208,208,208,208,208,208,209,209,209,209,209,209,210,210,210,210,210,210,210,211,211,212,212,212,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,214,214,214,214,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,216,217,217,218,218,218,218,218,218,218,218,218,218,218,219,219,219,219,219,219,221,221,221,221,221,221,221,222,222,222,222,222,222,222,222,223,223,223,223,223,223,224,224,224,224,224,225,225,225,225,225,225,225,225,225,225,225,225,225,225,226,226,226,226,226,226,226,226,226,226,227,227,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,230,231,231,231,231,231,231,231,231,231,231,231,232,232,232,232,232,232,232,232,232,232,232,233,233,233,233,233,233,233,234,234,234,234,234,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,237,237,237,238,238,238,238,238,238,238,238,238,238,238,238,238,238,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,240,240,241,241,241,241,241,242,242,242,242,242,242,242,242,242,242,243,243,243,243,243,244,244,244,244,244,244,244,244,244,244,244,244,244,244,245,245,245,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,249,249,249,249,249,249,249,249,250,250,250,250,250,250,252,252,252,252,252,252,252,252,252,252,252,252,253,254,255,255,255,255,255,255,255,255,255,255,255,255,256,256,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,260,260,260,261,262,262,262,262,262,262,262,262,263,264,265,265,265,265,265,265,265,265,265,265,265,266,266,267,267,267,267,267,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,269,269,269,269,269,269,269,269,269,269,269,270,270,270,270,270,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,272,272,272,272,272,272,272,272,272,272,272,272,272,272,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,274,274,274,275,276,276,276,276,276,276,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,278,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,280,280,280,280,280,280,280,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,283,283,283,283,283,283,286,286,286,286,286,286,286,286,286,286,286,286,286,287,287,287,287,287,287,287,287,287,287,287,287,287,287,288,288,288,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,290,290,290,290,290,290,290,290,290,291,292,292,292,293,293,293,293,293,294,294,295,295,295,295,295,295,295,295,295,295,295,296,296,296,296,296,296,296,296,296,297,297,297,297,297,297,297,297,297,297,298,298,298,298,298,298,298,298,299,299,299,299,299,299,299,299,299,299,299,299,299,300,301,301,301,301,301,301,301,302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,303,303,303,303,303,303,303,304,304,304,304,304,304,304,304,304,304,304,304,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,307,307,307,307,307,307,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,309,309,309,310,310,310,310,310,310,310,310,310,310,310,310,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,314,314,314,314,314,314,314,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,318,318,318,318,318,318,319,319,319,319,319,320,322,322,322,322,322,322,322,323,323,323,323,323,323,323,324,324,324,324,324,324,325,325,325,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,327,327,328,328,328,328,328,328,329,329,329,329,329,329,329,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,332,332,332,332,332,332,332,332,332,332,332,332,332,332,333,333,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,335,335,335,335,335,335,335,336,336,336,336,336,336,336,336,336,336,336,336,336,336,338,338,338,338,338,338,339,339,339,339,339,339,339,339,339,339,339,339,339,341,341,342,342,342,342,342,342,342,342,342,342,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,344,344,344,344,344,344,344,346,346,346,348,348,348,348,348,348,348,348,348,348,348,348,348,349,349,349,351,351,351,351,351,353,353,353,353,353,353,353,353,353,353,353,353,353,355,355,356,356,356,358,358,360,365,365,365],"type":"scatter","mode":"lines","name":"Clinton","line":{"fillcolor":"rgba(140,86,75,1)","color":"rgba(140,86,75,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922],"y":[0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,15,15,15,15,16,16,16,16,16,16,17,17,17,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,20,20,21,21,21,21,21,21,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,28,28,29,29,30,30,30,30,30,30,31,32,32,32,33,33,33,33,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,39,40,40,40,40,40,40,40,41,41,41,41,41,41,41,42,42,42,42,42,42,50,50,51,51,51,51,51,51,51,51,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,58,58,58,58,58,58,59,60,60,60,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,67,67,68,68,68,68,68,68,68,68,68,68,68,68,68,68,70,70,70,70,70,70,70,70,70,70,70,70,71,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,79,79,79,79,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,81,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,86,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,89,89,89,90,90,90,91,91,91,91,91,91,92,92,92,92,92,92,92,92,93,94,94,94,94,95,95,95,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,101,101,102,103,103,103,103,103,104,105,105,105,105,105,105,105,106,106,106,106,106,106,109,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,113,115,115,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,123,123,123,123,123,123,123,123,124,124,124,124,124,124,124,124,124,124,124,124,124,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,127,127,127,127,127,127,127,127,128,128,128,128,129,129,129,129,129,129,129,129,130,130,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,133,133,133,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,138,138,138,140,140,140,140,140,140,140,140,140,140,140,141,141,142,142,142,142,142,143,143,144,144,144,144,144,144,144,144,144,144,144,144,145,145,145,145,145,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,147,149,149,149,149,149,149,149,149,149,149,149,149,149,149,151,152,152,152,152,152,152,153,153,153,153,153,153,153,153,153,153,153,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,155,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,160,160,160,160,160,160,160,160,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,164,164,164,164,164,164,164,164,164,164,164,164,164,167,167,167,167,168,168,168,168,168,168,168,168,168,168,168,168,168,168,169,169,169,169,170,170,170,170,170,170,170,170,170,171,171,171,171,171,171,171,171,172,172,172,172,172,172,173,173,173,173,173,173,173,173,173,173,173,173,173,173,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,176,176,176,176,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,178,178,178,178,178,178,178,178,178,178,178,178,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,182,183,183,183,183,183,183,183,183,183,183,184,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,186,186,186,186,186,186,186,186,186,186,186,186,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,188,189,189,189,189,189,189,189,189,189,189,189,189,189,189,190,190,190,190,190,190,190,190,190,190,190,191,191,191,191,191,191,191,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,195,195,195,195,195,195,195,195,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,201,201,201,201,201,201,201,202,203,203,203,203,203,203,203,203,203,203,203,203,203,203,204,204,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,207,207,207,208,208,208,209,209,209,209,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,211,211,211,211,211,211,211,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,213,213,213,213,213,213,213,213,213,213,213,213,213,213,214,214,214,214,214,214,214,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,216,216,216,216,217,218,218,218,218,218,218,218,218,219,219,219,219,219,219,220,221,221,221,221,221,221,221,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,223,223,223,223,223,223,224,224,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,227,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,229,229,230,230,230,230,230,230,230,230,230,230,230,230,230,230,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,232,232,232,232,232,232,233,233,234,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,236,236,236,236,236,236,236,236,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,239,240,240,241,241,241,241,241,241,241,241,241,241,241,241,242,242,242,242,242,242,242,242,242,242,242,242,243,243,243,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,246,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,249,249,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,253,253,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,256,257,257,257,257,257,257,258,258,258,258,258,258,259,259,259,260,260,260,260,260,260,261,261,262,262,262,262,262,262,262,262,262,262,262,262,262,262,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,264,264,264,264,264,264,264,264,264,264,264,264,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,267,267,267,267,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,269,270,270,270,270,270,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,272,272,272,272,272,272,272,272,272,272,272,272,272,272,273,273,273,273,273,273,273,273,273,273,273,273,273,273,274,275,275,275,275,275,275,275,275,275,275,275,276,276,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,280,280,280,280,280,280,280,280,281,281,281,281,281,281,281,281,281,281,281,281,281,282,282,282,283,283,283,283,283,283,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,287,287,287,287,287,287,287,289,289,289,289,289],"type":"scatter","mode":"lines","name":"G.W. Bush","line":{"fillcolor":"rgba(227,119,194,1)","color":"rgba(227,119,194,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922],"y":[0,2,5,5,5,5,5,5,5,5,9,9,9,9,9,9,12,14,14,14,14,14,14,14,14,14,14,14,14,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,24,24,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,35,35,35,35,35,36,36,36,36,36,36,36,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,43,43,43,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,47,48,48,48,48,48,49,49,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,61,61,61,61,61,61,61,61,61,61,61,61,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,68,68,68,68,68,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,72,72,72,72,72,73,73,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,78,79,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,83,83,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,87,87,87,87,88,88,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,90,90,90,90,90,91,92,92,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,94,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,98,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,101,101,102,102,102,103,103,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,109,109,109,109,109,109,109,109,110,110,110,110,110,110,110,110,110,111,111,111,111,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,114,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,118,118,118,118,118,119,119,119,119,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,123,123,123,123,123,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,128,128,128,128,128,128,128,128,128,128,128,129,129,129,129,129,129,129,129,129,129,129,130,130,130,130,130,131,131,131,131,131,131,131,131,131,132,132,132,132,132,132,133,133,133,133,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,136,137,137,137,137,137,137,137,137,137,137,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,139,139,139,139,139,139,139,139,139,139,139,139,139,139,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,142,144,144,144,144,144,144,144,144,144,144,144,144,144,144,146,146,146,146,146,146,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,149,149,149,149,149,149,149,150,150,150,150,150,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,151,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,154,154,154,154,154,154,155,155,155,155,155,155,156,156,156,156,156,156,156,156,156,156,156,156,156,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,158,159,159,159,159,159,160,160,160,160,160,160,160,160,160,160,160,160,160,160,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,162,162,162,162,162,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,169,169,170,170,170,170,170,170,170,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,172,172,172,172,172,172,172,172,172,172,173,173,173,173,175,175,175,175,175,175,175,175,175,175,175,175,175,175,176,176,176,176,176,177,177,177,177,177,177,177,177,177,177,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,181,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,183,183,183,183,183,183,183,183,183,183,183,183,183,184,184,184,184,184,184,184,184,184,184,186,186,186,186,186,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,188,188,188,188,188,189,189,189,189,189,189,189,189,189,189,190,190,190,190,190,190,190,191,191,191,191,191,191,192,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,194,194,194,194,194,194,195,195,195,195,195,195,195,196,198,198,198,198,198,198,198,198,198,198,198,198,198,198,199,199,199,199,199,199,199,199,199,199,199,199,199,199,200,200,200,200,200,201,201,201,201,201,201,201,201,201,202,202,202,202,202,202,202,202,202,202,202,202,202,202,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,204,204,204,204,204,204,204,204,204,204,204,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,208,208,208,208,208,209,209,210,210,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,212,212,213,213,213,213,213,213,213,213,213,213,213,213,214,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,217,217,217,217,218,218,218,218,218,218,218,218,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,220,220,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,223,223,223,223,223,223,223,223,223,223,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,225,225,225,225,226,226,226,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,229,229,229,229,229,229,229,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,233,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,235,235,235,235,235,235,235,235,235,236,236,236,236,236,236,236,237,237,237,237,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,239,239,239,239,239,239,239,239,239,239,239,239,241,241,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,243,243,243,243,243,243,243,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,245,245,245,245,245,245,245,245,245,245,245,245,246,246,246,246,246,246,246,246,246,249,249,249,249,249,249,249,249,249,249,249,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,251,251,252,252,252,252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,253,253,254,254,254,254,254,254,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,257,257,257,258,259,259,259,259,259,259,259,259,259,259,259,259,260,260,260,260,260,260,260,260,260,260,260,260,260,262,262,262,262,262,262,263,263,263,264,266,266,266,266,266,266,266,266,266,266,266,266,266,266,267,267,267,267,268,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,272,275,275,275,275,276,276,276,276],"type":"scatter","mode":"lines","name":"Obama","line":{"fillcolor":"rgba(127,127,127,1)","color":"rgba(127,127,127,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922],"y":[1,1,1,1,2,4,4,5,6,6,7,7,7,7,8,8,8,8,8,8,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,19,20,20,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,25,25,25,25,26,28,29,31,33,33,33,33,33,34,34,34,34,34,34,34,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,41,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46],"type":"scatter","mode":"lines","name":"Trump","line":{"fillcolor":"rgba(188,189,34,1)","color":"rgba(188,189,34,1)"},"xaxis":"x","yaxis":"y","frame":null}],"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1}},"base_url":"https://plot.ly"},"evals":["config.modeBarButtonsToAdd.0.click"],"jsHooks":{"render":[{"code":"function(el, x) { var ctConfig = crosstalk.var('plotlyCrosstalkOpts').set({\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1}}); }","data":null}]}}</script>
<p>My only issue with this plot is that the period I’m most interested in (while Trump has been in office) isn’t immediately clear. I can drag to zoom, but I’d rather make the plot auto zoomed. To do this, I need to calculate the maximum orders signed by any president as of Trump being in office. I’ll pad his time in office to make the graph prettier.</p>
<pre class="r"><code>ymax = orders %&gt;% 
  filter(daysInOffice &lt;= ceiling(trumpDaysInOffice*1.1)) %&gt;% 
  select(-daysInOffice) %&gt;% 
  lapply(max) %&gt;% 
  unlist() %&gt;% 
  max() %&gt;% 
  `*`(1.1) %&gt;% 
  ceiling()
print(sprintf(&quot;%d orders signed as of %d days in office!&quot;,ymax,ceiling(trumpDaysInOffice*1.1)))</code></pre>
<pre><code>## [1] &quot;69 orders signed as of 275 days in office!&quot;</code></pre>
<p>We’ll draw the plot again, but filter out all the later information.</p>
<pre class="r"><code>orders %&gt;% 
  filter(daysInOffice &lt;= ceiling(trumpDaysInOffice*1.1)) %&gt;% 
  plot_ly(x = ~daysInOffice) %&gt;% 
  add_lines(y = ~nixonOrders,name=&quot;Nixon&quot;) %&gt;% 
  add_lines(y = ~fordOrders,name=&quot;Ford&quot;) %&gt;% 
  add_lines(y = ~carterOrders,name=&quot;Carter&quot;) %&gt;% 
  add_lines(y = ~reaganOrders,name=&quot;Reagan&quot;) %&gt;% 
  add_lines(y = ~ghw_bushOrders,name=&quot;G.H.W. Bush&quot;) %&gt;% 
  add_lines(y = ~clintonOrders,name=&quot;Clinton&quot;) %&gt;% 
  add_lines(y = ~gw_bushOrders,name=&quot;G.W. Bush&quot;) %&gt;% 
  add_lines(y = ~obamaOrders,name=&quot;Obama&quot;) %&gt;% 
  add_lines(y = ~trumpOrders,name=&quot;Trump&quot;) %&gt;% 
  layout(shapes=list(type=&#39;line&#39;, x0= trumpDaysInOffice, x1= trumpDaysInOffice, y0=0, y1=ymax, line=list(dash=&#39;dot&#39;, width=1)),
         xaxis = list(title=&quot;Days in Office&quot;),
         yaxis = list(title=&quot;# of Executive Orders Signed&quot;),
         title = &#39;How have presidents used Executive Orders over the course of their terms?&#39;)</code></pre>
<div id="2078107861a1" style="width:672px;height:480px;" class="plotly html-widget"></div>
<script type="application/json" data-for="2078107861a1">{"x":{"visdat":{"207845a81f59":["function () ","plotlyVisDat"]},"cur_data":"207845a81f59","attrs":{"207845a81f59":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Nixon"},"207845a81f59.1":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Ford"},"207845a81f59.2":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Carter"},"207845a81f59.3":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Reagan"},"207845a81f59.4":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"G.H.W. Bush"},"207845a81f59.5":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Clinton"},"207845a81f59.6":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"G.W. Bush"},"207845a81f59.7":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Obama"},"207845a81f59.8":{"x":{},"alpha":1,"sizes":[10,100],"y":{},"type":"scatter","mode":"lines","name":"Trump"}},"layout":{"margin":{"b":40,"l":60,"t":25,"r":10},"shapes":[{"type":"line","x0":250,"x1":250,"y0":0,"y1":69,"line":{"dash":"dot","width":1}}],"xaxis":{"domain":[0,1],"title":"Days in Office"},"yaxis":{"domain":[0,1],"title":"# of Executive Orders Signed"},"title":"How have presidents used Executive Orders over the course of their terms?","hovermode":"closest","showlegend":true},"source":"A","config":{"modeBarButtonsToAdd":[{"name":"Collaborate","icon":{"width":1000,"ascent":500,"descent":-50,"path":"M487 375c7-10 9-23 5-36l-79-259c-3-12-11-23-22-31-11-8-22-12-35-12l-263 0c-15 0-29 5-43 15-13 10-23 23-28 37-5 13-5 25-1 37 0 0 0 3 1 7 1 5 1 8 1 11 0 2 0 4-1 6 0 3-1 5-1 6 1 2 2 4 3 6 1 2 2 4 4 6 2 3 4 5 5 7 5 7 9 16 13 26 4 10 7 19 9 26 0 2 0 5 0 9-1 4-1 6 0 8 0 2 2 5 4 8 3 3 5 5 5 7 4 6 8 15 12 26 4 11 7 19 7 26 1 1 0 4 0 9-1 4-1 7 0 8 1 2 3 5 6 8 4 4 6 6 6 7 4 5 8 13 13 24 4 11 7 20 7 28 1 1 0 4 0 7-1 3-1 6-1 7 0 2 1 4 3 6 1 1 3 4 5 6 2 3 3 5 5 6 1 2 3 5 4 9 2 3 3 7 5 10 1 3 2 6 4 10 2 4 4 7 6 9 2 3 4 5 7 7 3 2 7 3 11 3 3 0 8 0 13-1l0-1c7 2 12 2 14 2l218 0c14 0 25-5 32-16 8-10 10-23 6-37l-79-259c-7-22-13-37-20-43-7-7-19-10-37-10l-248 0c-5 0-9-2-11-5-2-3-2-7 0-12 4-13 18-20 41-20l264 0c5 0 10 2 16 5 5 3 8 6 10 11l85 282c2 5 2 10 2 17 7-3 13-7 17-13z m-304 0c-1-3-1-5 0-7 1-1 3-2 6-2l174 0c2 0 4 1 7 2 2 2 4 4 5 7l6 18c0 3 0 5-1 7-1 1-3 2-6 2l-173 0c-3 0-5-1-8-2-2-2-4-4-4-7z m-24-73c-1-3-1-5 0-7 2-2 3-2 6-2l174 0c2 0 5 0 7 2 3 2 4 4 5 7l6 18c1 2 0 5-1 6-1 2-3 3-5 3l-174 0c-3 0-5-1-7-3-3-1-4-4-5-6z"},"click":"function(gd) { \n        // is this being viewed in RStudio?\n        if (location.search == '?viewer_pane=1') {\n          alert('To learn about plotly for collaboration, visit:\\n https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html');\n        } else {\n          window.open('https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html', '_blank');\n        }\n      }"}],"cloud":false},"data":[{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275],"y":[0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,11,11,11,11,12,12,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,19,19,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,29,30,30,30,30,30,30,30,30,30,30,30,30,31,32,32,32,32,32,32,33,33,34,34,35,35,35,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37],"type":"scatter","mode":"lines","name":"Nixon","line":{"fillcolor":"rgba(31,119,180,1)","color":"rgba(31,119,180,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275],"y":[0,0,0,0,0,1,1,1,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,7,7,7,7,8,8,8,8,8,9,9,9,10,10,13,13,13,13,13,13,13,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,19,19,19,19,19,19,19,19,19,19,19,19,19,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,29,29,29,29,31,31,32,32,32,35,35,35,35,36,36,37,37,37,37,37,37,37,37,37,37,37,37,39,39,39,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,42,42,42,43,43,43,43,43,43,43,43,43,43,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,48,48,48,49,50,51,51,51,52,52,52,52,52,52,52,53,53,54,54,54,54,54,54,55,56,56,56,56,56,56,56,57,57,57,57,57,57,57,58,58,58,58,58,58,62,62,62,62,62],"type":"scatter","mode":"lines","name":"Ford","line":{"fillcolor":"rgba(255,127,14,1)","color":"rgba(255,127,14,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275],"y":[0,1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,4,4,4,4,4,4,5,5,5,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,10,10,10,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,20,20,20,20,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,31,31,33,33,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36,38,38,38,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,44,44,45,45,45,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48],"type":"scatter","mode":"lines","name":"Carter","line":{"fillcolor":"rgba(44,160,44,1)","color":"rgba(44,160,44,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275],"y":[0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,5,5,5,5,5,5,7,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,12,12,12,12,12,13,13,13,13,13,13,14,14,14,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,21,22,22,22,22,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,34,35,35,36,36,36,36,36,37,37,37,37,37,37,37,38,40,41,41,41,41,41,41,41,42,42,42,42,42,42,43,44,44,44,44,44,45,45,45],"type":"scatter","mode":"lines","name":"Reagan","line":{"fillcolor":"rgba(214,39,40,1)","color":"rgba(214,39,40,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275],"y":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,17,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,24,24,24,24,24,24,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27],"type":"scatter","mode":"lines","name":"G.H.W. Bush","line":{"fillcolor":"rgba(148,103,189,1)","color":"rgba(148,103,189,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275],"y":[1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,15,15,15,15,15,15,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,29,29,30,30,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,41,41,41],"type":"scatter","mode":"lines","name":"Clinton","line":{"fillcolor":"rgba(140,86,75,1)","color":"rgba(140,86,75,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275],"y":[0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,15,15,15,15,16,16,16,16,16,16,17,17,17,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,20,20,21,21,21,21,21,21,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,28,28,29,29,30,30,30,30,30,30,31,32,32,32,33,33,33,33,34,34,34,34,35,35,35],"type":"scatter","mode":"lines","name":"G.W. Bush","line":{"fillcolor":"rgba(227,119,194,1)","color":"rgba(227,119,194,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275],"y":[0,2,5,5,5,5,5,5,5,5,9,9,9,9,9,9,12,14,14,14,14,14,14,14,14,14,14,14,14,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,24,24,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27],"type":"scatter","mode":"lines","name":"Obama","line":{"fillcolor":"rgba(127,127,127,1)","color":"rgba(127,127,127,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275],"y":[1,1,1,1,2,4,4,5,6,6,7,7,7,7,8,8,8,8,8,8,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,19,20,20,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,25,25,25,25,26,28,29,31,33,33,33,33,33,34,34,34,34,34,34,34,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,41,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46],"type":"scatter","mode":"lines","name":"Trump","line":{"fillcolor":"rgba(188,189,34,1)","color":"rgba(188,189,34,1)"},"xaxis":"x","yaxis":"y","frame":null}],"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1}},"base_url":"https://plot.ly"},"evals":["config.modeBarButtonsToAdd.0.click"],"jsHooks":{"render":[{"code":"function(el, x) { var ctConfig = crosstalk.var('plotlyCrosstalkOpts').set({\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1}}); }","data":null}]}}</script>
<p>Now we can clearly see Trumps behavior in office. Interesting notes:</p>
<ul>
<li>Clinton, Obama and Trump were in an early presidency arms race to sign the most with Obama (mostly) staying ahead until around day 66.</li>
<li>Trump and Clinton continued to be neck and neck until around day 161 when Clinton became the clear leader in use of orders</li>
<li>Despite a lot of early use, Obama whent from being the most prolific user to being in the bottom third of modern presidents.</li>
<li>Trump shows a big spike in the use of orders just prior to day 100 (despite <a href="http://time.com/4750064/trump-100-days-standard/">calling it a “Ridiculous Standard”</a>)</li>
<li>Trump isn’t #1, but he’s in the top third of modern presidents</li>
</ul>
</div>
<div id="conclusion" class="section level2">
<h2>Conclusion</h2>
<p>What we’ve done is visualize how presidents have issued exeucitve orders by looking at the total to date in office. We haven’t looked at the content of the orders or how efficacious they were nor at their legality. Still, we can tell an interesting story about how important orders have become in early presidencies.</p>
<div id="notes" class="section level4">
<h4>Notes</h4>
<p>I failed to realize for a long time that the pre-94 orders being unavailable through the API meant I was missing the first year of Clinton’s presidency. My narrative around this has been shattered by how prolificly Clinton used executive orders.</p>
<p>Final note, I’m not terribly concerned about the use of orders one way or another - they’re very fragile and the extreme ones rarely survive changes in the presidency. This isn’t meant to be party aligned, just an objective look at the rate of signing them.</p>
</div>
</div>
</div>
</content:encoded>
    </item>
    
    <item>
      <title>Making this Blog</title>
      <link>http://thug-r.life/post/2017-08-08-making-the-blog/</link>
      <pubDate>Tue, 08 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://thug-r.life/post/2017-08-08-making-the-blog/</guid>
      <description>blogdown magicI made this blog using the magic of blogdown which is a framework that joins together a few technologies to make ‘static websites’
RMarkdownHugoRMarkdownRMarkdown is an interface from R to markdown which is a way of marking up a text document with formating so other tools can convert it from a text file to a pretty format (PDF, Word, etc.) It’s a great way of documenting your code by having your narrative right next to the code that generated the insights/results.</description>
      <content:encoded><div id="blogdown-magic" class="section level1">
<h1>blogdown magic</h1>
<p>I made this blog using the magic of <code>blogdown</code> which is a framework that joins together a few technologies to make ‘static websites’</p>
<ul>
<li>RMarkdown</li>
<li>Hugo</li>
</ul>
<div id="rmarkdown" class="section level2">
<h2>RMarkdown</h2>
<p>RMarkdown is an interface from R to markdown which is a way of marking up a text document with formating so other tools can convert it from a text file to a pretty format (PDF, Word, etc.) It’s a great way of documenting your code by having your narrative right next to the code that generated the insights/results.</p>
</div>
<div id="hugo" class="section level2">
<h2>Hugo</h2>
<p>Hugo is a static website generator written in Go. That’s all I know.</p>
<div id="static-website" class="section level3">
<h3>Static website?</h3>
<p>Most content on the web uses ‘server-side’ technology to render dynamic websites. It means that each time you access the same URL you could get different content based on who you are, where you’re from, etc. Contrast this with a ‘static site’ which is just a set of HTML files being served up. Granted - with Javascript you can do a lot of changing on the fly but that’s neither here nor there.</p>
<p>Wordpress as a blogging platform is an example of a dynamic website - each blog post is stored in a database and served from there.</p>
<p>Having a dynamic website means you need a server that can execute the code and serve up the pages. Provders like GoDaddy will sell you webhosting for $7/mo which is pretty cheap. In fact, for Wordpress, you’re essentially buying a SaaS solution (Software as a Solution) even though it’s really PaaS (Platform as a Service). You could buy a server from Digital Ocean, setup your own webserver and host it there. I actually ran servers out of my apartment when I was in college doing essentially this (granted, DO is Infrastructure as a Service where I was running bare metal). But then you have to administer the service which is…ugh. A pain.</p>
<p>But often times I like to do things differently not to necessarily save money but because they’re more novel. So, I wanted to host a static website with an Amazon S3 bucket because you can. And it’s supposed to be cheap. Pennies a month.</p>
</div>
</div>
<div id="domain-name" class="section level2">
<h2>Domain Name</h2>
<p>I bought my domain name from GoDaddy despite the myriad of ethical reasons not to. I’ve used them for years and while I know they’re evil, I already have an account and domains there.</p>
</div>
<div id="aws-s3" class="section level2">
<h2>AWS S3</h2>
<p>I already have an AWS account to manage my Lambda programs and hosting a bucket of pictures of miniature figures I scrape from Twitter so it wasn’t a big deal to make a few extra buckets.</p>
</div>
<div id="cloudflare" class="section level2">
<h2>Cloudflare</h2>
<p>I’m trying to use Cloudflare to manage my DNS and direct traffic from the domain name to the S3 bucket. This part isn’t going well right now.</p>
</div>
<div id="github" class="section level2">
<h2>GitHub</h2>
<p>I’m using GitHub as a…backup? It gives me a place to commit changes to and lets me work across multiple computers without missing a beat.</p>
</div>
<div id="travis-ci" class="section level2">
<h2>Travis CI</h2>
<p>Travis CI is a ‘continuous integration’ system which will build your code to test it each time you commit to GitHub. I’ve used it to test builds of my package <code>readOffice</code> as I’m developing it. Here, I’m using it to auto migrate new content to the S3 bucket.</p>
</div>
<div id="conclusion" class="section level2">
<h2>Conclusion</h2>
<p>I’m stitching together a bunch of technologies that I’ve never/rarely used to make a blog. Which I’ve done lots of times using other solutions before.</p>
</div>
</div>
</content:encoded>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://thug-r.life/about/</link>
      <pubDate>Sun, 06 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://thug-r.life/about/</guid>
      <description>I&amp;rsquo;m Mark Ewing. I&amp;rsquo;m just some guy who currently lives in the northeast part of Tennessee, just barely too far from Asheville, NC to drink Wicked Weed beer every weekend. I work for a big company doing a bunch of stuff and often that stuff involves R. I love R. I mean, not in a creepy way, yet most people still find it creepy. I first learned R in a linear algebra class in college back in 2006 and used it until I finished my masters degree in Applied Statistics.</description>
      <content:encoded><p>I&rsquo;m Mark Ewing. I&rsquo;m just some guy who currently lives in the northeast part of Tennessee, just barely too far from Asheville, NC to drink Wicked Weed beer every weekend. I work for a big company doing a bunch of stuff and often that stuff involves R. I love R. I mean, not in a creepy way, yet most people still find it creepy. I first learned R in a linear algebra class in college back in 2006 and used it until I finished my masters degree in Applied Statistics. I introduced the company I work for now to R back in 2010 and worked really hard to grow its use and usability in an enterprise environment.</p>

<p>I guess I&rsquo;m starting ths blog because I want to do more technical writing or something. Also, I&rsquo;ve started publishing packages and so I need a platform to promote them. We&rsquo;ll see how it goes.</p>
</content:encoded>
    </item>
    
    <item>
      <title>Theta Joins in R</title>
      <link>http://thug-r.life/post/2017-08-06-fuzzy-joining/</link>
      <pubDate>Sun, 06 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://thug-r.life/post/2017-08-06-fuzzy-joining/</guid>
      <description>Theta JoinsCommon Joins
If you’re like me, you’re looking at that diagram wondering what the heck is a ‘theta’ join?! Well, that’s the formal name for a ‘fuzzy’ join. In fact, you can read about all the different join types in this StackOverflow answer.
An equi join is the most common kind of join because it leverages keys in your data source which are essential in a SQL environment.</description>
      <content:encoded><div id="theta-joins" class="section level1">
<h1>Theta Joins</h1>
<div class="figure">
<img src="/img/2017-08-06-picture1.png" alt="Common Joins" width="400" />
<p class="caption">Common Joins</p>
</div>
<p>If you’re like me, you’re looking at that diagram wondering what the heck is a ‘theta’ join?! Well, that’s the formal name for a ‘fuzzy’ join. In fact, you can read about all the different join types <a href="https://stackoverflow.com/questions/7870155/difference-between-a-theta-join-equijoin-and-natural-join">in this StackOverflow answer</a>.</p>
<p>An equi join is the most common kind of join because it leverages keys in your data source which are essential in a SQL environment. In SQL it would be something like:</p>
<blockquote>
<p>select a.*, b.*<br />
from dbo.table1 as a<br />
left join dbo.table2 as b<br />
on a.key = b.key</p>
</blockquote>
<p>Actually this is a ‘natural’ join because the key has the same name in both sources and I’m using an equality to establish the join. But, because I’m joining based on two keys being the same, this fits into the ‘equi’ join category.</p>
<p>How can we do ‘equi’ joins in R? I’ll present three methods below using three different packages, <code>data.table</code>, <code>dplyr</code>, and <code>sqldf</code>.</p>
<div id="getting-ready" class="section level2">
<h2>Getting ready</h2>
<p>We’ll need to load some packages. Please note the versions I’m using. Also, the ‘live’ code I’m running is on my 64-bit Windows 7 laptop (8Gb RAM, i7-6600U CPU) in R 3.4.1</p>
<table>
<thead>
<tr class="header">
<th>Package</th>
<th>Version</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>data.table</td>
<td>1.10.4</td>
</tr>
<tr class="even">
<td>sqldf</td>
<td>0.4-10</td>
</tr>
<tr class="odd">
<td>dplyr</td>
<td>0.5.0</td>
</tr>
</tbody>
</table>
<pre class="r"><code>library(data.table)
library(sqldf)
library(dplyr)</code></pre>
<div id="equijoin-data" class="section level3">
<h3>equijoin data</h3>
<p>Two quick tables to demonstrate equijoin behavior in each ecosystem. Here we have some customer id’s in two tables, one which has purchases (df1) and another with their location. I’ll write everything in a function to enable easy benchmarking and profiling.</p>
<pre class="r"><code>df1 = data.frame(CustomerId = c(1:6), Product = c(rep(&quot;Laptop&quot;, 2), rep(&quot;Tablet&quot;, 2), rep(&quot;Smartphone&quot;, 2)))
df2 = data.frame(CustomerId = c(2,3,4,6), State = c(rep(&quot;Tennessee&quot;, 3), rep(&quot;North Carolina&quot;, 1)))</code></pre>
</div>
</div>
<div id="different-approaches-for-equijoins" class="section level2">
<h2>Different Approaches for Equijoins</h2>
<div id="base-r" class="section level3">
<h3>Base R</h3>
<pre class="r"><code>baseR_left = function(){
  merge(x = df1, y = df2, by = &quot;CustomerId&quot;, all.x = TRUE)
}
baseR_left()
##   CustomerId    Product          State
## 1          1     Laptop           &lt;NA&gt;
## 2          2     Laptop      Tennessee
## 3          3     Tablet      Tennessee
## 4          4     Tablet      Tennessee
## 5          5 Smartphone           &lt;NA&gt;
## 6          6 Smartphone North Carolina</code></pre>
</div>
<div id="data.table" class="section level3">
<h3>data.table</h3>
<p>Are you not familiar with <code>data.table</code>? I’ll be honest, I don’t use it a lot but it’s described as follows on CRAN:</p>
<blockquote>
<p>Fast aggregation of large data (e.g. 100GB in RAM), fast ordered joins, fast add/modify/delete of columns by group using no copies at all, list columns, a fast friendly file reader and parallel file writer. Offers a natural and flexible syntax, for faster development.</p>
</blockquote>
<p>The syntax is different from a lot of what I’m used to which is why I don’t use it a bunch, but that’s a bad reason to not consider it.</p>
<pre class="r"><code>dt1 = data.table(df1)
dt2 = data.table(df2)
#left join
dt_left = function(){
  dt2[dt1,on=.(CustomerId = CustomerId)]
}
dt_left()
##    CustomerId          State    Product
## 1:          1             NA     Laptop
## 2:          2      Tennessee     Laptop
## 3:          3      Tennessee     Tablet
## 4:          4      Tennessee     Tablet
## 5:          5             NA Smartphone
## 6:          6 North Carolina Smartphone</code></pre>
<p>I think this sytax is a bit backwards since Y[X] produces a left join of Y onto X meaning you put the left anchors on the right… anyway.</p>
</div>
<div id="sqldf" class="section level3">
<h3>sqldf</h3>
<p>Are you a lover of SQL and maybe new to R? I have a coworker who lived and breathed SQL for decades before learning R and they swear by this package to manage data. It literally sets up a database in the background to support the SQL language. That’s <em>dedication</em>.</p>
<blockquote>
<p>The sqldf() function is typically passed a single argument which is an SQL select statement where the table names are ordinary R data frame names. sqldf() transparently sets up a database, imports the data frames into that database, performs the SQL select or other statement and returns the result using a heuristic to determine which class to assign to each column of the returned data frame. The sqldf() or read.csv.sql() functions can also be used to read filtered files into R even if the original files are larger than R itself can handle. ‘RSQLite’, ‘RH2’, ‘RMySQL’ and ‘RPostgreSQL’ backends are supported.</p>
</blockquote>
<pre class="r"><code>sqldf_left = function(){
  sqldf(&quot;SELECT a.CustomerId, Product, State 
         FROM df1 a
         LEFT JOIN df2 b 
           on a.CustomerID = b.CustomerID&quot;)
}
sqldf_left()
##   CustomerId    Product          State
## 1          1     Laptop           &lt;NA&gt;
## 2          2     Laptop      Tennessee
## 3          3     Tablet      Tennessee
## 4          4     Tablet      Tennessee
## 5          5 Smartphone           &lt;NA&gt;
## 6          6 Smartphone North Carolina</code></pre>
</div>
<div id="dplyr" class="section level3">
<h3>dplyr</h3>
<p>If I described myself as having a man crush on Hadley Wickham it would be accurate. I have a signed copy of his book ‘Advanced R’ on my bookshelf which I treasure. I didn’t even get it signed, I sent it with a friend who went to an R conference where I knew Hadley would be present. ANYWAY… dplyr is part of the <a href="https://www.tidyverse.org/">tidyverse</a> which is a collection of packages to support ‘tidy’ data analysis. It includes support for many operations include joins.</p>
<pre class="r"><code>dplyr_left = function(){
  left_join(df1,df2,by=&quot;CustomerId&quot;)
}
dplyr_left()
##   CustomerId    Product          State
## 1          1     Laptop           &lt;NA&gt;
## 2          2     Laptop      Tennessee
## 3          3     Tablet      Tennessee
## 4          4     Tablet      Tennessee
## 5          5 Smartphone           &lt;NA&gt;
## 6          6 Smartphone North Carolina</code></pre>
</div>
</div>
<div id="profiling" class="section level2">
<h2>Profiling</h2>
<p>Let’s profile these just to get a sense of where they stand.</p>
<div id="profmem" class="section level3">
<h3>profmem</h3>
<table>
<thead>
<tr class="header">
<th>Ecosystem</th>
<th>profmem bytes</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Base R</td>
<td>0</td>
</tr>
<tr class="even">
<td>data.table</td>
<td>58,048</td>
</tr>
<tr class="odd">
<td>sqldf</td>
<td>183,888</td>
</tr>
<tr class="even">
<td>dplyr</td>
<td>5,088</td>
</tr>
</tbody>
</table>
</div>
<div id="microbenchmark" class="section level3">
<h3>microbenchmark</h3>
<pre class="r"><code>library(microbenchmark)
microbenchmark(base = baseR_left(),
               dt = dt_left(),
               sqldf = sqldf_left(),
               dplyr = dplyr_left(),
               times = 100)
## Unit: microseconds
##   expr       min         lq      mean     median        uq       max neval
##   base   454.734   572.8845   727.651   627.5840   806.451  2958.868   100
##     dt   634.513   889.5935  1030.685   944.8395  1140.117  2257.259   100
##  sqldf 13749.219 15019.8840 17608.912 16303.4945 18693.672 67579.903   100
##  dplyr   940.464  1072.1070  1343.551  1134.6470  1511.889  5295.988   100</code></pre>
<div id="results" class="section level4">
<h4>Results</h4>
<p>Base R has the smallest memory footprint (duh) and performs pretty well. <code>merge</code> is pretty flexible and can do some cool stuff. dplyr has the fastest performance on this toy set and a small memory footprint. data.table takes about twice as long as dplyr and is ~10x the memory footprint. sqldf is slow and bloated - but what else could you expect from a package that is literally spinning up a database in the background? It’s the price you pay to use SQL in R.</p>
</div>
</div>
</div>
<div id="different-approaches-for-theta-joins" class="section level2">
<h2>Different Approaches for Theta Joins</h2>
</div>
<div id="the-small-data" class="section level2">
<h2>The (small) data</h2>
<p>We’ll use the same data for the toy problem and the more realistic version. This is the result of some text mining, specifically, named entity extraction from corpuses of text. It’s a two part, non-sequential process. We identify sentences by extracting the starting and ending characters.</p>
<pre class="r"><code>sent_df = read.table(text=&quot;id start end
                            1     1  39
                            2    42  63&quot;, header=TRUE)</code></pre>
<p>Then we extract entities by getting the type, starting and ending characters.</p>
<pre class="r"><code>ent_df = read.table(text=&quot;start end     ent_type
                              1   9 organization
                             23  31        money
                             45  50 organization&quot;, header=TRUE)</code></pre>
<p>But, to help our users get the context of where entities appear as well as to get co-occurence information, we need to know what sentence the entity appeared in. Additionally, we only want to keep the sentence id and the entity type.</p>
<p>In this case, we can see the first entity (an organization) starts at location 1 and ends at 9 which puts it in sentence 1 (which starts at location 1 and ends at 39). The second entity (money!) is also in sentence 1 (starts at 23 and ends at 31) while the last entity belongs in sentence 2. An equi join won’t work because I need to check if entity.start &gt;= sentence.start AND entity.end &lt;= sentence.end. Luckily, we have a few approaches.</p>
</div>
<div id="base-r-1" class="section level2">
<h2>Base R</h2>
<p>What we’ll do is cross join the data together, then do some filtering. I’m doing this all with base R functionality which I’m not totally used to doing, so this may not be the most perfect form of filtering. I decided to try using the <code>%between%</code> operator as well. Since an entity cannot be extracted which spans sentences all we really need to check is that the entity start is between the sentence start and end.</p>
<pre class="r"><code>baseR_fuzzy = function(){
  tmp = merge(x = sent_df, y = ent_df, by = NULL)
  tmp[tmp$start.x &lt;= tmp$start.y &amp; tmp$end.x &gt;= tmp$end.y,c(&quot;id&quot;,&quot;ent_type&quot;)]
}

baseR_fuzzy_between = function(){
  tmp = merge(x = sent_df, y = ent_df, by = NULL)
  tmp[tmp$start.y %between% tmp[,c(&quot;start.x&quot;,&quot;end.x&quot;)],c(&quot;id&quot;,&quot;ent_type&quot;)]
}
  
baseR_fuzzy()
##   id     ent_type
## 1  1 organization
## 3  1        money
## 6  2 organization</code></pre>
</div>
<div id="data.table-1" class="section level2">
<h2>data.table</h2>
<p>One great thing about data.table is that it supports fuzzy joins right out of the gate. However, there’s a lot of ambiguity in the join logic. Because doing a left join takes Y[X] and we’re joining the entities onto the sentences we list column names in the left-to-right order, not the left join order. So, where we have <code>on=.(start &gt;= start)</code> you can think of it as <code>on=.(start.Y &gt;= start.X)</code> which is equivalent to <code>on=.(start.ent &gt;= start.sent)</code>.</p>
<pre class="r"><code>sent_dt = data.table(sent_df)
ent_dt  = data.table(ent_df)

dt_fuzzy = function(){
  ent_dt[sent_dt, on=.(start &gt;= start, end &lt;= end)][,.(id, ent_type)]
}
dt_fuzzy()
##    id     ent_type
## 1:  1 organization
## 2:  1        money
## 3:  2 organization</code></pre>
</div>
<div id="sqldf-1" class="section level2">
<h2>sqldf</h2>
<p>sqldf also has the <code>BETWEEN</code> operator which lets us simplify the inequality of our join.</p>
<pre class="r"><code>sqldf_fuzzy = function() {
  sqldf(
      &quot;
      SELECT id, ent_type
      FROM sent_df a, ent_df b
      WHERE b.start BETWEEN a.start AND a.end 
      &quot;
  )
}
sqldf_fuzzy()
##   id     ent_type
## 1  1 organization
## 2  1        money
## 3  2 organization</code></pre>
</div>
<div id="fuzzyjoin" class="section level2">
<h2>fuzzyjoin</h2>
<p>Here I’ll introduce a new package aptly named <code>fuzzyjoin</code> (I’m using version 0.1.2). This adds ‘fuzzy’ versions of all the <code>dplyr</code> joins and is fully compatible in the <code>tidyverse</code>. In addition to providing both tables we need to provide match functions which provide logical indicators of fuzzy matching. What’s interesting is that each row is returned twice which must be a function of providing two match functions.</p>
<p>This is also the first time I use the <code>magrittr</code> pipes (%&gt;%). If you’re not familiar with them I’d suggest learning about them because they’re great and I have stickers of them on my truck and motorcycle.</p>
<pre class="r"><code>library(fuzzyjoin)
startMatch = function(x,y){
  x &lt;= y
}
endMatch = function(x,y){
  x &gt;= y
}
fuzzy_fuzzy = function(){
  fuzzy_join(sent_df,ent_df,by=c(&quot;start&quot;,&quot;end&quot;),match_fun = list(start = startMatch,end = endMatch)) %&gt;% 
    select(id,ent_type) %&gt;% 
    distinct()
}
fuzzy_fuzzy()
##   id     ent_type
## 1  1 organization
## 2  1        money
## 3  2 organization</code></pre>
</div>
<div id="pure-tidyverse" class="section level2">
<h2>Pure tidyverse</h2>
<p>I’m a fan of limiting the number of packages your code relies upon. Adding <code>fuzzyjoin</code> to handle this problem feels unnecessary (it provides great value in other applications because of the flexibility of the match functions) so I’d like to try and avoid it but also leverage the tidyverse. So I’m going to load the <code>tidyr</code> package (I’m using version 0.6.1) which is a solid compliment to <code>dplyr</code> and does lots of useful stuff. I know it looks like I’m just swapping out one package for another, but given the general practicality of tidyr compared to fuzzyjoin, I think it’s OK.</p>
<p>tidyr adds a cross_join function (not present in dplyr!!) which has a funky problem of not adjusting the names of duplicate columns. This impacts the ability of dplyr and other things to work on the resulting tibble (data.frame). So, I manually adjust the names using <code>names&lt;-</code>, filter down to what I want and then select the columns. The approach is identical to the base R code, just using the tidyverse.</p>
<pre class="r"><code>library(tidyr)
tidy_fuzzy = function(){
  sent_df %&gt;% 
    crossing(ent_df) %&gt;% 
    `names&lt;-`(c(&quot;id&quot;,&quot;start.x&quot;,&quot;end.x&quot;,&quot;start.y&quot;,&quot;end.y&quot;,&quot;ent_type&quot;)) %&gt;% 
    filter(end.x &gt;= end.y &amp; start.x &lt;= start.y) %&gt;% 
    select(id,ent_type)
}</code></pre>
</div>
<div id="profiling-1" class="section level2">
<h2>Profiling</h2>
<p>Let’s profile these (small) fuzzy joins just to get a sense of where they stand.</p>
<div id="profmem-1" class="section level3">
<h3>profmem</h3>
<table>
<thead>
<tr class="header">
<th>Ecosystem</th>
<th>profmem bytes</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Base R</td>
<td>0</td>
</tr>
<tr class="even">
<td>Base R (%between%)</td>
<td>0</td>
</tr>
<tr class="odd">
<td>data.table</td>
<td>83,136</td>
</tr>
<tr class="even">
<td>sqldf</td>
<td>184,480</td>
</tr>
<tr class="odd">
<td>fuzzyjoin</td>
<td>117,104</td>
</tr>
<tr class="even">
<td>tidyverse</td>
<td>41,848</td>
</tr>
</tbody>
</table>
</div>
<div id="microbenchmark-1" class="section level3">
<h3>microbenchmark</h3>
<pre class="r"><code>microbenchmark(base = baseR_fuzzy(),
               base_between = baseR_fuzzy_between(),
               dt = dt_fuzzy(),
               sqldf = sqldf_fuzzy(),
               fuzzyjoin = fuzzy_fuzzy(),
               tidyverse = tidy_fuzzy(),
               times = 100)
## Unit: microseconds
##          expr        min          lq        mean      median         uq
##          base    420.821    503.4165    568.9828    550.0935    591.300
##  base_between    434.313    532.5900    681.3389    587.4715    631.413
##            dt   1203.750   1398.1150   1622.7250   1516.4475   1681.822
##         sqldf  13554.124  14266.3095  16467.4464  14979.7710  16349.442
##     fuzzyjoin 102653.099 110137.2410 120270.8023 113309.8015 122218.131
##     tidyverse  11972.950  12768.6420  13838.1710  13226.6585  14376.438
##         max neval
##    1261.367   100
##    6209.831   100
##    4577.968   100
##   58999.404   100
##  217263.831   100
##   26306.721   100</code></pre>
<div id="results-1" class="section level4">
<h4>Results</h4>
<p>Both base R functions have no memory footprint and actually run the fastest with the <code>%between%</code> function being a touch slower but not enough to ignore it’s improved readability. <code>fuzzyjoin</code> has a large footprint and runs the slowest being in the same ballpark as <code>sqldf</code> - neither of these are great choices for the task we have. <code>data.table</code> and <code>tidyverse</code> are in the same ballpark, but are substantially slower than base R. BUT this was a very small toy problem. Let’s do something more meaningful.</p>
</div>
</div>
</div>
<div id="bigger-data" class="section level2">
<h2>Bigger Data</h2>
<p>It turned out that in the real-world case we only needed to do fuzzy joining on a per-document basis which meant the data never got so big that scaling issues of each approach would matter. It was scaling how much parallel processing we could do to slam documents through.</p>
<p>But that’s boring. We have scaling issues we need to test and solve.</p>
<div class="figure">
<img src="/img/2017-08-06-picture2.png" alt="Common Joins" width="400" />
<p class="caption">Common Joins</p>
</div>
<p>Originally I created 5000 sentences with ~23,000 entities, but this proved to be too much for some of the functions to handle on my laptop (having closed all other applications first!). So, I shrunk it to 2000 sentences and ~9,000 entities.</p>
<pre class="r"><code>set.seed(2300)
nsent = 2000
sentence_length = floor(rnorm(nsent,100,10))
sent_df = data.frame(id = 1:nsent,
                     start = Reduce(sum,sentence_length,init=1,accumulate = T)[1:nsent],
                     end = cumsum(sentence_length))
stop = FALSE
i = 1
ent_df = data.frame(start = NA, end = NA, ent_type = NA)
while(!stop){
  ent_start = as.logical(rbinom(n=1,size=1,prob = 0.2))
  if(ent_start){
    sent = max(which(sent_df$start &lt;= i))
    sent_end = sent_df$end[sent_df$id == sent]
    ent_end = min(c(i+rpois(1,1)+3,sent_end))
    if(ent_end-i &lt; 3){
      i = i+3
      next
    }
    ent_type = sample(c(&quot;organization&quot;,&quot;person&quot;,&quot;money&quot;),size = 1)
    ent_df = rbind(ent_df,data.frame(start=i, end=ent_end, ent_type=ent_type))
    i = ent_end+2
  }
  i = i+3
  if(i &gt; max(sent_df$end)) stop = TRUE
}</code></pre>
<p>Now we have a bunch of data - so let’s test stuff!</p>
<div id="microbenchmark-2" class="section level3">
<h3>microbenchmark</h3>
<p>I suspect some of these are going to run very poorly, so we’ll start with an n of 1. This isn’t a good benchmark but when you see the eval times, you’ll realize why.</p>
<pre class="r"><code>microbenchmark(base = baseR_fuzzy(),
               base_between = baseR_fuzzy_between(),
               dt = dt_fuzzy(),
               sqldf = sqldf_fuzzy(),
               fuzzyjoin = fuzzy_fuzzy(),
               tidyverse = tidy_fuzzy(),
               times = 1)</code></pre>
<table>
<thead>
<tr class="header">
<th>Method</th>
<th>Eval Time (ms)</th>
<th>Scale Up</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Base</td>
<td>42,564</td>
<td>67,669</td>
</tr>
<tr class="even">
<td>Base (%between%)</td>
<td>53,239</td>
<td>81,280x</td>
</tr>
<tr class="odd">
<td>data.table</td>
<td>17</td>
<td>9x</td>
</tr>
<tr class="even">
<td>sqldf</td>
<td>1,296</td>
<td>798x</td>
</tr>
<tr class="odd">
<td>fuzzyjoin</td>
<td>355,983</td>
<td>16,100x</td>
</tr>
<tr class="even">
<td>tidyverse</td>
<td>65,113</td>
<td>38,301x</td>
</tr>
</tbody>
</table>
<p>The ‘scale up’ column is simply dividing the execution time of the 1000x sentence (3000x entities) data by the execution time of the original data. I find the results to be somewhat surprising.</p>
<div id="results-2" class="section level4">
<h4>Results</h4>
<ul>
<li><code>data.table</code> is the clear winner overall - it was middle of the pack on the toy data and scales better than the data.</li>
<li><code>sqldf</code> has a lot of overhead and ran (relatively) poorly on the toy problem but scales very well with the larger data.</li>
<li><code>fuzzyjoin</code> took nearly 6 minutes to run where the next slowest was closer to a minute. This is not a good choice for the type of fuzzy joining we’re doing.</li>
<li>Base R (both versions) and <code>tidyverse</code> were in the same rough ballpark, ~1 minute with ridiculous scaling problems.</li>
</ul>
</div>
</div>
</div>
<div id="conclusion" class="section level2">
<h2>Conclusion</h2>
<p>I’ve shown you 6 different approaches to doing fuzzy joins (aka theta joins) and demonstrated their relative merits. We’ve seen that performance on small joins is no indication of performance on large joins but <code>data.table</code> scales very well on a variety of sizes and <code>sqldf</code> leverages it’s bloat in small sizes to perform well on larger sizes. Also important to note - base R has reasonable performance and beats a ‘tidy’ solution at the (potential) cost of readability.</p>
<p>Should you pick up <code>data.table</code> and replace all your tidy work with it? I’m begining to believe that maybe I should. <code>data.table</code> has at least one other practical advantage over the tidyverse. Stability. <code>data.table</code> is past version 1.0 where <code>dplyr</code> and <code>tidyr</code> are not. This is especially apparent with the fairly frequent breaking changes made to the tidyverse which can have a strong, negative impact in an enterprise environment.</p>
<p>Well - I hope you have fun with theta joins (and start calling them that!)</p>
</div>
</div>
</content:encoded>
    </item>
    
    <item>
      <title>Installing Your First Spark Cluster</title>
      <link>http://thug-r.life/post/2016-03-20-installing-your-first-spark-cluster/</link>
      <pubDate>Sun, 20 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://thug-r.life/post/2016-03-20-installing-your-first-spark-cluster/</guid>
      <description>Installing your first spark clusterSo, if you’re like me you’ve been using a lot of traditional tools for data science/analytics/whatever you want to call it. R is great, it’s flexible, it’s powerful but it’s slow and memory constrained. At work I’ve got a VM with 16Gb and one call can increase it. At home I’ve got an 8 Gb machine and honestly, it works fine for what I do here.</description>
      <content:encoded><div id="installing-your-first-spark-cluster" class="section level1">
<h1>Installing your first spark cluster</h1>
<p>So, if you’re like me you’ve been using a lot of traditional tools for data science/analytics/whatever you want to call it. R is great, it’s flexible, it’s powerful but it’s slow and memory constrained. At work I’ve got a VM with 16Gb and one call can increase it. At home I’ve got an 8 Gb machine and honestly, it works fine for what I do here. But sometimes data is bigger. Sometimes you want to go faster. That’s what Apache Spark is supposed to bring to the table. They talk about being 100x faster than Hadoop (which I’ll admit I’ve never used) but that’s not an erstwhile comparison to R and what R can do in memory. I’ve been wanting to play around with Spark, especially because of SparkR and the supposed ease of combining the two but there were a big stumbling block.</p>
<div id="spark-is-all-about-distributed-computing" class="section level3">
<h3>Spark is all about distributed computing</h3>
<p>In the AWS mindset of hardware, everything is little chunks and you just grab as many little chunks as you need to get things done. This is the opposite of the mainframe mindset which is to have one HUGE chunk. R, by default, is a mainframe mindset. It uses only local resource and will greedily hog everything it can. This isn’t infinitely scalable. Even though 64-bit machines/OSs are supposed to bring theoretically infinite RAM support, the OS and even the processor on a computer will limit what can be installed (and this is without considering how many slots are in a motherboard). Sure, a server is way more scalable than a home PC, but still, you’re going to hit a wall with R eventually. Spark is designed to work best with the AWS mindset – lots of smaller machines all cluster together to provide the right amount of power. Now, this isn’t infinitely scalable either because I think Spark starts to choke on 1000+ nodes (servers). But if you start using bigger servers for your nodes, it’s not going to be an issue.</p>
<p>So why is this distributed computing idea a stumbling block? There are lots of guides for installing Spark on your local machine which I guess is fine for practicing, learning Scala, whatever. But I don’t like half measures, I wanted a cluster to I could actually see what that was like. There were no guides that, at least none that someone with my background could understand.</p>
</div>
<div id="solution" class="section level3">
<h3>Solution</h3>
<p>Just do it myself and keep trying till I figured it out. Also, Stack Overflow and some barely helpful comments.</p>
</div>
<div id="walkthrough" class="section level2">
<h2>Walkthrough</h2>
<p>I’m going to detail how to do this using Digital Ocean. Digital Ocean is a great service, you can spin up servers for fixed monthly costs which all use SSD drives so they’re fast. Their API is easy to navigate (vs AWS) and if you click <a href="https://m.do.co/c/92b8439f5af7">this link</a> to sign up with then, you’ll get $10 for free which is enough to run this example for about 5 days (f.d. this is my referral link so if you do spend money with then, I’ll get a kickback). You’ll need to make an account to follow along.</p>
<div id="build-the-servers" class="section level3">
<h3>Build the servers</h3>
<p>Staring from Digital Ocean, we need to order 3 servers (you could order more, but 3 is the minimum number to have a real cluster). I’m going to order Ubuntu 14.04, $20/mo servers with Private Networking and use my computers SSH Key. If you don’t have an SSH Key you should <a href="https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-digitalocean-droplets">really, really make one</a>. Why Ubuntu? Because I’m most familiar with it and apt-get is amazing. Why $20/month? 2 CPUs is nice because our cluster will have 4 to work with and the extra Gb of RAM plus HD space means we’ll need less swap. Pick the region most appropriate for you, New York 3 is great. Make sure you check the box to use private networking as that’s the only way I’ve gotten this to work. Finally, increment the number of clusters to three and name one of them spark-master and the other two spark-worker-01 and spark-worker-02 so we can remember which is which. Hit create and wait just a minute for them to be created.</p>
<div class="figure">
<img src="/img/2016-03-20-step-01.png" width="400" />

</div>
<div class="figure">
<img src="/img/2016-03-20-step-02.png" width="400" />

</div>
<div class="figure">
<img src="/img/2016-03-20-step-03.png" width="400" />

</div>
</div>
<div id="install-needed-software" class="section level3">
<h3>Install needed software</h3>
<p>If you’re on Windows, you’ll need to <a href="https://the.earth.li/~sgtatham/putty/latest/x86/putty-0.67-installer.msi">install Putty</a>. If you’re on a Mac you can just use your Terminal and if you’re on linux, you already know what you’re doing.</p>
</div>
<div id="connect-to-your-servers" class="section level3">
<h3>Connect to your servers</h3>
<p>I’m going to assume you made an SSH key for the entire guide, if you didn’t, just know you’ll need to use the password Digital Ocean emailed you. I’m on a Mac, so everything is going to be from the Terminal there. If you’re using Putty, you may need to do some extra work, sorry.</p>
<p>To connect to the servers, we’ll type <code>ssh root@IP_ADDRESS_HERE</code> where IP_ADDRESS_HERE is the IP address of spark-master we get from the Digital Ocean console. You’ll get prompted if this is really a server you want to connect to and the answer is yes – you own it after all.</p>
<div class="figure">
<img src="/img/2016-03-20-step-04.png" width="400" />

</div>
<p>If everything worked OK, you’ll see something like this:</p>
<div class="figure">
<img src="/img/2016-03-20-step-05.png" width="400" />

</div>
<p>We need to do a few things to this server and, this is important, both of the worker servers as well. My suggestion is to have three windows open, connected to each server and just do each step in serial.</p>
<ol style="list-style-type: decimal">
<li>Prevent root from logging in with a password (security and only if you used an SSH key)</li>
<li>Update the package repository</li>
<li>Upgrade all installed packages</li>
<li>Create swap space</li>
<li>Install Java</li>
<li>Install git</li>
<li>Install Scala</li>
<li>Install sbt</li>
<li>Build Spark</li>
</ol>
<p>To prevent root from logging in with a password, we need to edit the file <code>/etc/ssh/sshd_config</code> which we do with <code>nano /etc/ssh/sshd_config</code></p>
<p>Go to the line under #Authentication and change the line which reads <code>PermitRootLogin yes</code> to <code>PermitRootLogin without-password</code> then press Ctrl-O (thats the letter, not the number) to save and Ctrl-X to exit the nano editor.</p>
<div class="figure">
<img src="/img/2016-03-20-step-06.png" width="400" />

</div>
<p>Now, let’s update and upgrade all the software running on the box. This is where Ubuntu and apt-get shine. Simply type apt-get update and then when that’s done apt-get upgrade to get everything up to date. You’ll be prompted after the upgrade step if you want to consume the disk space and you should answer yes.</p>
<p>Now we need to create some swap space. Swap space is hard disk space that’s reserved to act like RAM when we run out of RAM. Building Spark will require more than 5Gb which would have cost us $80/month to get. Swap is traditionally slow because spinning hard disks are slow input/output devices. SSD drives are almost as fast as RAM which is great. Digital Ocean doesn’t like it because it wears out the drives faster but we’ll configure ours to only use when necessary so we don’t blow away the hardware. We know we need a little over 5Gb but to be safe, let’s make 10Gb of swap space. Type <code>fallocate -l 10G /swapfile</code> to make a file called swapfile in the root of your server of size 10Gb. Then we need to modify the permissions on the file so only the system can read/write from it – don’t want hackers seeing what’s in our swap. So we’ll type <code>chmod 600 /swapfile</code> and hit enter. Then we need to make this file a swap file so we type <code>mkswap /swapfile</code> followed by <code>swapon /swapfile</code> to activate it.</p>
<div class="figure">
<img src="/img/2016-03-20-step-07.png" width="400" />

</div>
<p>Almost done! This is just temporary, it will only last while the server stays on. We want to make it permanent so we’ll edit a file using <code>nano /etc/fstab</code> and at the bottom of the file we’ll add the line <code>/swapfile   none   swap   sw   0   0</code> (these are the numbers, not the letters).</p>
<div class="figure">
<img src="/img/2016-03-20-step-08.png" width="400" />

</div>
<p>Finally, to be good customers, we’re going to modify the ‘swappiness’ of our swap to be a low number (0 would mean “never use it” and 100 would mean “use it first”). We’ll edit a file using <code>nano /etc/sysctl.conf</code> and add <code>vm.swappiness=10</code> to the last line. Ctrl-O to save and Ctrl-X to quit.</p>
<div class="figure">
<img src="/img/2016-03-20-step-09.png" width="400" />

</div>
<p>We’ll reboot the server at this point to make sure everything takes effect. Simply type <code>reboot</code> into the terminal. It will disconnect you from the server – wait a minute and then reconnect with <code>ssh root@IP_ADDRESS_HERE</code> (should be as easy as pressing the up arrow on your keyboard and enter). We can type in <code>cat /proc/sys/vm/swappiness</code> to see the current swappiness value (should be 10 if things worked OK) and we can type <code>free -m</code> to make sure our 10Gb of RAM are there.</p>
<div class="figure">
<img src="/img/2016-03-20-step-10.png" width="400" />

</div>
<p>Everything looks good on my system! Make sure it’s done on all three of your servers before proceeding.</p>
<p>Now we need to install Java. Official Oracle Java is hard to install on linux. So we won’t. We’ll install the default JDK (Java Development Kit) and JRE (Java Runtime Environment) which is an open source version of Java. It does everything Oracle Java does, just more open source. Type <code>apt-get install default-jdk default-jre</code> into the console to install both of these. It will take a minute.</p>
<p>Now we need to install git. Git is a source control system and when building Spark we’ll need it. Type <code>apt-get install git</code> to install it.</p>
<p>To install Scala, we could just type <code>apt-get install scala</code> but we wouldn’t be getting the latest version. This is true of git and Java too, but they’re less important to have the newest version. If you visit the <a href="http://www.scala-lang.org/files/archive/?C=M;O=D">Scala archive page</a> you should look for the newest file ending in .deb (this is a Debian style package which Ubuntu can install). At the time of this writing, it’s 2.11.8. Right click on the link and copy the link address. In my case, that address is <a href="http://www.scala-lang.org/files/archive/scala-2.11.8.deb" class="uri">http://www.scala-lang.org/files/archive/scala-2.11.8.deb</a></p>
<p>Back in our server we’re going to download that file. By default when we login, we’re in the home folder of the root user, a fine place to download files. So, we’ll type <code>wget http://www.scala-lang.org/files/archive/scala-2.11.8.deb</code> to download the file to our current folder (feel free to replace the address with the newest version). When it’s done, we’ll install it using <code>dpkg -i scala-2.11.8.deb</code>. Note, if the file you downloaded has a different name, this won’t work. So, type <code>dpkg -i sc</code> and hit tab, the file name will fill in for you.</p>
<div class="figure">
<img src="/img/2016-03-20-step-11.png" width="400" />

</div>
<p>Now we need to install sbt which is a way for Scala to build things. It’s a lot harder to find the newest version of this, so just use <code>wget https://bintray.com/artifact/download/sbt/debian/sbt-0.13.11.deb</code> to get the most recent as of this writing. Install it with <code>dpkg -i sbt-0.13.11.deb</code></p>
<p>Now we’re ready to install Spark. Finally! Go to the <a href="https://spark.apache.org/downloads.html">Spark download page</a> and select the newest version of source code (at the time of writing, 1.6.1) and then click the link provided. On the next page, right click on one of the links and copy the address.</p>
<p><img src="/img/2016-03-20-step-12.png" alt="Step 12a" width="400" /> <img src="/img/2016-03-20-step-12b.png" width="400" /></p>
<p>Take your copied address and go back to your server and type <code>wget COPIED_LINK</code> to download the file. Now, this compressed file, so we need to uncompress it. We can do this with <code>tar -xvf spark-1.6.1.tgz</code> which will produce a new folder named spark-1.6.1 with everything we need inside. We can move into the folder by typing <code>cd spark-1.6.1</code> and then we can build Spark by typing <code>sbt/sbt assembly</code> (note, in the screenshot I typed sbt/sbt build which is wrong)</p>
<p><img src="/img/2016-03-20-step-13.png" alt="Step 13a" width="400" /> <img src="/img/2016-03-20-step-13b.png" width="400" /></p>
<p>One thing that’s weird here is that Spark apparently wants a specific version of sbt so it downloads sbt 0.13.7 suggesting that as long as you have one version of sbt, it will work and so there’s no pressure to get the latest version. This is going to take a long time (15+ minutes) so go take a break, stretch your legs and I’ll see you back here in a bit.</p>
</div>
<div id="starting-spark-in-standalone-cluster-mode" class="section level3">
<h3>Starting Spark in Standalone Cluster Mode</h3>
<p>Spark has a few options for running as a cluster – it can use YARN or Mesos (whatever those are) or it can run in what is called Standalone mode. This may sound like “not a cluster mode” but don’t worry – it is a cluster.</p>
<p>We need to get some additional information now about our server, specifically, our private IP address. All servers have public IP addresses if they’re connected to the internet, but only by activating the private networking when we created our servers can we more easily allow them to speak to each other. In Digital Ocean, from the droplets page, if you click on one of the servers (you’ll need to do this for all three) you’ll get to the full dashboard. From there, click on ‘Settings’ and you should see the public and private IP addresses of your servers.</p>
<div class="figure">
<img src="/img/2016-03-20-step-14b.png" width="400" />

</div>
<p>Copy the private IP address because we need it for starting up the master node. First, make sure your current location is /root/spark-1.6.1 which you can do by typing in pwd – if you’re not here, use <code>cd /root/spark-1.6.1/</code> to get there otherwise these commands won’t work. To start the master node (which must be done first) we will type <code>./sbin/start-master.sh -h MASTER_PRIVATE_IP</code> which will print out a line saying it’s starting and then return you to the command prompt. Once this is done, we can start each of the worker nodes. On those nodes, run <code>./sbin/start-slave.sh spark://MASTER_PRIVATE_IP:7077 -m 10g -h WORKER_PRIVATE_IP</code> – what does this command do? We’re creating a worker and giving it the location of the master – that’s why we provide the master’s private IP – the :7077 is the default port the master listens on. You could change this but we’re not going to here. -m 10g is saying the worker has 10Gb of RAM available. Why are we specifying this? My default, the worker will make the system memory -1Gb available – in our case, 1Gb. But we setup SWAP so it could use it if necessary, so we’ll allocate it. Finally, -h WORKER_PRIVATE_IP is ensuring the worker node will start up with the address it has and not under some random default.</p>
<p>Now we should have a cluster with one master and two nodes. We can test that it works by launching the Spark shell on the master node with <code>./bin/spark-shell –master local –executor-memory 4g</code> which says we’re connecting to a master which is the local machine and we want each worker to provide 4Gb of memory for our use.</p>
<div class="figure">
<img src="/img/2016-03-20-step-15.png" width="400" />

</div>
<p>This dumps us to the default scala interface so we can do a quick test to make sure it works. Apache provides some <a href="https://spark.apache.org/examples.html">basic examples</a> of how Spark works. We’ll estimate pi with this code:</p>
<pre class="eval"><code>val NUM_SAMPLES = 10000
val count = sc.parallelize(1 to NUM_SAMPLES).map{i =&gt;
 val x = Math.random()
 val y = Math.random()
 if (x*x + y*y &lt;= 1) 1 else 0
}.reduce(_ + _)
println(&quot;Pi is roughly &quot; + 4.0 * count / NUM_SAMPLES)</code></pre>
<p>Just copy and paste the above code into the scala terminal and you should get something like:</p>
<div class="figure">
<img src="/img/2016-03-20-step-16.png" width="400" />

</div>
<pre class="r"><code>nsamp = 10000
cat(&quot;Pi is roughly&quot;,4*sum((runif(nsamp)^2+runif(nsamp)^2) &lt;= 1)/nsamp)
## Pi is roughly 3.1736</code></pre>
<p>So is this the example that proves Spark is the best? Nope. But now we have an actual cluster of Spark nodes.</p>
</div>
</div>
</div>
</content:encoded>
    </item>
    
  </channel>
</rss>